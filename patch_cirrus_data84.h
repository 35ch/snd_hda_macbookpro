
// new feature to do a sequence of coef read/writes
// (seems to be used a lot for cs8409)
// note that we ignore the return for gets for the moment!!
// ooh - new idea - save the logged return and check
static const struct hda_coef cs8409_init_coef1[] = {
        //{0, 0x01, idx, 0x00, retdata, 0}, read
        //{1, 0x01, idx, param, dmydata, 0}, write
        //{2, 0x01, idx, param, retdata, 0}, write mask
        //{ 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 0 }, // coef read 1370
        //{ 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 0 }, // coef write 1374
        //{ 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 0 }, // coef read 1378
        //{ 1, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 0 }, // coef write 1382
        //{ 1, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 0 }, // coef write 1386
        //{ 1, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 0 }, // coef write 1390
        //{ 1, CS8409_VENDOR_NID, 0x0002, 0x0000, 0x00000000, 0 }, // coef write 1394

        { 1, CS8409_VENDOR_NID, 0x0019, 0x8000, 0x00000000, 0 }, // coef write 1398
        { 1, CS8409_VENDOR_NID, 0x001a, 0x8000, 0x00000000, 0 }, // coef write 1402
        { 1, CS8409_VENDOR_NID, 0x001b, 0x8000, 0x00000000, 0 }, // coef write 1406
        { 1, CS8409_VENDOR_NID, 0x001c, 0x8000, 0x00000000, 0 }, // coef write 1410
        { 1, CS8409_VENDOR_NID, 0x001d, 0x8000, 0x00000000, 0 }, // coef write 1414
        { 1, CS8409_VENDOR_NID, 0x001e, 0x8000, 0x00000000, 0 }, // coef write 1418
        { 1, CS8409_VENDOR_NID, 0x001f, 0x8000, 0x00000000, 0 }, // coef write 1422
        { 1, CS8409_VENDOR_NID, 0x0020, 0x8000, 0x00000000, 0 }, // coef write 1426
        { 1, CS8409_VENDOR_NID, 0x0021, 0x8000, 0x00000000, 0 }, // coef write 1430
        { 1, CS8409_VENDOR_NID, 0x0022, 0x8000, 0x00000000, 0 }, // coef write 1434
        { 1, CS8409_VENDOR_NID, 0x0023, 0x8000, 0x00000000, 0 }, // coef write 1438
        { 1, CS8409_VENDOR_NID, 0x0024, 0x8000, 0x00000000, 0 }, // coef write 1442
        { 1, CS8409_VENDOR_NID, 0x0025, 0x8000, 0x00000000, 0 }, // coef write 1446
        { 1, CS8409_VENDOR_NID, 0x0026, 0x8000, 0x00000000, 0 }, // coef write 1450
        { 1, CS8409_VENDOR_NID, 0x0027, 0x8000, 0x00000000, 0 }, // coef write 1454
        { 1, CS8409_VENDOR_NID, 0x0028, 0x8000, 0x00000000, 0 }, // coef write 1458
        { 1, CS8409_VENDOR_NID, 0x0029, 0x8000, 0x00000000, 0 }, // coef write 1462
        { 1, CS8409_VENDOR_NID, 0x002a, 0x8000, 0x00000000, 0 }, // coef write 1466
        { 1, CS8409_VENDOR_NID, 0x002b, 0x8000, 0x00000000, 0 }, // coef write 1470
        { 1, CS8409_VENDOR_NID, 0x002c, 0x8000, 0x00000000, 0 }, // coef write 1474
        { 1, CS8409_VENDOR_NID, 0x002d, 0x8000, 0x00000000, 0 }, // coef write 1478
        { 1, CS8409_VENDOR_NID, 0x002e, 0x8000, 0x00000000, 0 }, // coef write 1482
        { 1, CS8409_VENDOR_NID, 0x002f, 0x8000, 0x00000000, 0 }, // coef write 1486
        { 1, CS8409_VENDOR_NID, 0x0030, 0x8000, 0x00000000, 0 }, // coef write 1490
        { 1, CS8409_VENDOR_NID, 0x0031, 0x8000, 0x00000000, 0 }, // coef write 1494
        { 1, CS8409_VENDOR_NID, 0x0032, 0x8000, 0x00000000, 0 }, // coef write 1498
        { 1, CS8409_VENDOR_NID, 0x0033, 0x8000, 0x00000000, 0 }, // coef write 1502
        { 1, CS8409_VENDOR_NID, 0x0034, 0x8000, 0x00000000, 0 }, // coef write 1506
        { 1, CS8409_VENDOR_NID, 0x0035, 0x8000, 0x00000000, 0 }, // coef write 1510
        { 1, CS8409_VENDOR_NID, 0x0036, 0x8000, 0x00000000, 0 }, // coef write 1514
        { 1, CS8409_VENDOR_NID, 0x0037, 0x8000, 0x00000000, 0 }, // coef write 1518
        { 1, CS8409_VENDOR_NID, 0x0038, 0x8000, 0x00000000, 0 }, // coef write 1522
        { 1, CS8409_VENDOR_NID, 0x0039, 0x8000, 0x00000000, 0 }, // coef write 1526
        { 1, CS8409_VENDOR_NID, 0x003a, 0x8000, 0x00000000, 0 }, // coef write 1530
        { 1, CS8409_VENDOR_NID, 0x003b, 0x8000, 0x00000000, 0 }, // coef write 1534
        { 1, CS8409_VENDOR_NID, 0x003c, 0x8000, 0x00000000, 0 }, // coef write 1538
        { 1, CS8409_VENDOR_NID, 0x003d, 0x8000, 0x00000000, 0 }, // coef write 1542
        { 1, CS8409_VENDOR_NID, 0x003e, 0x8000, 0x00000000, 0 }, // coef write 1546
        { 1, CS8409_VENDOR_NID, 0x003f, 0x8000, 0x00000000, 0 }, // coef write 1550
        { 1, CS8409_VENDOR_NID, 0x0040, 0x8000, 0x00000000, 0 }, // coef write 1554
        { 1, CS8409_VENDOR_NID, 0x0041, 0x8000, 0x00000000, 0 }, // coef write 1558
        { 1, CS8409_VENDOR_NID, 0x0042, 0x8000, 0x00000000, 0 }, // coef write 1562
        { 1, CS8409_VENDOR_NID, 0x0043, 0x8000, 0x00000000, 0 }, // coef write 1566
        { 1, CS8409_VENDOR_NID, 0x0044, 0x8000, 0x00000000, 0 }, // coef write 1570
        { 1, CS8409_VENDOR_NID, 0x0045, 0x8000, 0x00000000, 0 }, // coef write 1574
        { 1, CS8409_VENDOR_NID, 0x0046, 0x8000, 0x00000000, 0 }, // coef write 1578
        { 1, CS8409_VENDOR_NID, 0x0047, 0x8000, 0x00000000, 0 }, // coef write 1582
        { 1, CS8409_VENDOR_NID, 0x0048, 0x8000, 0x00000000, 0 }, // coef write 1586
        { 1, CS8409_VENDOR_NID, 0x0049, 0x8000, 0x00000000, 0 }, // coef write 1590
        { 1, CS8409_VENDOR_NID, 0x004a, 0x8000, 0x00000000, 0 }, // coef write 1594
        { 1, CS8409_VENDOR_NID, 0x004b, 0x8000, 0x00000000, 0 }, // coef write 1598
        { 1, CS8409_VENDOR_NID, 0x004c, 0x8000, 0x00000000, 0 }, // coef write 1602
        { 1, CS8409_VENDOR_NID, 0x004d, 0x8000, 0x00000000, 0 }, // coef write 1606
        { 1, CS8409_VENDOR_NID, 0x004e, 0x8000, 0x00000000, 0 }, // coef write 1610
        { 1, CS8409_VENDOR_NID, 0x004f, 0x8000, 0x00000000, 0 }, // coef write 1614
        { 1, CS8409_VENDOR_NID, 0x0050, 0x8000, 0x00000000, 0 }, // coef write 1618
        { 1, CS8409_VENDOR_NID, 0x0051, 0x8000, 0x00000000, 0 }, // coef write 1622
        { 1, CS8409_VENDOR_NID, 0x0052, 0x8000, 0x00000000, 0 }, // coef write 1626
        { 1, CS8409_VENDOR_NID, 0x0053, 0x8000, 0x00000000, 0 }, // coef write 1630
        { 1, CS8409_VENDOR_NID, 0x0054, 0x8000, 0x00000000, 0 }, // coef write 1634
        { 1, CS8409_VENDOR_NID, 0x0055, 0x8000, 0x00000000, 0 }, // coef write 1638
        { 1, CS8409_VENDOR_NID, 0x0056, 0x8000, 0x00000000, 0 }, // coef write 1642
        { 1, CS8409_VENDOR_NID, 0x0057, 0x8000, 0x00000000, 0 }, // coef write 1646

        //{ 1, CS8409_VENDOR_NID, 0x000a, 0x0000, 0x00000000, 0 }, // coef write 1650
        //{ 1, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000000, 0 }, // coef write 1654
        //{ 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 0 }, // coef write 1658
        //{ 1, CS8409_VENDOR_NID, 0x006c, 0x001f, 0x00000000, 0 }, // coef write 1662
        //{ 1, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000000, 0 }, // coef write 1666
};

static const struct hda_coef cs8409_init_coef2[] = {
        { 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 0 }, //   coef read 9193
        { 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 0 }, //   coef read 9197
        { 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 0 }, //   coef read 9201
        { 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 0 }, //   coef read 9205
        { 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008000, 0 }, //   coef read 9209
        { 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 0 }, //   coef read 9213
        { 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008000, 0 }, //   coef read 9217
        { 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 0 }, //   coef read 9221
        { 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 0 }, //   coef read 9225
        { 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 0 }, //   coef read 9229
        { 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 0 }, //   coef read 9233
        { 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 0 }, //   coef read 9237
        { 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 0 }, //   coef read 9241
        { 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 0 }, //   coef read 9245
        { 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 0 }, //   coef read 9249
        { 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 0 }, //   coef read 9253
        { 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 0 }, //   coef read 9257
        { 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 0 }, //   coef read 9261
        { 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 0 }, //   coef read 9265
        { 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 0 }, //   coef read 9269
        { 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 0 }, //   coef read 9273
        { 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 0 }, //   coef read 9277
        { 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 0 }, //   coef read 9281
        { 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 0 }, //   coef read 9285
        { 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 0 }, //   coef read 9289
        { 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 0 }, //   coef read 9293
        { 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 0 }, //   coef read 9297
        { 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 0 }, //   coef read 9301
        { 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 0 }, //   coef read 9305
        { 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 0 }, //   coef read 9309
        { 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 0 }, //   coef read 9313
        { 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 0 }, //   coef read 9317
        { 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 0 }, //   coef read 9321
        { 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 0 }, //   coef read 9325
        { 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 0 }, //   coef read 9329
        { 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 0 }, //   coef read 9333
        { 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 0 }, //   coef read 9337
        { 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 0 }, //   coef read 9341
        { 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 0 }, //   coef read 9345
        { 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 0 }, //   coef read 9349
        { 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 0 }, //   coef read 9353
        { 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 0 }, //   coef read 9357
        { 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 0 }, //   coef read 9361
        { 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 0 }, //   coef read 9365
        { 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 0 }, //   coef read 9369
        { 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 0 }, //   coef read 9373
        { 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 0 }, //   coef read 9377
        { 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 0 }, //   coef read 9381
        { 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 0 }, //   coef read 9385
        { 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 0 }, //   coef read 9389
        { 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 0 }, //   coef read 9393
        { 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 0 }, //   coef read 9397
        { 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 0 }, //   coef read 9401
        { 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 0 }, //   coef read 9405
        { 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 0 }, //   coef read 9409
        { 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 0 }, //   coef read 9413
        { 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 0 }, //   coef read 9417
        { 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 0 }, //   coef read 9421
        { 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 0 }, //   coef read 9425
        { 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 0 }, //   coef read 9429
        { 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 0 }, //   coef read 9433
        { 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 0 }, //   coef read 9437
        { 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 0 }, //   coef read 9441
};


static void gpio_set4(struct hda_codec *codec)
{
	int retval;
	dev_info(hda_codec_dev(codec), "start gpio_set4\n");
	snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x4);
        retval = snd_hda_codec_read(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DATA, 0);
	dev_info(hda_codec_dev(codec), "gpio_data 0x%x\n",retval);
	dev_info(hda_codec_dev(codec), "end   gpio_set4\n");
}

static void setup_reset_and_clear(struct hda_codec *codec)
{

        // so now really dont know why I skipped all this - maybe because they
        // almost entirely reads??
        // - except it does clear all the pin configs
        // plus does a DBL init

        int retval;


        dev_info(hda_codec_dev(codec), "command nid start setup_node_reset_and_clear\n");

        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 1); // 0x000f0000
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 2); // 0x000f0002
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 3); // 0x000f0000
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 4); // 0x000f0002
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000004, 0x00010001, 5); // 0x000f0004

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000004, 0x00020046, 6); // 0x001f0004
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000101, 7); // 0x001f0005
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_SUBSYSTEM_ID, 0x00000000, 0x106b3900, 8); // 0x001f2000

        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 9); // 0x000f0000
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 10); // 0x000f0002

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000f, 0xe0000019, 11); // 0x001f000f


        // AppleHDACodecGeneric::start(IOService*)


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_DBL_CODEC_RESET, 0x00000000); // 0x001fff00
        snd_hda_double_reset(codec);

        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 13); // 0x000f0000
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 14); // 0x000f0002


        // AppleHDANode::initForNodeID(unsigned short, OSObject*, OSObject*)

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000101, 15); // 0x001f0005
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000f, 0xe0000019, 16); // 0x001f000f
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x001a017f, 17); // 0x001f000a
//      snd_hda:     pcm params           1 bits: 16bit 24bit 32bit rates: 8kHz 11.025kHz 16kHz 22.05kHz 32kHz 44.1kHz 48kHz 96kHz
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000001, 18); // 0x001f000b
//      snd_hda:     stream format params 1 pcm
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 19); // 0x001f0012
//      snd_hda:     amp capabilities 1 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 20); // 0x001f000d
//      snd_hda:     amp capabilities 1 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0


        // AppleHDAFunctionGroup::initForNodeID??

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_SUBSYSTEM_ID, 0x00000000, 0x106b3900, 22); // 0x001f2000
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000008, 0x00010000, 23); // 0x001f0008

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DIRECTION, 0x00000000, 0x00000000, 24); // 0x001f1700
//      snd_hda:     gpio direction 1 0x00 in in in in in in in in

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000011, 0xc0000008, 25); // 0x001f0011
//      snd_hda:     gpio params 1 [('GPIO', 8), ('GPIO_WAKE', 1), ('GPO', 0), ('GPI', 0), ('GPIO_UNSOL', 1)]

        dev_info(hda_codec_dev(codec), "command nid start setup_node_reset_and_clear end\n");

}

static void init_read_all_nodes(struct hda_codec *codec)
{
        int retval;


        // get node count
        // note that there are 4 so called VirtualWidgets which are indexed after the 0x46 count from
        // the vendor node at 0x47
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000004, 0x00020046, 26); // 0x001f0004


        // so apple reads parameters from all nodes
        // but setting pin nodes SET_PIN_WIDGET_CONTROL to 0

        // this appears to be a loop of calls to AppleHDAWidgetCS8409::initForNodeID for each node
        // this calls AppleHDAWidget::initForNodeID(unsigned short, OSObject*, OSObject*)  for each node
        // and specifically deals with the BEEP node

        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 27); // 0x002f0005
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 28); // 0x002f0009
//      snd_hda:     2 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 29); // 0x002f000f
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 30); // 0x002f000a
//      snd_hda:     pcm params           2 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 31); // 0x002f000b
//      snd_hda:     stream format params 2 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 32); // 0x002f0012
//      snd_hda:     amp capabilities 2 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 33); // 0x002f000d
//      snd_hda:     amp capabilities 2 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 34); // 0x002f0009
//      snd_hda:     2 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0

        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 36); // 0x003f0005
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 37); // 0x003f0009
//      snd_hda:     3 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 38); // 0x003f000f
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 39); // 0x003f000a
//      snd_hda:     pcm params           3 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 40); // 0x003f000b
//      snd_hda:     stream format params 3 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 41); // 0x003f0012
//      snd_hda:     amp capabilities 3 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 42); // 0x003f000d
//      snd_hda:     amp capabilities 3 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 43); // 0x003f0009
//      snd_hda:     3 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0

        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 45); // 0x004f0005
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 46); // 0x004f0009
//      snd_hda:     4 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 47); // 0x004f000f
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 48); // 0x004f000a
//      snd_hda:     pcm params           4 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 49); // 0x004f000b
//      snd_hda:     stream format params 4 
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 50); // 0x004f0012
//      snd_hda:     amp capabilities 4 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 51); // 0x004f000d
//      snd_hda:     amp capabilities 4 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x04, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 52); // 0x004f0009
//      snd_hda:     4 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 54); // 0x005f0005
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 55); // 0x005f0009
//      snd_hda:     5 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 56); // 0x005f000f
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 57); // 0x005f000a
//      snd_hda:     pcm params           5 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 58); // 0x005f000b
//      snd_hda:     stream format params 5 
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 59); // 0x005f0012
//      snd_hda:     amp capabilities 5 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 60); // 0x005f000d
//      snd_hda:     amp capabilities 5 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x05, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 61); // 0x005f0009
//      snd_hda:     5 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 63); // 0x006f0005
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 64); // 0x006f0009
//      snd_hda:     6 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 65); // 0x006f000f
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 66); // 0x006f000a
//      snd_hda:     pcm params           6 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 67); // 0x006f000b
//      snd_hda:     stream format params 6 
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 68); // 0x006f0012
//      snd_hda:     amp capabilities 6 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 69); // 0x006f000d
//      snd_hda:     amp capabilities 6 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x06, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 70); // 0x006f0009
//      snd_hda:     6 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 72); // 0x007f0005
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 73); // 0x007f0009
//      snd_hda:     7 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 74); // 0x007f000f
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 75); // 0x007f000a
//      snd_hda:     pcm params           7 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 76); // 0x007f000b
//      snd_hda:     stream format params 7 
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 77); // 0x007f0012
//      snd_hda:     amp capabilities 7 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 78); // 0x007f000d
//      snd_hda:     amp capabilities 7 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x07, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 79); // 0x007f0009
//      snd_hda:     7 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 81); // 0x008f0005
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 82); // 0x008f0009
//      snd_hda:     8 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 83); // 0x008f000f
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 84); // 0x008f000a
//      snd_hda:     pcm params           8 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 85); // 0x008f000b
//      snd_hda:     stream format params 8 
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 86); // 0x008f0012
//      snd_hda:     amp capabilities 8 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 87); // 0x008f000d
//      snd_hda:     amp capabilities 8 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x08, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 88); // 0x008f0009
//      snd_hda:     8 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 90); // 0x009f0005
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 91); // 0x009f0009
//      snd_hda:     9 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 92); // 0x009f000f
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 93); // 0x009f000a
//      snd_hda:     pcm params           9 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 94); // 0x009f000b
//      snd_hda:     stream format params 9 
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 95); // 0x009f0012
//      snd_hda:     amp capabilities 9 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 96); // 0x009f000d
//      snd_hda:     amp capabilities 9 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x09, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 97); // 0x009f0009
//      snd_hda:     9 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 99); // 0x00af0005
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 100); // 0x00af0009
//      snd_hda:     10 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 101); // 0x00af000f
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 102); // 0x00af000a
//      snd_hda:     pcm params           10 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 103); // 0x00af000b
//      snd_hda:     stream format params 10 
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 104); // 0x00af0012
//      snd_hda:     amp capabilities 10 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 105); // 0x00af000d
//      snd_hda:     amp capabilities 10 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 106); // 0x00af0009
//      snd_hda:     10 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 108); // 0x00bf0005
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 109); // 0x00bf0009
//      snd_hda:     11 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 110); // 0x00bf000f
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 111); // 0x00bf000a
//      snd_hda:     pcm params           11 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 112); // 0x00bf000b
//      snd_hda:     stream format params 11 
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 113); // 0x00bf0012
//      snd_hda:     amp capabilities 11 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 114); // 0x00bf000d
//      snd_hda:     amp capabilities 11 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 115); // 0x00bf0009
//      snd_hda:     11 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 117); // 0x00cf0005
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 118); // 0x00cf0009
//      snd_hda:     12 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 119); // 0x00cf000f
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 120); // 0x00cf000a
//      snd_hda:     pcm params           12 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 121); // 0x00cf000b
//      snd_hda:     stream format params 12 
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 122); // 0x00cf0012
//      snd_hda:     amp capabilities 12 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 123); // 0x00cf000d
//      snd_hda:     amp capabilities 12 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 124); // 0x00cf0009
//      snd_hda:     12 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 126); // 0x00df0005
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 127); // 0x00df0009
//      snd_hda:     13 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 128); // 0x00df000f
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 129); // 0x00df000a
//      snd_hda:     pcm params           13 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 130); // 0x00df000b
//      snd_hda:     stream format params 13 
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 131); // 0x00df0012
//      snd_hda:     amp capabilities 13 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 132); // 0x00df000d
//      snd_hda:     amp capabilities 13 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 133); // 0x00df0009
//      snd_hda:     13 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 135); // 0x00ef0005
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 136); // 0x00ef0009
//      snd_hda:     14 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 137); // 0x00ef000f
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 138); // 0x00ef000a
//      snd_hda:     pcm params           14 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 139); // 0x00ef000b
//      snd_hda:     stream format params 14 
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 140); // 0x00ef0012
//      snd_hda:     amp capabilities 14 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 141); // 0x00ef000d
//      snd_hda:     amp capabilities 14 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 142); // 0x00ef0009
//      snd_hda:     14 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 144); // 0x00ff0005
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 145); // 0x00ff0009
//      snd_hda:     15 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 146); // 0x00ff000f
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 147); // 0x00ff000a
//      snd_hda:     pcm params           15 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 148); // 0x00ff000b
//      snd_hda:     stream format params 15 
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 149); // 0x00ff0012
//      snd_hda:     amp capabilities 15 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 150); // 0x00ff000d
//      snd_hda:     amp capabilities 15 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x0f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 151); // 0x00ff0009
//      snd_hda:     15 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 153); // 0x010f0005
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 154); // 0x010f0009
//      snd_hda:     16 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 155); // 0x010f000f
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 156); // 0x010f000a
//      snd_hda:     pcm params           16 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 157); // 0x010f000b
//      snd_hda:     stream format params 16 
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 158); // 0x010f0012
//      snd_hda:     amp capabilities 16 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 159); // 0x010f000d
//      snd_hda:     amp capabilities 16 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x10, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 160); // 0x010f0009
//      snd_hda:     16 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 162); // 0x011f0005
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 163); // 0x011f0009
//      snd_hda:     17 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 164); // 0x011f000f
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 165); // 0x011f000a
//      snd_hda:     pcm params           17 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 166); // 0x011f000b
//      snd_hda:     stream format params 17 
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 167); // 0x011f0012
//      snd_hda:     amp capabilities 17 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 168); // 0x011f000d
//      snd_hda:     amp capabilities 17 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x11, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00060001, 169); // 0x011f0009
//      snd_hda:     17 AC_WID_AUD_OUT ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 6 0
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 171); // 0x012f0005
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 172); // 0x012f0009
//      snd_hda:     18 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 173); // 0x012f000f
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 174); // 0x012f000a
//      snd_hda:     pcm params           18 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 175); // 0x012f000b
//      snd_hda:     stream format params 18 
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 176); // 0x012f0012
//      snd_hda:     amp capabilities 18 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 177); // 0x012f000d
//      snd_hda:     amp capabilities 18 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 178); // 0x012f0009
//      snd_hda:     18 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 179); // 0x012f000e
        retval = snd_hda_codec_read_check(codec, 0x12, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000034, 180); // 0x012f0200
//      snd_hda:     connection list 18 <- 52
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 182); // 0x013f0005
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 183); // 0x013f0009
//      snd_hda:     19 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 184); // 0x013f000f
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 185); // 0x013f000a
//      snd_hda:     pcm params           19 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 186); // 0x013f000b
//      snd_hda:     stream format params 19 
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 187); // 0x013f0012
//      snd_hda:     amp capabilities 19 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 188); // 0x013f000d
//      snd_hda:     amp capabilities 19 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 189); // 0x013f0009
//      snd_hda:     19 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 190); // 0x013f000e
        retval = snd_hda_codec_read_check(codec, 0x13, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000035, 191); // 0x013f0200
//      snd_hda:     connection list 19 <- 53
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 193); // 0x014f0005
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 194); // 0x014f0009
//      snd_hda:     20 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 195); // 0x014f000f
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 196); // 0x014f000a
//      snd_hda:     pcm params           20 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 197); // 0x014f000b
//      snd_hda:     stream format params 20 
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 198); // 0x014f0012
//      snd_hda:     amp capabilities 20 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 199); // 0x014f000d
//      snd_hda:     amp capabilities 20 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 200); // 0x014f0009
//      snd_hda:     20 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 201); // 0x014f000e
        retval = snd_hda_codec_read_check(codec, 0x14, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000036, 202); // 0x014f0200
//      snd_hda:     connection list 20 <- 54
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 204); // 0x015f0005
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 205); // 0x015f0009
//      snd_hda:     21 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 206); // 0x015f000f
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 207); // 0x015f000a
//      snd_hda:     pcm params           21 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 208); // 0x015f000b
//      snd_hda:     stream format params 21 
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 209); // 0x015f0012
//      snd_hda:     amp capabilities 21 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 210); // 0x015f000d
//      snd_hda:     amp capabilities 21 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 211); // 0x015f0009
//      snd_hda:     21 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 212); // 0x015f000e
        retval = snd_hda_codec_read_check(codec, 0x15, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000037, 213); // 0x015f0200
//      snd_hda:     connection list 21 <- 55
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 215); // 0x016f0005
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 216); // 0x016f0009
//      snd_hda:     22 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 217); // 0x016f000f
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 218); // 0x016f000a
//      snd_hda:     pcm params           22 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 219); // 0x016f000b
//      snd_hda:     stream format params 22 
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 220); // 0x016f0012
//      snd_hda:     amp capabilities 22 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 221); // 0x016f000d
//      snd_hda:     amp capabilities 22 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 222); // 0x016f0009
//      snd_hda:     22 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 223); // 0x016f000e
        retval = snd_hda_codec_read_check(codec, 0x16, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000038, 224); // 0x016f0200
//      snd_hda:     connection list 22 <- 56
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 226); // 0x017f0005
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 227); // 0x017f0009
//      snd_hda:     23 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 228); // 0x017f000f
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 229); // 0x017f000a
//      snd_hda:     pcm params           23 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 230); // 0x017f000b
//      snd_hda:     stream format params 23 
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 231); // 0x017f0012
//      snd_hda:     amp capabilities 23 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 232); // 0x017f000d
//      snd_hda:     amp capabilities 23 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 233); // 0x017f0009
//      snd_hda:     23 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 234); // 0x017f000e
        retval = snd_hda_codec_read_check(codec, 0x17, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000039, 235); // 0x017f0200
//      snd_hda:     connection list 23 <- 57
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 237); // 0x018f0005
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 238); // 0x018f0009
//      snd_hda:     24 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 239); // 0x018f000f
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 240); // 0x018f000a
//      snd_hda:     pcm params           24 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 241); // 0x018f000b
//      snd_hda:     stream format params 24 
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 242); // 0x018f0012
//      snd_hda:     amp capabilities 24 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 243); // 0x018f000d
//      snd_hda:     amp capabilities 24 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 244); // 0x018f0009
//      snd_hda:     24 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 245); // 0x018f000e
        retval = snd_hda_codec_read_check(codec, 0x18, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000003a, 246); // 0x018f0200
//      snd_hda:     connection list 24 <- 58
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 248); // 0x019f0005
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 249); // 0x019f0009
//      snd_hda:     25 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 250); // 0x019f000f
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 251); // 0x019f000a
//      snd_hda:     pcm params           25 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 252); // 0x019f000b
//      snd_hda:     stream format params 25 
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 253); // 0x019f0012
//      snd_hda:     amp capabilities 25 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 254); // 0x019f000d
//      snd_hda:     amp capabilities 25 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 255); // 0x019f0009
//      snd_hda:     25 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 256); // 0x019f000e
        retval = snd_hda_codec_read_check(codec, 0x19, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000003b, 257); // 0x019f0200
//      snd_hda:     connection list 25 <- 59
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 259); // 0x01af0005
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 260); // 0x01af0009
//      snd_hda:     26 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 261); // 0x01af000f
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 262); // 0x01af000a
//      snd_hda:     pcm params           26 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 263); // 0x01af000b
//      snd_hda:     stream format params 26 
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 264); // 0x01af0012
//      snd_hda:     amp capabilities 26 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 265); // 0x01af000d
//      snd_hda:     amp capabilities 26 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 266); // 0x01af0009
//      snd_hda:     26 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 267); // 0x01af000e
        retval = snd_hda_codec_read_check(codec, 0x1a, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000003c, 268); // 0x01af0200
//      snd_hda:     connection list 26 <- 60
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 270); // 0x01bf0005
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 271); // 0x01bf0009
//      snd_hda:     27 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 272); // 0x01bf000f
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 273); // 0x01bf000a
//      snd_hda:     pcm params           27 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 274); // 0x01bf000b
//      snd_hda:     stream format params 27 
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 275); // 0x01bf0012
//      snd_hda:     amp capabilities 27 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 276); // 0x01bf000d
//      snd_hda:     amp capabilities 27 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 277); // 0x01bf0009
//      snd_hda:     27 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 278); // 0x01bf000e
        retval = snd_hda_codec_read_check(codec, 0x1b, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000003d, 279); // 0x01bf0200
//      snd_hda:     connection list 27 <- 61
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 281); // 0x01cf0005
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 282); // 0x01cf0009
//      snd_hda:     28 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 283); // 0x01cf000f
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 284); // 0x01cf000a
//      snd_hda:     pcm params           28 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 285); // 0x01cf000b
//      snd_hda:     stream format params 28 
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 286); // 0x01cf0012
//      snd_hda:     amp capabilities 28 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 287); // 0x01cf000d
//      snd_hda:     amp capabilities 28 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 288); // 0x01cf0009
//      snd_hda:     28 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 289); // 0x01cf000e
        retval = snd_hda_codec_read_check(codec, 0x1c, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000003e, 290); // 0x01cf0200
//      snd_hda:     connection list 28 <- 62
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 292); // 0x01df0005
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 293); // 0x01df0009
//      snd_hda:     29 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 294); // 0x01df000f
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 295); // 0x01df000a
//      snd_hda:     pcm params           29 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 296); // 0x01df000b
//      snd_hda:     stream format params 29 
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 297); // 0x01df0012
//      snd_hda:     amp capabilities 29 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 298); // 0x01df000d
//      snd_hda:     amp capabilities 29 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 299); // 0x01df0009
//      snd_hda:     29 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 300); // 0x01df000e
        retval = snd_hda_codec_read_check(codec, 0x1d, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000003f, 301); // 0x01df0200
//      snd_hda:     connection list 29 <- 63
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 303); // 0x01ef0005
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 304); // 0x01ef0009
//      snd_hda:     30 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 305); // 0x01ef000f
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 306); // 0x01ef000a
//      snd_hda:     pcm params           30 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 307); // 0x01ef000b
//      snd_hda:     stream format params 30 
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 308); // 0x01ef0012
//      snd_hda:     amp capabilities 30 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 309); // 0x01ef000d
//      snd_hda:     amp capabilities 30 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 310); // 0x01ef0009
//      snd_hda:     30 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 311); // 0x01ef000e
        retval = snd_hda_codec_read_check(codec, 0x1e, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000040, 312); // 0x01ef0200
//      snd_hda:     connection list 30 <- 64
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 314); // 0x01ff0005
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 315); // 0x01ff0009
//      snd_hda:     31 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 316); // 0x01ff000f
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 317); // 0x01ff000a
//      snd_hda:     pcm params           31 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 318); // 0x01ff000b
//      snd_hda:     stream format params 31 
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 319); // 0x01ff0012
//      snd_hda:     amp capabilities 31 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 320); // 0x01ff000d
//      snd_hda:     amp capabilities 31 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 321); // 0x01ff0009
//      snd_hda:     31 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 322); // 0x01ff000e
        retval = snd_hda_codec_read_check(codec, 0x1f, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000041, 323); // 0x01ff0200
//      snd_hda:     connection list 31 <- 65
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 325); // 0x020f0005
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 326); // 0x020f0009
//      snd_hda:     32 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 327); // 0x020f000f
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 328); // 0x020f000a
//      snd_hda:     pcm params           32 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 329); // 0x020f000b
//      snd_hda:     stream format params 32 
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 330); // 0x020f0012
//      snd_hda:     amp capabilities 32 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 331); // 0x020f000d
//      snd_hda:     amp capabilities 32 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 332); // 0x020f0009
//      snd_hda:     32 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 333); // 0x020f000e
        retval = snd_hda_codec_read_check(codec, 0x20, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000042, 334); // 0x020f0200
//      snd_hda:     connection list 32 <- 66
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 336); // 0x021f0005
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 337); // 0x021f0009
//      snd_hda:     33 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 338); // 0x021f000f
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 339); // 0x021f000a
//      snd_hda:     pcm params           33 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 340); // 0x021f000b
//      snd_hda:     stream format params 33 
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 341); // 0x021f0012
//      snd_hda:     amp capabilities 33 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 342); // 0x021f000d
//      snd_hda:     amp capabilities 33 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00160101, 343); // 0x021f0009
//      snd_hda:     33 AC_WID_AUD_IN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 6 1
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 344); // 0x021f000e
        retval = snd_hda_codec_read_check(codec, 0x21, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000043, 345); // 0x021f0200
//      snd_hda:     connection list 33 <- 67
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 347); // 0x022f0005
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0018051b, 348); // 0x022f0009
//      snd_hda:     34 AC_WID_AUD_IN ['AC_WCAP_STEREO', 'AC_WCAP_CONN_LIST', 'AC_WCAP_POWER', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_FORMAT_OVRD', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 8 1
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x80000009, 349); // 0x022f000f
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x001e01f5, 350); // 0x022f000a
//      snd_hda:     pcm params           34 bits: 16bit 20bit 24bit 32bit rates: 8kHz 16kHz 32kHz 44.1kHz 48kHz 88.2kHz 96kHz
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000001, 351); // 0x022f000b
//      snd_hda:     stream format params 34 pcm
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 352); // 0x022f0012
//      snd_hda:     amp capabilities 34 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x80033f33, 353); // 0x022f000d
//      snd_hda:     amp capabilities 34 input  0x80033f33 offset 0x33 numsteps 0x3f stepsize 0x03 mute 1
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0018051b, 354); // 0x022f0009
//      snd_hda:     34 AC_WID_AUD_IN ['AC_WCAP_STEREO', 'AC_WCAP_CONN_LIST', 'AC_WCAP_POWER', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_FORMAT_OVRD', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 8 1

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02270500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x001e01f5, 356); // 0x022f000a
//      snd_hda:     pcm params           34 bits: 16bit 20bit 24bit 32bit rates: 8kHz 16kHz 32kHz 44.1kHz 48kHz 88.2kHz 96kHz
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000001, 357); // 0x022f000b
//      snd_hda:     stream format params 34 pcm
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x80033f33, 358); // 0x022f000d
//      snd_hda:     amp capabilities 34 input  0x80033f33 offset 0x33 numsteps 0x3f stepsize 0x03 mute 1
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 359); // 0x022f000e
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000044, 360); // 0x022f0200
//      snd_hda:     connection list 34 <- 68
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x80000009, 361); // 0x022f000f

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02270503
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 364); // 0x023f0005
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0018051b, 365); // 0x023f0009
//      snd_hda:     35 AC_WID_AUD_IN ['AC_WCAP_STEREO', 'AC_WCAP_CONN_LIST', 'AC_WCAP_POWER', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_FORMAT_OVRD', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 8 1
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x80000009, 366); // 0x023f000f
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x001e01f5, 367); // 0x023f000a
//      snd_hda:     pcm params           35 bits: 16bit 20bit 24bit 32bit rates: 8kHz 16kHz 32kHz 44.1kHz 48kHz 88.2kHz 96kHz
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000001, 368); // 0x023f000b
//      snd_hda:     stream format params 35 pcm
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 369); // 0x023f0012
//      snd_hda:     amp capabilities 35 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x80033f33, 370); // 0x023f000d
//      snd_hda:     amp capabilities 35 input  0x80033f33 offset 0x33 numsteps 0x3f stepsize 0x03 mute 1
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0018051b, 371); // 0x023f0009
//      snd_hda:     35 AC_WID_AUD_IN ['AC_WCAP_STEREO', 'AC_WCAP_CONN_LIST', 'AC_WCAP_POWER', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_FORMAT_OVRD', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 8 1

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x001e01f5, 373); // 0x023f000a
//      snd_hda:     pcm params           35 bits: 16bit 20bit 24bit 32bit rates: 8kHz 16kHz 32kHz 44.1kHz 48kHz 88.2kHz 96kHz
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000001, 374); // 0x023f000b
//      snd_hda:     stream format params 35 pcm
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x80033f33, 375); // 0x023f000d
//      snd_hda:     amp capabilities 35 input  0x80033f33 offset 0x33 numsteps 0x3f stepsize 0x03 mute 1
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 376); // 0x023f000e
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000045, 377); // 0x023f0200
//      snd_hda:     connection list 35 <- 69
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x80000009, 378); // 0x023f000f

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 381); // 0x024f0005
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 382); // 0x024f0009
//      snd_hda:     36 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 383); // 0x024f000f
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 384); // 0x024f0012
//      snd_hda:     amp capabilities 36 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 385); // 0x024f000d
//      snd_hda:     amp capabilities 36 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 386); // 0x024f0009
//      snd_hda:     36 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x90100110, 387); // 0x024f1c00
//      snd_hda:     pin config default 0x90100110 port conn 2 location 0x10 loc ext 1 loc geom 0 default device 1 conn type 0 color 0 misc 1 def assoc 1 seq 0
//      snd_hda:     pin config default 0x90100110 port conn Fixed loc ext Int loc geom N/A default device Speaker conn type Unknown color Unknown misc Jack Detect Override def assoc 1 seq 0
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 388); // 0x024f000c
//      snd_hda:     36 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 389); // 0x024f000e
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000002, 390); // 0x024f0200
//      snd_hda:     connection list 36 <- 2
        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 391); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02470700
//      snd_hda:     36 []

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 394); // 0x025f0005
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 395); // 0x025f0009
//      snd_hda:     37 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 396); // 0x025f000f
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 397); // 0x025f0012
//      snd_hda:     amp capabilities 37 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 398); // 0x025f000d
//      snd_hda:     amp capabilities 37 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 399); // 0x025f0009
//      snd_hda:     37 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x90100111, 400); // 0x025f1c00
//      snd_hda:     pin config default 0x90100111 port conn 2 location 0x10 loc ext 1 loc geom 0 default device 1 conn type 0 color 0 misc 1 def assoc 1 seq 1
//      snd_hda:     pin config default 0x90100111 port conn Fixed loc ext Int loc geom N/A default device Speaker conn type Unknown color Unknown misc Jack Detect Override def assoc 1 seq 1
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 401); // 0x025f000c
//      snd_hda:     37 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 402); // 0x025f000e
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000003, 403); // 0x025f0200
//      snd_hda:     connection list 37 <- 3
        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 404); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02570700
//      snd_hda:     37 []

        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 407); // 0x026f0005
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 408); // 0x026f0009
//      snd_hda:     38 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 409); // 0x026f000f
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 410); // 0x026f0012
//      snd_hda:     amp capabilities 38 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 411); // 0x026f000d
//      snd_hda:     amp capabilities 38 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 412); // 0x026f0009
//      snd_hda:     38 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 413); // 0x026f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 414); // 0x026f000c
//      snd_hda:     38 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 415); // 0x026f000e
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000004, 416); // 0x026f0200
//      snd_hda:     connection list 38 <- 4
        retval = snd_hda_codec_read_check(codec, 0x26, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 417); // 0x026f0700
        snd_hda_codec_write(codec, 0x26, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02670700
//      snd_hda:     38 []

        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 420); // 0x027f0005
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 421); // 0x027f0009
//      snd_hda:     39 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 422); // 0x027f000f
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 423); // 0x027f0012
//      snd_hda:     amp capabilities 39 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 424); // 0x027f000d
//      snd_hda:     amp capabilities 39 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 425); // 0x027f0009
//      snd_hda:     39 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 426); // 0x027f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 427); // 0x027f000c
//      snd_hda:     39 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 428); // 0x027f000e
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000005, 429); // 0x027f0200
//      snd_hda:     connection list 39 <- 5
        retval = snd_hda_codec_read_check(codec, 0x27, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 430); // 0x027f0700
        snd_hda_codec_write(codec, 0x27, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02770700
//      snd_hda:     39 []

        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 433); // 0x028f0005
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 434); // 0x028f0009
//      snd_hda:     40 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 435); // 0x028f000f
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 436); // 0x028f0012
//      snd_hda:     amp capabilities 40 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 437); // 0x028f000d
//      snd_hda:     amp capabilities 40 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 438); // 0x028f0009
//      snd_hda:     40 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 439); // 0x028f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 440); // 0x028f000c
//      snd_hda:     40 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 441); // 0x028f000e
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000006, 442); // 0x028f0200
//      snd_hda:     connection list 40 <- 6
        retval = snd_hda_codec_read_check(codec, 0x28, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 443); // 0x028f0700
        snd_hda_codec_write(codec, 0x28, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02870700
//      snd_hda:     40 []

        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 446); // 0x029f0005
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 447); // 0x029f0009
//      snd_hda:     41 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 448); // 0x029f000f
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 449); // 0x029f0012
//      snd_hda:     amp capabilities 41 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 450); // 0x029f000d
//      snd_hda:     amp capabilities 41 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 451); // 0x029f0009
//      snd_hda:     41 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 452); // 0x029f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 453); // 0x029f000c
//      snd_hda:     41 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 454); // 0x029f000e
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000007, 455); // 0x029f0200
//      snd_hda:     connection list 41 <- 7
        retval = snd_hda_codec_read_check(codec, 0x29, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 456); // 0x029f0700
        snd_hda_codec_write(codec, 0x29, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02970700
//      snd_hda:     41 []

        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 459); // 0x02af0005
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 460); // 0x02af0009
//      snd_hda:     42 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 461); // 0x02af000f
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 462); // 0x02af0012
//      snd_hda:     amp capabilities 42 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 463); // 0x02af000d
//      snd_hda:     amp capabilities 42 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 464); // 0x02af0009
//      snd_hda:     42 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 465); // 0x02af1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 466); // 0x02af000c
//      snd_hda:     42 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 467); // 0x02af000e
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000008, 468); // 0x02af0200
//      snd_hda:     connection list 42 <- 8
        retval = snd_hda_codec_read_check(codec, 0x2a, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 469); // 0x02af0700
        snd_hda_codec_write(codec, 0x2a, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02a70700
//      snd_hda:     42 []

        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 472); // 0x02bf0005
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 473); // 0x02bf0009
//      snd_hda:     43 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 474); // 0x02bf000f
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 475); // 0x02bf0012
//      snd_hda:     amp capabilities 43 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 476); // 0x02bf000d
//      snd_hda:     amp capabilities 43 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 477); // 0x02bf0009
//      snd_hda:     43 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 478); // 0x02bf1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 479); // 0x02bf000c
//      snd_hda:     43 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 480); // 0x02bf000e
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000009, 481); // 0x02bf0200
//      snd_hda:     connection list 43 <- 9
        retval = snd_hda_codec_read_check(codec, 0x2b, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 482); // 0x02bf0700
        snd_hda_codec_write(codec, 0x2b, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02b70700
//      snd_hda:     43 []
 
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 485); // 0x02cf0005
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 486); // 0x02cf0009
//      snd_hda:     44 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 487); // 0x02cf000f
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 488); // 0x02cf0012
//      snd_hda:     amp capabilities 44 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 489); // 0x02cf000d
//      snd_hda:     amp capabilities 44 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 490); // 0x02cf0009
//      snd_hda:     44 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x002b4020, 491); // 0x02cf1c00
//      snd_hda:     pin config default 0x002b4020 port conn 0 location 0x0 loc ext 0 loc geom 0 default device 2 conn type 11 color 4 misc 0 def assoc 2 seq 0
//      snd_hda:     pin config default 0x002b4020 port conn Jack loc ext Ext loc geom N/A default device HP Out conn type Combination color Green misc undef def assoc 2 seq 0
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 492); // 0x02cf000c
//      snd_hda:     44 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 493); // 0x02cf000e
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000000a, 494); // 0x02cf0200
//      snd_hda:     connection list 44 <- 10
        retval = snd_hda_codec_read_check(codec, 0x2c, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 495); // 0x02cf0700
        snd_hda_codec_write(codec, 0x2c, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02c70700
//      snd_hda:     44 []

        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 498); // 0x02df0005
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 499); // 0x02df0009
//      snd_hda:     45 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 500); // 0x02df000f
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 501); // 0x02df0012
//      snd_hda:     amp capabilities 45 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 502); // 0x02df000d
//      snd_hda:     amp capabilities 45 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 503); // 0x02df0009
//      snd_hda:     45 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 504); // 0x02df1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 505); // 0x02df000c
//      snd_hda:     45 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 506); // 0x02df000e
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000000b, 507); // 0x02df0200
//      snd_hda:     connection list 45 <- 11
        retval = snd_hda_codec_read_check(codec, 0x2d, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 508); // 0x02df0700
        snd_hda_codec_write(codec, 0x2d, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02d70700
//      snd_hda:     45 []

        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 511); // 0x02ef0005
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 512); // 0x02ef0009
//      snd_hda:     46 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 513); // 0x02ef000f
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 514); // 0x02ef0012
//      snd_hda:     amp capabilities 46 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 515); // 0x02ef000d
//      snd_hda:     amp capabilities 46 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 516); // 0x02ef0009
//      snd_hda:     46 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 517); // 0x02ef1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 518); // 0x02ef000c
//      snd_hda:     46 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 519); // 0x02ef000e
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000000c, 520); // 0x02ef0200
//      snd_hda:     connection list 46 <- 12
        retval = snd_hda_codec_read_check(codec, 0x2e, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 521); // 0x02ef0700
        snd_hda_codec_write(codec, 0x2e, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02e70700
//      snd_hda:     46 []

        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 524); // 0x02ff0005
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 525); // 0x02ff0009
//      snd_hda:     47 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 526); // 0x02ff000f
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 527); // 0x02ff0012
//      snd_hda:     amp capabilities 47 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 528); // 0x02ff000d
//      snd_hda:     amp capabilities 47 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 529); // 0x02ff0009
//      snd_hda:     47 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 530); // 0x02ff1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 531); // 0x02ff000c
//      snd_hda:     47 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 532); // 0x02ff000e
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000000d, 533); // 0x02ff0200
//      snd_hda:     connection list 47 <- 13
        retval = snd_hda_codec_read_check(codec, 0x2f, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 534); // 0x02ff0700
        snd_hda_codec_write(codec, 0x2f, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02f70700
//      snd_hda:     47 []

        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 537); // 0x030f0005
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 538); // 0x030f0009
//      snd_hda:     48 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 539); // 0x030f000f
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 540); // 0x030f0012
//      snd_hda:     amp capabilities 48 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 541); // 0x030f000d
//      snd_hda:     amp capabilities 48 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 542); // 0x030f0009
//      snd_hda:     48 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 543); // 0x030f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 544); // 0x030f000c
//      snd_hda:     48 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 545); // 0x030f000e
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000000e, 546); // 0x030f0200
//      snd_hda:     connection list 48 <- 14
        retval = snd_hda_codec_read_check(codec, 0x30, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 547); // 0x030f0700
        snd_hda_codec_write(codec, 0x30, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03070700
//      snd_hda:     48 []

        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 550); // 0x031f0005
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 551); // 0x031f0009
//      snd_hda:     49 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 552); // 0x031f000f
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 553); // 0x031f0012
//      snd_hda:     amp capabilities 49 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 554); // 0x031f000d
//      snd_hda:     amp capabilities 49 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 555); // 0x031f0009
//      snd_hda:     49 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 556); // 0x031f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 557); // 0x031f000c
//      snd_hda:     49 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 558); // 0x031f000e
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x0000000f, 559); // 0x031f0200
//      snd_hda:     connection list 49 <- 15
        retval = snd_hda_codec_read_check(codec, 0x31, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 560); // 0x031f0700
        snd_hda_codec_write(codec, 0x31, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03170700
//      snd_hda:     49 []

        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 563); // 0x032f0005
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 564); // 0x032f0009
//      snd_hda:     50 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 565); // 0x032f000f
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 566); // 0x032f0012
//      snd_hda:     amp capabilities 50 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 567); // 0x032f000d
//      snd_hda:     amp capabilities 50 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 568); // 0x032f0009
//      snd_hda:     50 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 569); // 0x032f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 570); // 0x032f000c
//      snd_hda:     50 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 571); // 0x032f000e
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000010, 572); // 0x032f0200
//      snd_hda:     connection list 50 <- 16
        retval = snd_hda_codec_read_check(codec, 0x32, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 573); // 0x032f0700
        snd_hda_codec_write(codec, 0x32, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03270700
//      snd_hda:     50 []

        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 576); // 0x033f0005
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 577); // 0x033f0009
//      snd_hda:     51 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 578); // 0x033f000f
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 579); // 0x033f0012
//      snd_hda:     amp capabilities 51 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 580); // 0x033f000d
//      snd_hda:     amp capabilities 51 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400101, 581); // 0x033f0009
//      snd_hda:     51 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_CONN_LIST'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 582); // 0x033f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000010, 583); // 0x033f000c
//      snd_hda:     51 ['AC_PINCAP_OUT'] []
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_PARAMETERS, 0x0000000e, 0x00000001, 584); // 0x033f000e
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_GET_CONNECT_LIST, 0x00000000, 0x00000011, 585); // 0x033f0200
//      snd_hda:     connection list 51 <- 17
        retval = snd_hda_codec_read_check(codec, 0x33, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 586); // 0x033f0700
        snd_hda_codec_write(codec, 0x33, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03370700
//      snd_hda:     51 []

        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 589); // 0x034f0005
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 590); // 0x034f0009
//      snd_hda:     52 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 591); // 0x034f000f
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 592); // 0x034f0012
//      snd_hda:     amp capabilities 52 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 593); // 0x034f000d
//      snd_hda:     amp capabilities 52 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 594); // 0x034f0009
//      snd_hda:     52 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 595); // 0x034f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 596); // 0x034f000c
//      snd_hda:     52 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x34, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 597); // 0x034f0700
        snd_hda_codec_write(codec, 0x34, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03470700
//      snd_hda:     52 []

        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 600); // 0x035f0005
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 601); // 0x035f0009
//      snd_hda:     53 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 602); // 0x035f000f
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 603); // 0x035f0012
//      snd_hda:     amp capabilities 53 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 604); // 0x035f000d
//      snd_hda:     amp capabilities 53 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 605); // 0x035f0009
//      snd_hda:     53 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 606); // 0x035f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 607); // 0x035f000c
//      snd_hda:     53 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x35, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 608); // 0x035f0700
        snd_hda_codec_write(codec, 0x35, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03570700
//      snd_hda:     53 []

        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 611); // 0x036f0005
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 612); // 0x036f0009
//      snd_hda:     54 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 613); // 0x036f000f
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 614); // 0x036f0012
//      snd_hda:     amp capabilities 54 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 615); // 0x036f000d
//      snd_hda:     amp capabilities 54 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 616); // 0x036f0009
//      snd_hda:     54 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 617); // 0x036f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 618); // 0x036f000c
//      snd_hda:     54 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x36, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 619); // 0x036f0700
        snd_hda_codec_write(codec, 0x36, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03670700
//      snd_hda:     54 []

        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 622); // 0x037f0005
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 623); // 0x037f0009
//      snd_hda:     55 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 624); // 0x037f000f
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 625); // 0x037f0012
//      snd_hda:     amp capabilities 55 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 626); // 0x037f000d
//      snd_hda:     amp capabilities 55 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 627); // 0x037f0009
//      snd_hda:     55 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 628); // 0x037f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 629); // 0x037f000c
//      snd_hda:     55 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x37, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 630); // 0x037f0700
        snd_hda_codec_write(codec, 0x37, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03770700
//      snd_hda:     55 []

        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 633); // 0x038f0005
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 634); // 0x038f0009
//      snd_hda:     56 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 635); // 0x038f000f
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 636); // 0x038f0012
//      snd_hda:     amp capabilities 56 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 637); // 0x038f000d
//      snd_hda:     amp capabilities 56 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 638); // 0x038f0009
//      snd_hda:     56 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 639); // 0x038f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 640); // 0x038f000c
//      snd_hda:     56 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x38, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 641); // 0x038f0700
        snd_hda_codec_write(codec, 0x38, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03870700
//      snd_hda:     56 []

        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 644); // 0x039f0005
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 645); // 0x039f0009
//      snd_hda:     57 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 646); // 0x039f000f
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 647); // 0x039f0012
//      snd_hda:     amp capabilities 57 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 648); // 0x039f000d
//      snd_hda:     amp capabilities 57 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 649); // 0x039f0009
//      snd_hda:     57 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 650); // 0x039f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 651); // 0x039f000c
//      snd_hda:     57 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x39, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 652); // 0x039f0700
        snd_hda_codec_write(codec, 0x39, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03970700
//      snd_hda:     57 []

        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 655); // 0x03af0005
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 656); // 0x03af0009
//      snd_hda:     58 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 657); // 0x03af000f
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 658); // 0x03af0012
//      snd_hda:     amp capabilities 58 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 659); // 0x03af000d
//      snd_hda:     amp capabilities 58 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 660); // 0x03af0009
//      snd_hda:     58 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 661); // 0x03af1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 662); // 0x03af000c
//      snd_hda:     58 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x3a, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 663); // 0x03af0700
        snd_hda_codec_write(codec, 0x3a, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03a70700
//      snd_hda:     58 []

        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 666); // 0x03bf0005
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 667); // 0x03bf0009
//      snd_hda:     59 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 668); // 0x03bf000f
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 669); // 0x03bf0012
//      snd_hda:     amp capabilities 59 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 670); // 0x03bf000d
//      snd_hda:     amp capabilities 59 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 671); // 0x03bf0009
//      snd_hda:     59 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 672); // 0x03bf1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 673); // 0x03bf000c
//      snd_hda:     59 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x3b, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 674); // 0x03bf0700
        snd_hda_codec_write(codec, 0x3b, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03b70700
//      snd_hda:     59 []

        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 677); // 0x03cf0005
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 678); // 0x03cf0009
//      snd_hda:     60 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 679); // 0x03cf000f
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 680); // 0x03cf0012
//      snd_hda:     amp capabilities 60 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 681); // 0x03cf000d
//      snd_hda:     amp capabilities 60 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 682); // 0x03cf0009
//      snd_hda:     60 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x00ab9030, 683); // 0x03cf1c00
//      snd_hda:     pin config default 0x00ab9030 port conn 0 location 0x0 loc ext 0 loc geom 0 default device 10 conn type 11 color 9 misc 0 def assoc 3 seq 0
//      snd_hda:     pin config default 0x00ab9030 port conn Jack loc ext Ext loc geom N/A default device Mic In conn type Combination color Pink misc undef def assoc 3 seq 0
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 684); // 0x03cf000c
//      snd_hda:     60 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x3c, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 685); // 0x03cf0700
        snd_hda_codec_write(codec, 0x3c, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03c70700
//      snd_hda:     60 []

        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 688); // 0x03df0005
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 689); // 0x03df0009
//      snd_hda:     61 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 690); // 0x03df000f
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 691); // 0x03df0012
//      snd_hda:     amp capabilities 61 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 692); // 0x03df000d
//      snd_hda:     amp capabilities 61 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 693); // 0x03df0009
//      snd_hda:     61 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 694); // 0x03df1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 695); // 0x03df000c
//      snd_hda:     61 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x3d, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 696); // 0x03df0700
        snd_hda_codec_write(codec, 0x3d, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03d70700
//      snd_hda:     61 []

        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 699); // 0x03ef0005
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 700); // 0x03ef0009
//      snd_hda:     62 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 701); // 0x03ef000f
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 702); // 0x03ef0012
//      snd_hda:     amp capabilities 62 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 703); // 0x03ef000d
//      snd_hda:     amp capabilities 62 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 704); // 0x03ef0009
//      snd_hda:     62 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 705); // 0x03ef1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 706); // 0x03ef000c
//      snd_hda:     62 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x3e, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 707); // 0x03ef0700
        snd_hda_codec_write(codec, 0x3e, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03e70700
//      snd_hda:     62 []

        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 710); // 0x03ff0005
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 711); // 0x03ff0009
//      snd_hda:     63 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 712); // 0x03ff000f
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 713); // 0x03ff0012
//      snd_hda:     amp capabilities 63 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 714); // 0x03ff000d
//      snd_hda:     amp capabilities 63 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 715); // 0x03ff0009
//      snd_hda:     63 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 716); // 0x03ff1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 717); // 0x03ff000c
//      snd_hda:     63 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x3f, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 718); // 0x03ff0700
        snd_hda_codec_write(codec, 0x3f, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x03f70700
//      snd_hda:     63 []

        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 721); // 0x040f0005
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 722); // 0x040f0009
//      snd_hda:     64 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 723); // 0x040f000f
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 724); // 0x040f0012
//      snd_hda:     amp capabilities 64 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 725); // 0x040f000d
//      snd_hda:     amp capabilities 64 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 726); // 0x040f0009
//      snd_hda:     64 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 727); // 0x040f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 728); // 0x040f000c
//      snd_hda:     64 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x40, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 729); // 0x040f0700
        snd_hda_codec_write(codec, 0x40, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04070700
//      snd_hda:     64 []

        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 732); // 0x041f0005
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 733); // 0x041f0009
//      snd_hda:     65 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 734); // 0x041f000f
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 735); // 0x041f0012
//      snd_hda:     amp capabilities 65 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 736); // 0x041f000d
//      snd_hda:     amp capabilities 65 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 737); // 0x041f0009
//      snd_hda:     65 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 738); // 0x041f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 739); // 0x041f000c
//      snd_hda:     65 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x41, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 740); // 0x041f0700
        snd_hda_codec_write(codec, 0x41, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04170700
//      snd_hda:     65 []

        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 743); // 0x042f0005
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 744); // 0x042f0009
//      snd_hda:     66 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 745); // 0x042f000f
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 746); // 0x042f0012
//      snd_hda:     amp capabilities 66 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 747); // 0x042f000d
//      snd_hda:     amp capabilities 66 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 748); // 0x042f0009
//      snd_hda:     66 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 749); // 0x042f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 750); // 0x042f000c
//      snd_hda:     66 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x42, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 751); // 0x042f0700
        snd_hda_codec_write(codec, 0x42, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04270700
//      snd_hda:     66 []

        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 754); // 0x043f0005
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 755); // 0x043f0009
//      snd_hda:     67 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 756); // 0x043f000f
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 757); // 0x043f0012
//      snd_hda:     amp capabilities 67 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 758); // 0x043f000d
//      snd_hda:     amp capabilities 67 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00400001, 759); // 0x043f0009
//      snd_hda:     67 AC_WID_PIN ['AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_STEREO', 'AC_WCAP_TYPE'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 760); // 0x043f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 761); // 0x043f000c
//      snd_hda:     67 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x43, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 762); // 0x043f0700
        snd_hda_codec_write(codec, 0x43, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04370700
//      snd_hda:     67 []

        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 765); // 0x044f0005
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0040000b, 766); // 0x044f0009
//      snd_hda:     68 AC_WID_PIN ['AC_WCAP_STEREO', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 767); // 0x044f000f
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 768); // 0x044f0012
//      snd_hda:     amp capabilities 68 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00270200, 769); // 0x044f000d
//      snd_hda:     amp capabilities 68 input  0x00270200 offset 0x00 numsteps 0x02 stepsize 0x27 mute 0
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0040000b, 770); // 0x044f0009
//      snd_hda:     68 AC_WID_PIN ['AC_WCAP_STEREO', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0xa0a60100, 771); // 0x044f1c00
//      snd_hda:     pin config default 0xa0a60100 port conn 2 location 0x20 loc ext 2 loc geom 0 default device 10 conn type 6 color 0 misc 1 def assoc 0 seq 0
//      snd_hda:     pin config default 0xa0a60100 port conn Fixed loc ext Sep loc geom N/A default device Mic In conn type Other Digital color Unknown misc Jack Detect Override def assoc 0 seq 0
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 772); // 0x044f000c
//      snd_hda:     68 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00270200, 773); // 0x044f000d
//      snd_hda:     amp capabilities 68 input  0x00270200 offset 0x00 numsteps 0x02 stepsize 0x27 mute 0
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 774); // 0x044f0700
        snd_hda_codec_write(codec, 0x44, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04470700
//      snd_hda:     68 []

        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 777); // 0x045f0005
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0040000b, 778); // 0x045f0009
//      snd_hda:     69 AC_WID_PIN ['AC_WCAP_STEREO', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 779); // 0x045f000f
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 780); // 0x045f0012
//      snd_hda:     amp capabilities 69 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00270200, 781); // 0x045f000d
//      snd_hda:     amp capabilities 69 input  0x00270200 offset 0x00 numsteps 0x02 stepsize 0x27 mute 0
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x00000009, 0x0040000b, 782); // 0x045f0009
//      snd_hda:     69 AC_WID_PIN ['AC_WCAP_STEREO', 'AC_WCAP_AMP_OVRD', 'AC_WCAP_TYPE', 'AC_WCAP_DELAY', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_IN_AMP'] 0 0 4
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_CONFIG_DEFAULT, 0x00000000, 0x400000f0, 783); // 0x045f1c00
//      snd_hda:     pin config default 0x400000f0 port conn 1 location 0x0 loc ext 0 loc geom 0 default device 0 conn type 0 color 0 misc 0 def assoc 15 seq 0
//      snd_hda:     pin config default 0x400000f0 port conn NO CONN loc ext Ext loc geom N/A default device Line Out conn type Unknown color Unknown misc undef def assoc 15 seq 0
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x0000000c, 0x00000020, 784); // 0x045f000c
//      snd_hda:     69 ['AC_PINCAP_IN'] []
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00270200, 785); // 0x045f000d
//      snd_hda:     amp capabilities 69 input  0x00270200 offset 0x00 numsteps 0x02 stepsize 0x27 mute 0
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 786); // 0x045f0700
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04570700
//      snd_hda:     69 []

        retval = snd_hda_codec_read_check(codec, 0x46, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 789); // 0x046f0005
        retval = snd_hda_codec_read_check(codec, 0x46, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00700200, 790); // 0x046f0009
//      snd_hda:     70 AC_WID_BEEP ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_DIGITAL', 'AC_WCAP_TYPE'] 0 0 7
        retval = snd_hda_codec_read_check(codec, 0x46, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 791); // 0x046f000f
        retval = snd_hda_codec_read_check(codec, 0x46, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 792); // 0x046f0012
//      snd_hda:     amp capabilities 70 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x46, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 793); // 0x046f000d
//      snd_hda:     amp capabilities 70 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x46, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00700200, 794); // 0x046f0009
//      snd_hda:     70 AC_WID_BEEP ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_DIGITAL', 'AC_WCAP_TYPE'] 0 0 7

        snd_hda_codec_write(codec, 0x46, 0, AC_VERB_SET_BEEP_CONTROL, 0x00000000); // 0x04670a00

}

static void read_vendor_node(struct hda_codec *codec)
{
        int retval;

        // I think this is also part of the node init loop

        // this may involve calls to AppleHDAWidgetCS8409::initForNodeID for each node
        // and AppleHDAWidget::initForNodeID(unsigned short, OSObject*, OSObject*)  for each node

        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 797); // 0x047f0005
        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00f002c1, 798); // 0x047f0009
//      snd_hda:     71 AC_WID_VENDOR ['AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_UNSOL_CAP', 'AC_WCAP_DELAY', 'AC_WCAP_PROC_WID', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DIGITAL'] 0 0 15

        // new addition June 2019
        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 799); // 0x047f000f
        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 800); // 0x047f0012
//      snd_hda:     amp capabilities 71 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 801); // 0x047f000d
//      snd_hda:     amp capabilities 71 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0

        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00f002c1, 802); // 0x047f0009
//      snd_hda:     71 AC_WID_VENDOR ['AC_WCAP_STEREO', 'AC_WCAP_TYPE', 'AC_WCAP_UNSOL_CAP', 'AC_WCAP_DELAY', 'AC_WCAP_PROC_WID', 'AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DIGITAL'] 0 0 15

}

static void read_coefs_all(struct hda_codec *codec);

static void init_read_coefs(struct hda_codec *codec)
{

        int retval;


        // in AppleHDAWidget::initForNodeID(unsigned short, OSObject*, OSObject*)

        // get number of coefs in bits 15:8 - here 0x0000ff00 ie 255
        retval = snd_hda_codec_read_check(codec, CS8409_VENDOR_NID, 0, AC_VERB_PARAMETERS, 0x00000010, 0x0000ff00, 803); // 0x047f0010


        // this is after the read_all_nodes loop

        read_coefs_all(codec);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003);
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void read_coefs_all(struct hda_codec *codec)
{

        // leave these in as check of state

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 804 ); //   coef read 804
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 808 ); //   coef read 808
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0002, 0x0000, 0x00000080, 812 ); //   coef read 812
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0003, 0x0000, 0x0000801f, 816 ); //   coef read 816
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0004, 0x0000, 0x0000083f, 820 ); //   coef read 820
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0005, 0x0000, 0x00000000, 824 ); //   coef read 824
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0006, 0x0000, 0x00008000, 828 ); //   coef read 828
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0007, 0x0000, 0x000028ff, 832 ); //   coef read 832
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0008, 0x0000, 0x00000000, 836 ); //   coef read 836
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0009, 0x0000, 0x00000013, 840 ); //   coef read 840
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x000a, 0x0000, 0x00000000, 844 ); //   coef read 844
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x000b, 0x0000, 0x00000000, 848 ); //   coef read 848
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x000c, 0x0000, 0x0000cccc, 852 ); //   coef read 852
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x000d, 0x0000, 0x0000cccc, 856 ); //   coef read 856
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x000e, 0x0000, 0x00000000, 860 ); //   coef read 860
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x000f, 0x0000, 0x0000aaaa, 864 ); //   coef read 864
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0010, 0x0000, 0x0000cccc, 868 ); //   coef read 868
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0011, 0x0000, 0x00000000, 872 ); //   coef read 872
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0012, 0x0000, 0x0000cccc, 876 ); //   coef read 876
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0013, 0x0000, 0x0000cccc, 880 ); //   coef read 880
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0014, 0x0000, 0x00000000, 884 ); //   coef read 884
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0015, 0x0000, 0x0000aaaa, 888 ); //   coef read 888
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0016, 0x0000, 0x0000cccc, 892 ); //   coef read 892
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 896 ); //   coef read 896
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 900 ); //   coef read 900
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000400, 904 ); //   coef read 904
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000420, 908 ); //   coef read 908
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008c20, 912 ); //   coef read 912
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008000, 916 ); //   coef read 916
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008c40, 920 ); //   coef read 920
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 924 ); //   coef read 924
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008c60, 928 ); //   coef read 928
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 932 ); //   coef read 932
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 936 ); //   coef read 936
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 940 ); //   coef read 940
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 944 ); //   coef read 944
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 948 ); //   coef read 948
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 952 ); //   coef read 952
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 956 ); //   coef read 956
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 960 ); //   coef read 960
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 964 ); //   coef read 964
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 968 ); //   coef read 968
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 972 ); //   coef read 972
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 976 ); //   coef read 976
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 980 ); //   coef read 980
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 984 ); //   coef read 984
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 988 ); //   coef read 988
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 992 ); //   coef read 992
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 996 ); //   coef read 996
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 1000 ); //   coef read 1000
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 1004 ); //   coef read 1004
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 1008 ); //   coef read 1008
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 1012 ); //   coef read 1012
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 1016 ); //   coef read 1016
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 1020 ); //   coef read 1020
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 1024 ); //   coef read 1024
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 1028 ); //   coef read 1028
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 1032 ); //   coef read 1032
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 1036 ); //   coef read 1036
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 1040 ); //   coef read 1040
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 1044 ); //   coef read 1044
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 1048 ); //   coef read 1048
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 1052 ); //   coef read 1052
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 1056 ); //   coef read 1056
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 1060 ); //   coef read 1060
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 1064 ); //   coef read 1064
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 1068 ); //   coef read 1068
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 1072 ); //   coef read 1072
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 1076 ); //   coef read 1076
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 1080 ); //   coef read 1080
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 1084 ); //   coef read 1084
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 1088 ); //   coef read 1088
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 1092 ); //   coef read 1092
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 1096 ); //   coef read 1096
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 1100 ); //   coef read 1100
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 1104 ); //   coef read 1104
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 1108 ); //   coef read 1108
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 1112 ); //   coef read 1112
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 1116 ); //   coef read 1116
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 1120 ); //   coef read 1120
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 1124 ); //   coef read 1124
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 1128 ); //   coef read 1128
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 1132 ); //   coef read 1132
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 1136 ); //   coef read 1136
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 1140 ); //   coef read 1140
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 1144 ); //   coef read 1144
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 1148 ); //   coef read 1148
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 1152 ); //   coef read 1152
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0058, 0x0000, 0x00000400, 1156 ); //   coef read 1156
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0059, 0x0000, 0x00000074, 1160 ); //   coef read 1160
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005a, 0x0000, 0x0000007f, 1164 ); //   coef read 1164
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005b, 0x0000, 0x00000010, 1168 ); //   coef read 1168
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000020, 1172 ); //   coef read 1172
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005d, 0x0000, 0x00002d7f, 1176 ); //   coef read 1176
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00002d7f, 1180 ); //   coef read 1180
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005f, 0x0000, 0x00001600, 1184 ); //   coef read 1184
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0060, 0x0000, 0x00000000, 1188 ); //   coef read 1188
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0061, 0x0000, 0x00000000, 1192 ); //   coef read 1192
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0062, 0x0000, 0x00000000, 1196 ); //   coef read 1196
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0063, 0x0000, 0x00000000, 1200 ); //   coef read 1200
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0064, 0x0000, 0x00000000, 1204 ); //   coef read 1204
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0065, 0x0000, 0x00000000, 1208 ); //   coef read 1208
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0066, 0x0000, 0x00000000, 1212 ); //   coef read 1212
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0067, 0x0000, 0x00000000, 1216 ); //   coef read 1216
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0068, 0x0000, 0x00000000, 1220 ); //   coef read 1220
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0069, 0x0000, 0x00000000, 1224 ); //   coef read 1224
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x006a, 0x0000, 0x00000000, 1228 ); //   coef read 1228
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x006b, 0x0000, 0x00000000, 1232 ); //   coef read 1232
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x006c, 0x0000, 0x00000000, 1236 ); //   coef read 1236
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x006d, 0x0000, 0x00000000, 1240 ); //   coef read 1240
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x006e, 0x0000, 0x00000000, 1244 ); //   coef read 1244
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x006f, 0x0000, 0x00000000, 1248 ); //   coef read 1248
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0070, 0x0000, 0x00000000, 1252 ); //   coef read 1252
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 1256 ); //   coef read 1256
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0072, 0x0000, 0x00000000, 1260 ); //   coef read 1260
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0073, 0x0000, 0x00000000, 1264 ); //   coef read 1264
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0074, 0x0000, 0x00000000, 1268 ); //   coef read 1268
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0075, 0x0000, 0x00000001, 1272 ); //   coef read 1272
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0076, 0x0000, 0x00000009, 1276 ); //   coef read 1276
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0077, 0x0000, 0x00000000, 1280 ); //   coef read 1280
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0078, 0x0000, 0x00000000, 1284 ); //   coef read 1284
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0079, 0x0000, 0x00000000, 1288 ); //   coef read 1288
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x007a, 0x0000, 0x00000000, 1292 ); //   coef read 1292
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x007b, 0x0000, 0x00000000, 1296 ); //   coef read 1296
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x007c, 0x0000, 0x00000000, 1300 ); //   coef read 1300
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x007d, 0x0000, 0x00000000, 1304 ); //   coef read 1304
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x007e, 0x0000, 0x00000000, 1308 ); //   coef read 1308
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x007f, 0x0000, 0x00000000, 1312 ); //   coef read 1312
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0080, 0x0000, 0x00000000, 1316 ); //   coef read 1316
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0081, 0x0000, 0x00000000, 1320 ); //   coef read 1320
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x0000ff00, 1324 ); //   coef read 1324

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void read_virtual_widgets(struct hda_codec *codec)
{
       // setup the virtual widgets

        unsigned int retval;

        dev_info(hda_codec_dev(codec), "command nid start read_virtual_widgets\n");

        // copied to outer routine
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        // moved to outer routine
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 1335); // 0x048f0005
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1336); // 0x048f0009
//      snd_hda:     72 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 1337); // 0x048f000f
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 1338); // 0x048f000a
//      snd_hda:     pcm params           72 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 1339); // 0x048f000b
//      snd_hda:     stream format params 72 
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 1340); // 0x048f0012
//      snd_hda:     amp capabilities 72 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 1341); // 0x048f000d
//      snd_hda:     amp capabilities 72 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x48, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1342); // 0x048f0009
//      snd_hda:     72 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 1344); // 0x049f0005
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1345); // 0x049f0009
//      snd_hda:     73 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 1346); // 0x049f000f
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 1347); // 0x049f000a
//      snd_hda:     pcm params           73 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 1348); // 0x049f000b
//      snd_hda:     stream format params 73 
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 1349); // 0x049f0012
//      snd_hda:     amp capabilities 73 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 1350); // 0x049f000d
//      snd_hda:     amp capabilities 73 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x49, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1351); // 0x049f0009
//      snd_hda:     73 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 1353); // 0x04af0005
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1354); // 0x04af0009
//      snd_hda:     74 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 1355); // 0x04af000f
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 1356); // 0x04af000a
//      snd_hda:     pcm params           74 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 1357); // 0x04af000b
//      snd_hda:     stream format params 74 
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 1358); // 0x04af0012
//      snd_hda:     amp capabilities 74 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 1359); // 0x04af000d
//      snd_hda:     amp capabilities 74 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x4a, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1360); // 0x04af0009
//      snd_hda:     74 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000000, 1362); // 0x04bf0005
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1363); // 0x04bf0009
//      snd_hda:     75 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x0000000f, 0x00000000, 1364); // 0x04bf000f
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x00000000, 1365); // 0x04bf000a
//      snd_hda:     pcm params           75 bits:  rates: 
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000000, 1366); // 0x04bf000b
//      snd_hda:     stream format params 75 
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 1367); // 0x04bf0012
//      snd_hda:     amp capabilities 75 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 1368); // 0x04bf000d
//      snd_hda:     amp capabilities 75 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, 0x4b, 0, AC_VERB_PARAMETERS, 0x00000009, 0x00000000, 1369); // 0x04bf0009
//      snd_hda:     75 AC_WID_AUD_OUT ['AC_WCAP_CHAN_CNT_EXT', 'AC_WCAP_DELAY', 'AC_WCAP_TYPE'] 0 0 0


        dev_info(hda_codec_dev(codec), "command nid end   read_virtual_widgets\n");

}

static void init_for_node_id(struct hda_codec *codec)
{

        int retval;

        //int retwake;
        //int retunsol;

        // all in AppleHDAFunctionGroupCS4208::initForNodeID


        dev_info(hda_codec_dev(codec), "command nid init_for_node_id\n");


        // these 2 items seem to enable the i2c clock - but we havent enabled i2c yet!!
        // whats the difference??
        // Im certain this is enabling the i2c clock
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1371 ); //   coef read 1371
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1375 ); //   coef write 1375

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 1379 ); //   coef read 1379
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 1383 ); //   coef write 1383
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 1387 ); //   coef write 1387
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 1391 ); //   coef write 1391
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0002, 0x0000, 0x00000000, 1395 ); //   coef write 1395

        // this is done as a loop over a fixed number of indexes (0x57)
        // the loop terminates when a non-signed value is returned ie the word sign bit (0x8000) is not set
        // or finish all 0x57

        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x8000, 0x00000000, 1399 ); //   coef write 1399
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x8000, 0x00000000, 1403 ); //   coef write 1403
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x8000, 0x00000000, 1407 ); //   coef write 1407
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x8000, 0x00000000, 1411 ); //   coef write 1411
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001d, 0x8000, 0x00000000, 1415 ); //   coef write 1415
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001e, 0x8000, 0x00000000, 1419 ); //   coef write 1419
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001f, 0x8000, 0x00000000, 1423 ); //   coef write 1423
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0020, 0x8000, 0x00000000, 1427 ); //   coef write 1427
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0021, 0x8000, 0x00000000, 1431 ); //   coef write 1431
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0022, 0x8000, 0x00000000, 1435 ); //   coef write 1435
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0023, 0x8000, 0x00000000, 1439 ); //   coef write 1439
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0024, 0x8000, 0x00000000, 1443 ); //   coef write 1443
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0025, 0x8000, 0x00000000, 1447 ); //   coef write 1447
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0026, 0x8000, 0x00000000, 1451 ); //   coef write 1451
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0027, 0x8000, 0x00000000, 1455 ); //   coef write 1455
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0028, 0x8000, 0x00000000, 1459 ); //   coef write 1459
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0029, 0x8000, 0x00000000, 1463 ); //   coef write 1463
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x002a, 0x8000, 0x00000000, 1467 ); //   coef write 1467
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x002b, 0x8000, 0x00000000, 1471 ); //   coef write 1471
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x002c, 0x8000, 0x00000000, 1475 ); //   coef write 1475
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x002d, 0x8000, 0x00000000, 1479 ); //   coef write 1479
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x002e, 0x8000, 0x00000000, 1483 ); //   coef write 1483
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x002f, 0x8000, 0x00000000, 1487 ); //   coef write 1487
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0030, 0x8000, 0x00000000, 1491 ); //   coef write 1491
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0031, 0x8000, 0x00000000, 1495 ); //   coef write 1495
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0032, 0x8000, 0x00000000, 1499 ); //   coef write 1499
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0033, 0x8000, 0x00000000, 1503 ); //   coef write 1503
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0034, 0x8000, 0x00000000, 1507 ); //   coef write 1507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0035, 0x8000, 0x00000000, 1511 ); //   coef write 1511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0036, 0x8000, 0x00000000, 1515 ); //   coef write 1515
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0037, 0x8000, 0x00000000, 1519 ); //   coef write 1519
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0038, 0x8000, 0x00000000, 1523 ); //   coef write 1523
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0039, 0x8000, 0x00000000, 1527 ); //   coef write 1527
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x003a, 0x8000, 0x00000000, 1531 ); //   coef write 1531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x003b, 0x8000, 0x00000000, 1535 ); //   coef write 1535
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x003c, 0x8000, 0x00000000, 1539 ); //   coef write 1539
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x003d, 0x8000, 0x00000000, 1543 ); //   coef write 1543
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x003e, 0x8000, 0x00000000, 1547 ); //   coef write 1547
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x003f, 0x8000, 0x00000000, 1551 ); //   coef write 1551
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0040, 0x8000, 0x00000000, 1555 ); //   coef write 1555
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0041, 0x8000, 0x00000000, 1559 ); //   coef write 1559
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0042, 0x8000, 0x00000000, 1563 ); //   coef write 1563
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0043, 0x8000, 0x00000000, 1567 ); //   coef write 1567
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0044, 0x8000, 0x00000000, 1571 ); //   coef write 1571
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0045, 0x8000, 0x00000000, 1575 ); //   coef write 1575
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0046, 0x8000, 0x00000000, 1579 ); //   coef write 1579
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0047, 0x8000, 0x00000000, 1583 ); //   coef write 1583
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0048, 0x8000, 0x00000000, 1587 ); //   coef write 1587
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0049, 0x8000, 0x00000000, 1591 ); //   coef write 1591
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x004a, 0x8000, 0x00000000, 1595 ); //   coef write 1595
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x004b, 0x8000, 0x00000000, 1599 ); //   coef write 1599
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x004c, 0x8000, 0x00000000, 1603 ); //   coef write 1603
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x004d, 0x8000, 0x00000000, 1607 ); //   coef write 1607
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x004e, 0x8000, 0x00000000, 1611 ); //   coef write 1611
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x004f, 0x8000, 0x00000000, 1615 ); //   coef write 1615
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0050, 0x8000, 0x00000000, 1619 ); //   coef write 1619
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0051, 0x8000, 0x00000000, 1623 ); //   coef write 1623
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0052, 0x8000, 0x00000000, 1627 ); //   coef write 1627
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0053, 0x8000, 0x00000000, 1631 ); //   coef write 1631
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0054, 0x8000, 0x00000000, 1635 ); //   coef write 1635
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0055, 0x8000, 0x00000000, 1639 ); //   coef write 1639
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0056, 0x8000, 0x00000000, 1643 ); //   coef write 1643
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0057, 0x8000, 0x00000000, 1647 ); //   coef write 1647

        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x000a, 0x0000, 0x00000000, 1651 ); //   coef write 1651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000000, 1655 ); //   coef write 1655
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 1659 ); //   coef write 1659
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006c, 0x001f, 0x00000000, 1663 ); //   coef write 1663
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000000, 1667 ); //   coef write 1667

        // this is determineSpeakerID
        // this does not make sense - this just checks a GPIO pin??

        // this is call AppleHDAFunctionGroup::setGPIOEnable in determineSpeakerID
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000004); // 0x00171604
//      snd_hda:     gpio enable 1 0x04

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DATA, 0x00000000, 0x00000004, 1672); // 0x001f1500
//      snd_hda:     gpio data 1 0x04

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_jack_pin_config(struct hda_codec *codec)
{

        //int retval;

        // this is likely some call of setPinConfigDefault
        // could be related to the headphone microphone

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_CONFIG_DEFAULT_BYTES_0, 0x00000001); // 0x04571c01
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_CONFIG_DEFAULT_BYTES_1, 0x00000001); // 0x04571d01
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_CONFIG_DEFAULT_BYTES_2, 0x000000a0); // 0x04571ea0
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_CONFIG_DEFAULT_BYTES_3, 0x00000090); // 0x04571f90
//      snd_hda:     pin config 0x90a00101 port conn 2 location 0x10 loc ext 1 loc geom 0 default device 10 conn type 0 color 0 misc 1 def assoc 0 seq 1
//      snd_hda:     pin config 0x90a00101 port conn Fixed loc ext Int loc geom N/A default device Mic In conn type Unknown color Unknown misc Jack Detect Override def assoc 0 seq 1

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void enable_i2c(struct hda_codec *codec)
{
        //int retval;

        // AppleBusControllerCS8409::init

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

//      snd_hda: # AppleHDAFunctionGroupCS8409::enableI2CClock: 
        // codes from windows cs4208_38.inf file
        // 0x9008 = PLL1_EN(0x1000),I2C_EN(0x8)
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1691 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef read 1691
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1695 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef write 1695

        // 0x0002 0x0080 +GPIO_I2C (0x80) not used ASP1_BUS_IDLE = 0x200 ASP2_BUS_IDLE = 0x800 (0b1010) ASP1/2_BUS_IDLE = 10
        // 0x005b undocumented
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0002, 0x0000, 0x00000000, 1699 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef read 1699
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0002, 0x0080, 0x00000000, 1703 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef write 1703
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0002, 0x0000, 0x00000080, 1707 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef read 1707
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005b, 0x0000, 0x00000010, 1711 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef read 1711
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005b, 0x0010, 0x00000000, 1715 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef write 1715

//      snd_hda: # AppleHDAFunctionGroupCS8409::enableI2CClock: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1719 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef read 1719
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1723 ); // AppleHDAFunctionGroupCS8409::enableI2C  coef write 1723

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void enable_GPIforUR(struct hda_codec *codec)
{
        int retval;

        // AppleHDAFunctionGroupCS8409::enableGPIforUR

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);


        // this is AppleHDAFunctionGroup::setGPIOEnable in AppleHDAFunctionGroup::enableGPIforUR
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000005); // 0x00171605
//      snd_hda:     gpio enable 1 0x05

        // this is AppleHDAFunctionGroup::setGPIODirection in AppleHDAFunctionGroup::enableGPIforUR
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000000); // 0x00171700
//      snd_hda:     gpio direction 1 0x00 in in in in in in in in

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_WAKE_MASK, 0x00000000, 0x00000000, 1735); // 0x001f1800
//      snd_hda:     gpio wake enable 1 0x00
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_WAKE_MASK, 0x00000001); // 0x00171801
//      snd_hda:     gpio wake enable 1 0x01
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_UNSOLICITED_RSP_MASK, 0x00000000, 0x00000000, 1737); // 0x001f1900
//      snd_hda:     gpio unsol enable 1 0x00
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_UNSOLICITED_RSP_MASK, 0x00000001); // 0x00171901
//      snd_hda:     gpio unsol enable 1 0x01


        // likely last runVerb of AppleHDAFunctionGroupCS8409::enableGPIforUR
        snd_hda_codec_write(codec, codec->core.afg, 0, 0x7f0, 0x000000b7);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void external_control_GPIO_clear_2(struct hda_codec *codec);
static void external_control_GPIO_set_2(struct hda_codec *codec);

static void external_control_GPIO(struct hda_codec *codec)
{

        // possibly AppleHDAPathSet::initPathSetFromXML
        // or AppleHDAPathSet::enable and AppleHDAPathSet::disable

        // forward call trace
        // AppleHDAPathSet::initPathSetFromXML
        // calls AppleHDAFunctionGroup::setExternalControlForDefaultDeviceTypeAndTag
        // AppleHDAFunctionGroup::setExternalControlForDefaultDeviceTypeAndTag
        // calls AppleHDAFunctionGroupExternalControl::setExternalControlState
        // AppleHDAFunctionGroupExternalControl::setExternalControlState
        // calls AppleHDAFunctionGroupExternalControl::publicSetExternalControlState
        // this appears to be virtual - the definition just asserts
        // good candidate is AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState
        // AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState
        // is the function which does the external_control_GPIO_clear0 or external_control_GPIO_set1
        // functions below

        // note that AppleHDAFunctionGroupExternalControl::setExternalControlState
        // has an IOSleep() as the first call depending on a flag 

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301


        // this clearing then setting gpio bit 2

        external_control_GPIO_clear_2(codec);

        external_control_GPIO_set_2(codec);

}


static void external_control_GPIO_clear_2(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        // AppleHDAFunctionGroup::setGPIODirection
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000002); // 0x00171702
//      snd_hda:     gpio direction 1 0x02 in in in in in in out in
        // AppleHDAFunctionGroup::setGPIOData
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000000); // 0x00171500
//      snd_hda:     gpio data 1 0x00
        // AppleHDAFunctionGroup::setGPIOEnable
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000007); // 0x00171607
//      snd_hda:     gpio enable 1 0x07

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void external_control_GPIO_set_2(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        // AppleHDAFunctionGroup::setGPIODirection
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000002); // 0x00171702
//      snd_hda:     gpio direction 1 0x02 in in in in in in out in
        // AppleHDAFunctionGroup::setGPIOData
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000002); // 0x00171502
//      snd_hda:     gpio data 1 0x02
        // AppleHDAFunctionGroup::setGPIOEnable
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000007); // 0x00171607
//      snd_hda:     gpio enable 1 0x07

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void putative_setup_mic(struct hda_codec *codec)
{



        // these are i2c calls
        // so it seems Apple is using SET_COEF_INDEX, SET_PROC_COEF to write to the local i2c bus
        // writing to coef index 0x59 for the i2c address, reading from 0x5c for i2c status
        // and writing to 0x5d for i2c register, data writes (8 bit each in the 16 bit coef data with register in hi byte)
        // and writing/reading to 0x5e for i2c register, data reads - the write is register with lo byte 0x00
        // and read is data for i2c register (i2c register returned) with data in lo byte

        // based on info from bugs 195671 and 110561
        // and that writing to coef index 0x59 seems to be the i2c address hence the i2c address is 0x90
        // this is likely setting up the headphone/mic jack ic CS42L83A


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0100 i2c data 0x0100
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1301, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1769 ); // i2cPagedRead  coef read 1769
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1773 ); // i2cPagedRead  coef write 1773
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 1777 ); // i2cPagedRead  coef write 1777
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 1781 ); // i2cPagedRead  coef write 1781
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1785 ); // i2cPagedRead  coef read 1785
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0100, 0x00000000, 1789 ); // i2cPagedRead  coef write 1789
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1793 ); // i2cPagedRead  coef read 1793
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1797 ); // i2cPagedRead  coef read 1797
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000100, 1801 ); // i2cPagedRead  coef read 1801
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1805 ); // i2cPagedRead  coef read 1805
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1809 ); // i2cPagedRead  coef write 1809
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0200 i2c data 0x0200
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1302, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1820 ); // i2cPagedRead  coef read 1820
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1824 ); // i2cPagedRead  coef write 1824
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 1828 ); // i2cPagedRead  coef write 1828
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 1832 ); // i2cPagedRead  coef write 1832
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1836 ); // i2cPagedRead  coef read 1836
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0200, 0x00000000, 1840 ); // i2cPagedRead  coef write 1840
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1844 ); // i2cPagedRead  coef read 1844
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1848 ); // i2cPagedRead  coef read 1848
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000200, 1852 ); // i2cPagedRead  coef read 1852
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1856 ); // i2cPagedRead  coef read 1856
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1860 ); // i2cPagedRead  coef write 1860
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0300 i2c data 0x030c
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1303, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1871 ); // i2cPagedRead  coef read 1871
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1875 ); // i2cPagedRead  coef write 1875
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 1879 ); // i2cPagedRead  coef write 1879
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 1883 ); // i2cPagedRead  coef write 1883
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1887 ); // i2cPagedRead  coef read 1887
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 1891 ); // i2cPagedRead  coef write 1891
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1895 ); // i2cPagedRead  coef read 1895
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1899 ); // i2cPagedRead  coef read 1899
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x0000030c, 1903 ); // i2cPagedRead  coef read 1903
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1907 ); // i2cPagedRead  coef read 1907
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1911 ); // i2cPagedRead  coef write 1911
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0400 i2c data 0x0400
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1304, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1922 ); // i2cPagedRead  coef read 1922
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1926 ); // i2cPagedRead  coef write 1926
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 1930 ); // i2cPagedRead  coef write 1930
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 1934 ); // i2cPagedRead  coef write 1934
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1938 ); // i2cPagedRead  coef read 1938
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 1942 ); // i2cPagedRead  coef write 1942
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1946 ); // i2cPagedRead  coef read 1946
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1950 ); // i2cPagedRead  coef read 1950
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 1954 ); // i2cPagedRead  coef read 1954
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1958 ); // i2cPagedRead  coef read 1958
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1962 ); // i2cPagedRead  coef write 1962
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0500 i2c data 0x0500
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1305, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1973 ); // i2cPagedRead  coef read 1973
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1977 ); // i2cPagedRead  coef write 1977
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 1981 ); // i2cPagedRead  coef write 1981
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 1985 ); // i2cPagedRead  coef write 1985
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1989 ); // i2cPagedRead  coef read 1989
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0500, 0x00000000, 1993 ); // i2cPagedRead  coef write 1993
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1997 ); // i2cPagedRead  coef read 1997
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2001 ); // i2cPagedRead  coef read 2001
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000500, 2005 ); // i2cPagedRead  coef read 2005
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2009 ); // i2cPagedRead  coef read 2009
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2013 ); // i2cPagedRead  coef write 2013
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0b00 i2c data 0x0b60
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130b, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2024 ); // i2cPagedRead  coef read 2024
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2028 ); // i2cPagedRead  coef write 2028
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2032 ); // i2cPagedRead  coef write 2032
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2036 ); // i2cPagedRead  coef write 2036
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2040 ); // i2cPagedRead  coef read 2040
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0b00, 0x00000000, 2044 ); // i2cPagedRead  coef write 2044
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2048 ); // i2cPagedRead  coef read 2048
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2052 ); // i2cPagedRead  coef read 2052
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000b60, 2056 ); // i2cPagedRead  coef read 2056
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2060 ); // i2cPagedRead  coef read 2060
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2064 ); // i2cPagedRead  coef write 2064
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0d00 i2c data 0x0d01
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130d, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2075 ); // i2cPagedRead  coef read 2075
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2079 ); // i2cPagedRead  coef write 2079
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2083 ); // i2cPagedRead  coef write 2083
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2087 ); // i2cPagedRead  coef write 2087
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2091 ); // i2cPagedRead  coef read 2091
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0d00, 0x00000000, 2095 ); // i2cPagedRead  coef write 2095
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2099 ); // i2cPagedRead  coef read 2099
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2103 ); // i2cPagedRead  coef read 2103
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000d01, 2107 ); // i2cPagedRead  coef read 2107
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2111 ); // i2cPagedRead  coef read 2111
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2115 ); // i2cPagedRead  coef write 2115
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0e00 i2c data 0x0e00
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130e, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2126 ); // i2cPagedRead  coef read 2126
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2130 ); // i2cPagedRead  coef write 2130
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2134 ); // i2cPagedRead  coef write 2134
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2138 ); // i2cPagedRead  coef write 2138
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2142 ); // i2cPagedRead  coef read 2142
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0e00, 0x00000000, 2146 ); // i2cPagedRead  coef write 2146
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2150 ); // i2cPagedRead  coef read 2150
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2154 ); // i2cPagedRead  coef read 2154
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000e00, 2158 ); // i2cPagedRead  coef read 2158
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2162 ); // i2cPagedRead  coef read 2162
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2166 ); // i2cPagedRead  coef write 2166
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0800 i2c data 0x0801
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1308, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2177 ); // i2cPagedRead  coef read 2177
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2181 ); // i2cPagedRead  coef write 2181
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2185 ); // i2cPagedRead  coef write 2185
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2189 ); // i2cPagedRead  coef write 2189
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2193 ); // i2cPagedRead  coef read 2193
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0800, 0x00000000, 2197 ); // i2cPagedRead  coef write 2197
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2201 ); // i2cPagedRead  coef read 2201
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2205 ); // i2cPagedRead  coef read 2205
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000801, 2209 ); // i2cPagedRead  coef read 2209
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2213 ); // i2cPagedRead  coef read 2213
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2217 ); // i2cPagedRead  coef write 2217
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0f00 i2c data 0x0f00
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130f, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2228 ); // i2cPagedRead  coef read 2228
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2232 ); // i2cPagedRead  coef write 2232
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2236 ); // i2cPagedRead  coef write 2236
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2240 ); // i2cPagedRead  coef write 2240
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2244 ); // i2cPagedRead  coef read 2244
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0f00, 0x00000000, 2248 ); // i2cPagedRead  coef write 2248
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2252 ); // i2cPagedRead  coef read 2252
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2256 ); // i2cPagedRead  coef read 2256
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000f00, 2260 ); // i2cPagedRead  coef read 2260
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2264 ); // i2cPagedRead  coef read 2264
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2268 ); // i2cPagedRead  coef write 2268
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void external_control_GPIO2_clear_2(struct hda_codec *codec)
{


        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        // AppleHDAFunctionGroup::setGPIODirection
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000002); // 0x00171702
//      snd_hda:     gpio direction 1 0x02 in in in in in in out in
        // AppleHDAFunctionGroup::setGPIOData
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000000); // 0x00171500
//      snd_hda:     gpio data 1 0x00
        // AppleHDAFunctionGroup::setGPIOEnable
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000007); // 0x00171607
//      snd_hda:     gpio enable 1 0x07

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void external_control_GPIO2_set_2(struct hda_codec *codec)
{

        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000002); // 0x00171702
//      snd_hda:     gpio direction 1 0x02 in in in in in in out in
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000002); // 0x00171502
//      snd_hda:     gpio data 1 0x02
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000007); // 0x00171607
//      snd_hda:     gpio enable 1 0x07

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void putative_setup_mic2(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x10 lo 0x0100 i2c data 0x0142
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2299 ); // i2cPagedRead  coef read 2299
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2303 ); // i2cPagedRead  coef write 2303
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2307 ); // i2cPagedRead  coef write 2307
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0010, 0x00000000, 2311 ); // i2cPagedRead  coef write 2311
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2315 ); // i2cPagedRead  coef read 2315
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0100, 0x00000000, 2319 ); // i2cPagedRead  coef write 2319
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2323 ); // i2cPagedRead  coef read 2323
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2327 ); // i2cPagedRead  coef read 2327
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000142, 2331 ); // i2cPagedRead  coef read 2331
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2335 ); // i2cPagedRead  coef read 2335
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2339 ); // i2cPagedRead  coef write 2339
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x10 lo 0x0500 i2c data 0x05b0
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1005, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2350 ); // i2cPagedRead  coef read 2350
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2354 ); // i2cPagedRead  coef write 2354
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2358 ); // i2cPagedRead  coef write 2358
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0010, 0x00000000, 2362 ); // i2cPagedRead  coef write 2362
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2366 ); // i2cPagedRead  coef read 2366
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0500, 0x00000000, 2370 ); // i2cPagedRead  coef write 2370
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2374 ); // i2cPagedRead  coef read 2374
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2378 ); // i2cPagedRead  coef read 2378
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x000005b0, 2382 ); // i2cPagedRead  coef read 2382
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2386 ); // i2cPagedRead  coef read 2386
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2390 ); // i2cPagedRead  coef write 2390
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x11 lo 0x0300 i2c data 0x0320
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1103, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2401 ); // i2cPagedRead  coef read 2401
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2405 ); // i2cPagedRead  coef write 2405
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2409 ); // i2cPagedRead  coef write 2409
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0011, 0x00000000, 2413 ); // i2cPagedRead  coef write 2413
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2417 ); // i2cPagedRead  coef read 2417
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 2421 ); // i2cPagedRead  coef write 2421
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2425 ); // i2cPagedRead  coef read 2425
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2429 ); // i2cPagedRead  coef read 2429
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000320, 2433 ); // i2cPagedRead  coef read 2433
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2437 ); // i2cPagedRead  coef read 2437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2441 ); // i2cPagedRead  coef write 2441
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x11 lo 0x0322 i2c data 0x0022
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1103, 0x0022, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2452 ); // i2cPagedWrite  coef read 2452
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2456 ); // i2cPagedWrite  coef write 2456
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2460 ); // i2cPagedWrite  coef write 2460
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0011, 0x00000000, 2464 ); // i2cPagedWrite  coef write 2464
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2468 ); // i2cPagedWrite  coef read 2468
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2472 ); // i2cPagedWrite  coef read 2472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0322, 0x00000000, 2476 ); // i2cPagedWrite  coef write 2476
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2480 ); // i2cPagedWrite  coef read 2480
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2484 ); // i2cPagedWrite  coef read 2484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2488 ); // i2cPagedWrite  coef read 2488
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2492 ); // i2cPagedWrite  coef write 2492
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x11 lo 0x2901 i2c data 0x0001
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1129, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2503 ); // i2cPagedWrite  coef read 2503
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2507 ); // i2cPagedWrite  coef write 2507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2511 ); // i2cPagedWrite  coef write 2511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0011, 0x00000000, 2515 ); // i2cPagedWrite  coef write 2515
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2519 ); // i2cPagedWrite  coef read 2519
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2523 ); // i2cPagedWrite  coef read 2523
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2901, 0x00000000, 2527 ); // i2cPagedWrite  coef write 2527
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2531 ); // i2cPagedWrite  coef read 2531
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2535 ); // i2cPagedWrite  coef read 2535
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2539 ); // i2cPagedWrite  coef read 2539
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2543 ); // i2cPagedWrite  coef write 2543
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x200f i2c data 0x000f
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1320, 0x000f, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2554 ); // i2cPagedWrite  coef read 2554
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2558 ); // i2cPagedWrite  coef write 2558
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2562 ); // i2cPagedWrite  coef write 2562
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2566 ); // i2cPagedWrite  coef write 2566
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2570 ); // i2cPagedWrite  coef read 2570
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2574 ); // i2cPagedWrite  coef read 2574
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x200f, 0x00000000, 2578 ); // i2cPagedWrite  coef write 2578
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2582 ); // i2cPagedWrite  coef read 2582
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2586 ); // i2cPagedWrite  coef read 2586
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2590 ); // i2cPagedWrite  coef read 2590
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2594 ); // i2cPagedWrite  coef write 2594
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void putative_setup_mic3(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x1b00 i2c data 0x1b03
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x131b, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2605 ); // i2cPagedRead  coef read 2605
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2609 ); // i2cPagedRead  coef write 2609
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2613 ); // i2cPagedRead  coef write 2613
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2617 ); // i2cPagedRead  coef write 2617
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2621 ); // i2cPagedRead  coef read 2621
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1b00, 0x00000000, 2625 ); // i2cPagedRead  coef write 2625
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2629 ); // i2cPagedRead  coef read 2629
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2633 ); // i2cPagedRead  coef read 2633
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001b03, 2637 ); // i2cPagedRead  coef read 2637
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2641 ); // i2cPagedRead  coef read 2641
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2645 ); // i2cPagedRead  coef write 2645
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1b03 i2c data 0x0003
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x131b, 0x0003, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2656 ); // i2cPagedWrite  coef read 2656
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2660 ); // i2cPagedWrite  coef write 2660
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2664 ); // i2cPagedWrite  coef write 2664
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2668 ); // i2cPagedWrite  coef write 2668
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2672 ); // i2cPagedWrite  coef read 2672
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2676 ); // i2cPagedWrite  coef read 2676
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1b03, 0x00000000, 2680 ); // i2cPagedWrite  coef write 2680
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2684 ); // i2cPagedWrite  coef read 2684
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2688 ); // i2cPagedWrite  coef read 2688
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2692 ); // i2cPagedWrite  coef read 2692
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2696 ); // i2cPagedWrite  coef write 2696
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x23 lo 0x023f i2c data 0x003f
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x2302, 0x003f, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2707 ); // i2cPagedWrite  coef read 2707
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2711 ); // i2cPagedWrite  coef write 2711
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2715 ); // i2cPagedWrite  coef write 2715
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0023, 0x00000000, 2719 ); // i2cPagedWrite  coef write 2719
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2723 ); // i2cPagedWrite  coef read 2723
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2727 ); // i2cPagedWrite  coef read 2727
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x023f, 0x00000000, 2731 ); // i2cPagedWrite  coef write 2731
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2735 ); // i2cPagedWrite  coef read 2735
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2739 ); // i2cPagedWrite  coef read 2739
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2743 ); // i2cPagedWrite  coef read 2743
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2747 ); // i2cPagedWrite  coef write 2747
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x1f lo 0x0100 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1f01, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2758 ); // i2cPagedWrite  coef read 2758
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2762 ); // i2cPagedWrite  coef write 2762
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2766 ); // i2cPagedWrite  coef write 2766
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001f, 0x00000000, 2770 ); // i2cPagedWrite  coef write 2770
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2774 ); // i2cPagedWrite  coef read 2774
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2778 ); // i2cPagedWrite  coef read 2778
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0100, 0x00000000, 2782 ); // i2cPagedWrite  coef write 2782
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2786 ); // i2cPagedWrite  coef read 2786
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2790 ); // i2cPagedWrite  coef read 2790
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2794 ); // i2cPagedWrite  coef read 2794
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2798 ); // i2cPagedWrite  coef write 2798
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x11 lo 0x21a6 i2c data 0x00a6
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1121, 0x00a6, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2809 ); // i2cPagedWrite  coef read 2809
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2813 ); // i2cPagedWrite  coef write 2813
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2817 ); // i2cPagedWrite  coef write 2817
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0011, 0x00000000, 2821 ); // i2cPagedWrite  coef write 2821
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2825 ); // i2cPagedWrite  coef read 2825
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2829 ); // i2cPagedWrite  coef read 2829
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x21a6, 0x00000000, 2833 ); // i2cPagedWrite  coef write 2833
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2837 ); // i2cPagedWrite  coef read 2837
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2841 ); // i2cPagedWrite  coef read 2841
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2845 ); // i2cPagedWrite  coef read 2845
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2849 ); // i2cPagedWrite  coef write 2849
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1600 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1316, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2860 ); // i2cPagedWrite  coef read 2860
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2864 ); // i2cPagedWrite  coef write 2864
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2868 ); // i2cPagedWrite  coef write 2868
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2872 ); // i2cPagedWrite  coef write 2872
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2876 ); // i2cPagedWrite  coef read 2876
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2880 ); // i2cPagedWrite  coef read 2880
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 2884 ); // i2cPagedWrite  coef write 2884
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2888 ); // i2cPagedWrite  coef read 2888
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2892 ); // i2cPagedWrite  coef read 2892
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2896 ); // i2cPagedWrite  coef read 2896
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2900 ); // i2cPagedWrite  coef write 2900
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1700 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1317, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2911 ); // i2cPagedWrite  coef read 2911
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2915 ); // i2cPagedWrite  coef write 2915
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2919 ); // i2cPagedWrite  coef write 2919
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2923 ); // i2cPagedWrite  coef write 2923
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2927 ); // i2cPagedWrite  coef read 2927
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2931 ); // i2cPagedWrite  coef read 2931
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1700, 0x00000000, 2935 ); // i2cPagedWrite  coef write 2935
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2939 ); // i2cPagedWrite  coef read 2939
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2943 ); // i2cPagedWrite  coef read 2943
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2947 ); // i2cPagedWrite  coef read 2947
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2951 ); // i2cPagedWrite  coef write 2951
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1800 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1318, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2962 ); // i2cPagedWrite  coef read 2962
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2966 ); // i2cPagedWrite  coef write 2966
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 2970 ); // i2cPagedWrite  coef write 2970
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 2974 ); // i2cPagedWrite  coef write 2974
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2978 ); // i2cPagedWrite  coef read 2978
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2982 ); // i2cPagedWrite  coef read 2982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1800, 0x00000000, 2986 ); // i2cPagedWrite  coef write 2986
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2990 ); // i2cPagedWrite  coef read 2990
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2994 ); // i2cPagedWrite  coef read 2994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2998 ); // i2cPagedWrite  coef read 2998
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3002 ); // i2cPagedWrite  coef write 3002
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1900 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1319, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3013 ); // i2cPagedWrite  coef read 3013
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3017 ); // i2cPagedWrite  coef write 3017
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3021 ); // i2cPagedWrite  coef write 3021
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3025 ); // i2cPagedWrite  coef write 3025
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3029 ); // i2cPagedWrite  coef read 3029
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3033 ); // i2cPagedWrite  coef read 3033
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 3037 ); // i2cPagedWrite  coef write 3037
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3041 ); // i2cPagedWrite  coef read 3041
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3045 ); // i2cPagedWrite  coef read 3045
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3049 ); // i2cPagedWrite  coef read 3049
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3053 ); // i2cPagedWrite  coef write 3053
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1a00 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x131a, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3064 ); // i2cPagedWrite  coef read 3064
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3068 ); // i2cPagedWrite  coef write 3068
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3072 ); // i2cPagedWrite  coef write 3072
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3076 ); // i2cPagedWrite  coef write 3076
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3080 ); // i2cPagedWrite  coef read 3080
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3084 ); // i2cPagedWrite  coef read 3084
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1a00, 0x00000000, 3088 ); // i2cPagedWrite  coef write 3088
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3092 ); // i2cPagedWrite  coef read 3092
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3096 ); // i2cPagedWrite  coef read 3096
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3100 ); // i2cPagedWrite  coef read 3100
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3104 ); // i2cPagedWrite  coef write 3104
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x1c00 i2c data 0x1c7f
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x131c, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3115 ); // i2cPagedRead  coef read 3115
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3119 ); // i2cPagedRead  coef write 3119
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3123 ); // i2cPagedRead  coef write 3123
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3127 ); // i2cPagedRead  coef write 3127
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3131 ); // i2cPagedRead  coef read 3131
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1c00, 0x00000000, 3135 ); // i2cPagedRead  coef write 3135
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3139 ); // i2cPagedRead  coef read 3139
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3143 ); // i2cPagedRead  coef read 3143
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001c7f, 3147 ); // i2cPagedRead  coef read 3147
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3151 ); // i2cPagedRead  coef read 3151
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3155 ); // i2cPagedRead  coef write 3155
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1c1a i2c data 0x001a
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x131c, 0x001a, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3166 ); // i2cPagedWrite  coef read 3166
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3170 ); // i2cPagedWrite  coef write 3170
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3174 ); // i2cPagedWrite  coef write 3174
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3178 ); // i2cPagedWrite  coef write 3178
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3182 ); // i2cPagedWrite  coef read 3182
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3186 ); // i2cPagedWrite  coef read 3186
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c1a, 0x00000000, 3190 ); // i2cPagedWrite  coef write 3190
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3194 ); // i2cPagedWrite  coef read 3194
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3198 ); // i2cPagedWrite  coef read 3198
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3202 ); // i2cPagedWrite  coef read 3202
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3206 ); // i2cPagedWrite  coef write 3206
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1e00 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x131e, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3217 ); // i2cPagedWrite  coef read 3217
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3221 ); // i2cPagedWrite  coef write 3221
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3225 ); // i2cPagedWrite  coef write 3225
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3229 ); // i2cPagedWrite  coef write 3229
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3233 ); // i2cPagedWrite  coef read 3233
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3237 ); // i2cPagedWrite  coef read 3237
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1e00, 0x00000000, 3241 ); // i2cPagedWrite  coef write 3241
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3245 ); // i2cPagedWrite  coef read 3245
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3249 ); // i2cPagedWrite  coef read 3249
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3253 ); // i2cPagedWrite  coef read 3253
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3257 ); // i2cPagedWrite  coef write 3257
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x13 lo 0x1f00 i2c data 0x0000
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x131f, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3268 ); // i2cPagedWrite  coef read 3268
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3272 ); // i2cPagedWrite  coef write 3272
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3276 ); // i2cPagedWrite  coef write 3276
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3280 ); // i2cPagedWrite  coef write 3280
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3284 ); // i2cPagedWrite  coef read 3284
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3288 ); // i2cPagedWrite  coef read 3288
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1f00, 0x00000000, 3292 ); // i2cPagedWrite  coef write 3292
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3296 ); // i2cPagedWrite  coef read 3296
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3300 ); // i2cPagedWrite  coef read 3300
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3304 ); // i2cPagedWrite  coef read 3304
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3308 ); // i2cPagedWrite  coef write 3308
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0100 i2c data 0x0100
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1301, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3319 ); // i2cPagedRead  coef read 3319
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3323 ); // i2cPagedRead  coef write 3323
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3327 ); // i2cPagedRead  coef write 3327
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3331 ); // i2cPagedRead  coef write 3331
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3335 ); // i2cPagedRead  coef read 3335
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0100, 0x00000000, 3339 ); // i2cPagedRead  coef write 3339
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3343 ); // i2cPagedRead  coef read 3343
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3347 ); // i2cPagedRead  coef read 3347
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000100, 3351 ); // i2cPagedRead  coef read 3351
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3355 ); // i2cPagedRead  coef read 3355
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3359 ); // i2cPagedRead  coef write 3359
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0200 i2c data 0x0200
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1302, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3370 ); // i2cPagedRead  coef read 3370
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3374 ); // i2cPagedRead  coef write 3374
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3378 ); // i2cPagedRead  coef write 3378
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3382 ); // i2cPagedRead  coef write 3382
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3386 ); // i2cPagedRead  coef read 3386
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0200, 0x00000000, 3390 ); // i2cPagedRead  coef write 3390
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3394 ); // i2cPagedRead  coef read 3394
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3398 ); // i2cPagedRead  coef read 3398
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000200, 3402 ); // i2cPagedRead  coef read 3402
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3406 ); // i2cPagedRead  coef read 3406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3410 ); // i2cPagedRead  coef write 3410
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0300 i2c data 0x030c
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1303, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3421 ); // i2cPagedRead  coef read 3421
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3425 ); // i2cPagedRead  coef write 3425
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3429 ); // i2cPagedRead  coef write 3429
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3433 ); // i2cPagedRead  coef write 3433
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3437 ); // i2cPagedRead  coef read 3437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 3441 ); // i2cPagedRead  coef write 3441
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3445 ); // i2cPagedRead  coef read 3445
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3449 ); // i2cPagedRead  coef read 3449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x0000030c, 3453 ); // i2cPagedRead  coef read 3453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3457 ); // i2cPagedRead  coef read 3457
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3461 ); // i2cPagedRead  coef write 3461
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0400 i2c data 0x0400
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1304, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3472 ); // i2cPagedRead  coef read 3472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3476 ); // i2cPagedRead  coef write 3476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3480 ); // i2cPagedRead  coef write 3480
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3484 ); // i2cPagedRead  coef write 3484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3488 ); // i2cPagedRead  coef read 3488
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 3492 ); // i2cPagedRead  coef write 3492
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3496 ); // i2cPagedRead  coef read 3496
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3500 ); // i2cPagedRead  coef read 3500
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 3504 ); // i2cPagedRead  coef read 3504
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3508 ); // i2cPagedRead  coef read 3508
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3512 ); // i2cPagedRead  coef write 3512
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void putative_setup_mic4(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0500 i2c data 0x0500
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1305, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3523 ); // i2cPagedRead  coef read 3523
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3527 ); // i2cPagedRead  coef write 3527
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3531 ); // i2cPagedRead  coef write 3531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3535 ); // i2cPagedRead  coef write 3535
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3539 ); // i2cPagedRead  coef read 3539
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0500, 0x00000000, 3543 ); // i2cPagedRead  coef write 3543
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3547 ); // i2cPagedRead  coef read 3547
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3551 ); // i2cPagedRead  coef read 3551
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000500, 3555 ); // i2cPagedRead  coef read 3555
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3559 ); // i2cPagedRead  coef read 3559
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3563 ); // i2cPagedRead  coef write 3563
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0b00 i2c data 0x0b60
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130b, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3574 ); // i2cPagedRead  coef read 3574
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3578 ); // i2cPagedRead  coef write 3578
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3582 ); // i2cPagedRead  coef write 3582
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3586 ); // i2cPagedRead  coef write 3586
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3590 ); // i2cPagedRead  coef read 3590
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0b00, 0x00000000, 3594 ); // i2cPagedRead  coef write 3594
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3598 ); // i2cPagedRead  coef read 3598
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3602 ); // i2cPagedRead  coef read 3602
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000b60, 3606 ); // i2cPagedRead  coef read 3606
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3610 ); // i2cPagedRead  coef read 3610
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3614 ); // i2cPagedRead  coef write 3614
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0d00 i2c data 0x0d01
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130d, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3625 ); // i2cPagedRead  coef read 3625
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3629 ); // i2cPagedRead  coef write 3629
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3633 ); // i2cPagedRead  coef write 3633
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3637 ); // i2cPagedRead  coef write 3637
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3641 ); // i2cPagedRead  coef read 3641
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0d00, 0x00000000, 3645 ); // i2cPagedRead  coef write 3645
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3649 ); // i2cPagedRead  coef read 3649
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3653 ); // i2cPagedRead  coef read 3653
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000d01, 3657 ); // i2cPagedRead  coef read 3657
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3661 ); // i2cPagedRead  coef read 3661
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3665 ); // i2cPagedRead  coef write 3665
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0e00 i2c data 0x0e00
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130e, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3676 ); // i2cPagedRead  coef read 3676
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3680 ); // i2cPagedRead  coef write 3680
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3684 ); // i2cPagedRead  coef write 3684
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3688 ); // i2cPagedRead  coef write 3688
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3692 ); // i2cPagedRead  coef read 3692
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0e00, 0x00000000, 3696 ); // i2cPagedRead  coef write 3696
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3700 ); // i2cPagedRead  coef read 3700
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3704 ); // i2cPagedRead  coef read 3704
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000e00, 3708 ); // i2cPagedRead  coef read 3708
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3712 ); // i2cPagedRead  coef read 3712
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3716 ); // i2cPagedRead  coef write 3716
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0800 i2c data 0x0801
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1308, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3727 ); // i2cPagedRead  coef read 3727
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3731 ); // i2cPagedRead  coef write 3731
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3735 ); // i2cPagedRead  coef write 3735
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3739 ); // i2cPagedRead  coef write 3739
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3743 ); // i2cPagedRead  coef read 3743
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0800, 0x00000000, 3747 ); // i2cPagedRead  coef write 3747
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3751 ); // i2cPagedRead  coef read 3751
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3755 ); // i2cPagedRead  coef read 3755
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000801, 3759 ); // i2cPagedRead  coef read 3759
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3763 ); // i2cPagedRead  coef read 3763
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3767 ); // i2cPagedRead  coef write 3767
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x13 lo 0x0f00 i2c data 0x0f00
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x130f, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3778 ); // i2cPagedRead  coef read 3778
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3782 ); // i2cPagedRead  coef write 3782
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3786 ); // i2cPagedRead  coef write 3786
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0013, 0x00000000, 3790 ); // i2cPagedRead  coef write 3790
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3794 ); // i2cPagedRead  coef read 3794
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0f00, 0x00000000, 3798 ); // i2cPagedRead  coef write 3798
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3802 ); // i2cPagedRead  coef read 3802
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3806 ); // i2cPagedRead  coef read 3806
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000f00, 3810 ); // i2cPagedRead  coef read 3810
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3814 ); // i2cPagedRead  coef read 3814
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3818 ); // i2cPagedRead  coef write 3818
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x11 lo 0x0100 i2c data 0x01ff
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1101, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3829 ); // i2cPagedRead  coef read 3829
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3833 ); // i2cPagedRead  coef write 3833
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3837 ); // i2cPagedRead  coef write 3837
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0011, 0x00000000, 3841 ); // i2cPagedRead  coef write 3841
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3845 ); // i2cPagedRead  coef read 3845
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0100, 0x00000000, 3849 ); // i2cPagedRead  coef write 3849
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3853 ); // i2cPagedRead  coef read 3853
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3857 ); // i2cPagedRead  coef read 3857
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x000001ff, 3861 ); // i2cPagedRead  coef read 3861
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3865 ); // i2cPagedRead  coef read 3865
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3869 ); // i2cPagedRead  coef write 3869
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x11 lo 0x01fe i2c data 0x00fe
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1101, 0x00fe, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3880 ); // i2cPagedWrite  coef read 3880
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3884 ); // i2cPagedWrite  coef write 3884
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3888 ); // i2cPagedWrite  coef write 3888
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0011, 0x00000000, 3892 ); // i2cPagedWrite  coef write 3892
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3896 ); // i2cPagedWrite  coef read 3896
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3900 ); // i2cPagedWrite  coef read 3900
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x01fe, 0x00000000, 3904 ); // i2cPagedWrite  coef write 3904
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3908 ); // i2cPagedWrite  coef read 3908
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3912 ); // i2cPagedWrite  coef read 3912
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3916 ); // i2cPagedWrite  coef read 3916
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3920 ); // i2cPagedWrite  coef write 3920
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7500 i2c data 0x751f
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b75, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3931 ); // i2cPagedRead  coef read 3931
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3935 ); // i2cPagedRead  coef write 3935
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3939 ); // i2cPagedRead  coef write 3939
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 3943 ); // i2cPagedRead  coef write 3943
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3947 ); // i2cPagedRead  coef read 3947
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7500, 0x00000000, 3951 ); // i2cPagedRead  coef write 3951
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3955 ); // i2cPagedRead  coef read 3955
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3959 ); // i2cPagedRead  coef read 3959
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x0000751f, 3963 ); // i2cPagedRead  coef read 3963
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3967 ); // i2cPagedRead  coef read 3967
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3971 ); // i2cPagedRead  coef write 3971
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x1b lo 0x759f i2c data 0x009f
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1b75, 0x009f, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3982 ); // i2cPagedWrite  coef read 3982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3986 ); // i2cPagedWrite  coef write 3986
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 3990 ); // i2cPagedWrite  coef write 3990
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 3994 ); // i2cPagedWrite  coef write 3994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3998 ); // i2cPagedWrite  coef read 3998
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4002 ); // i2cPagedWrite  coef read 4002
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x759f, 0x00000000, 4006 ); // i2cPagedWrite  coef write 4006
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4010 ); // i2cPagedWrite  coef read 4010
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4014 ); // i2cPagedWrite  coef read 4014
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4018 ); // i2cPagedWrite  coef read 4018
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4022 ); // i2cPagedWrite  coef write 4022
//      snd_hda i2cPagedWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void setup_amps_reset(struct hda_codec *codec)
{
        //int retval;

        // again - this seems to be adding 0x020 to the existing 0x02 pin
        // assuming is associated with amps based on following i2c calls

        // this could be setting gpio 6 which based on info from bugs 195671 and 110561
        // is the SCLK of the local i2c bus

        // so this done before each ampflier software reset

        // why all the power up/downs before each component here??


        // all the following GPIO sets should be replaced with a function call
        // they clearly are from the function


        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000022); // 0x00171722
//      snd_hda:     gpio direction 1 0x22 in in out in in in out in
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000022); // 0x00171522
//      snd_hda:     gpio data 1 0x22
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000027); // 0x00171627
//      snd_hda:     gpio enable 1 0x27

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        // based on info from bugs 195671 and 110561
        // and that writing to coef index 0x59 seems to be the i2c address hence the i2c address following are
        // the amps 62, 64, 72, 74
        // also the data being sent does correpond to the registers of the MAX98372 from data sheet
        // which is supposedly similar to the actual MAX98706
        // all analysis of the i2cWrite data is based on the MAX98372 data sheet


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5101 i2c data 0x0001   reg anal: SoftwareReset           : Reset
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0051, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4043 ); // i2cWrite  coef read 4043
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4047 ); // i2cWrite  coef write 4047
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 4051 ); // i2cWrite  coef write 4051
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5101, 0x00000000, 4055 ); // i2cWrite  coef write 4055
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4059 ); // i2cWrite  coef read 4059
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4063 ); // i2cWrite  coef read 4063
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4067 ); // i2cWrite  coef read 4067
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4071 ); // i2cWrite  coef write 4071
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000022); // 0x00171722
//      snd_hda:     gpio direction 1 0x22 in in out in in in out in
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000022); // 0x00171522
//      snd_hda:     gpio data 1 0x22
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000027); // 0x00171627
//      snd_hda:     gpio enable 1 0x27

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5101 i2c data 0x0001   reg anal: SoftwareReset           : Reset
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0051, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4092 ); // i2cWrite  coef read 4092
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4096 ); // i2cWrite  coef write 4096
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 4100 ); // i2cWrite  coef write 4100
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5101, 0x00000000, 4104 ); // i2cWrite  coef write 4104
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4108 ); // i2cWrite  coef read 4108
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4112 ); // i2cWrite  coef read 4112
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4116 ); // i2cWrite  coef read 4116
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4120 ); // i2cWrite  coef write 4120
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000022); // 0x00171722
//      snd_hda:     gpio direction 1 0x22 in in out in in in out in
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000022); // 0x00171522
//      snd_hda:     gpio data 1 0x22
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000027); // 0x00171627
//      snd_hda:     gpio enable 1 0x27

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5101 i2c data 0x0001   reg anal: SoftwareReset           : Reset
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0051, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4141 ); // i2cWrite  coef read 4141
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4145 ); // i2cWrite  coef write 4145
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 4149 ); // i2cWrite  coef write 4149
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5101, 0x00000000, 4153 ); // i2cWrite  coef write 4153
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4157 ); // i2cWrite  coef read 4157
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4161 ); // i2cWrite  coef read 4161
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4165 ); // i2cWrite  coef read 4165
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4169 ); // i2cWrite  coef write 4169
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        // plausibly AppleHDAFunctionGroupExternalControl_GPIO::publicSetExternalControlState(bool)

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DIRECTION, 0x00000022); // 0x00171722
//      snd_hda:     gpio direction 1 0x22 in in out in in in out in
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_DATA, 0x00000022); // 0x00171522
//      snd_hda:     gpio data 1 0x22
        snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_GPIO_MASK, 0x00000027); // 0x00171627
//      snd_hda:     gpio enable 1 0x27

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5101 i2c data 0x0001   reg anal: SoftwareReset           : Reset
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0051, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4190 ); // i2cWrite  coef read 4190
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4194 ); // i2cWrite  coef write 4194
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 4198 ); // i2cWrite  coef write 4198
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5101, 0x00000000, 4202 ); // i2cWrite  coef write 4202
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4206 ); // i2cWrite  coef read 4206
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4210 ); // i2cWrite  coef read 4210
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4214 ); // i2cWrite  coef read 4214
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4218 ); // i2cWrite  coef write 4218
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void read_gpio_status(struct hda_codec *codec)
{
        int retval;

        // plausibly  AppleHDAFunctionGroupCS8409::readStatusAndClearInterrupt
        // or AppleHDAFunctionGroup::getGPIOData - not likely as no 0xf07 command

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DATA, 0x00000000, 0x00000027, 4224); // 0x001f1500
//      snd_hda:     gpio data 1 0x27

}

static void putative_setup_mic5(struct hda_codec *codec)
{
        //int retval;


        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        // curious - these functions not separated by power down/ups
        // ah - the log may not be ordered - they are output as a bunch at the end!!

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7500 i2c data 0x759f
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b75, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4232 ); // i2cPagedRead  coef read 4232
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4236 ); // i2cPagedRead  coef write 4236
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4240 ); // i2cPagedRead  coef write 4240
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4244 ); // i2cPagedRead  coef write 4244
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4248 ); // i2cPagedRead  coef read 4248
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7500, 0x00000000, 4252 ); // i2cPagedRead  coef write 4252
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4256 ); // i2cPagedRead  coef read 4256
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4260 ); // i2cPagedRead  coef read 4260
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x0000759f, 4264 ); // i2cPagedRead  coef read 4264
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4268 ); // i2cPagedRead  coef read 4268
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4272 ); // i2cPagedRead  coef write 4272
//      snd_hda i2cPagedRead end

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x1b lo 0x759f i2c data 0x009f
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1b75, 0x009f, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4279 ); // i2cPagedWrite  coef read 4279
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4283 ); // i2cPagedWrite  coef write 4283
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4287 ); // i2cPagedWrite  coef write 4287
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4291 ); // i2cPagedWrite  coef write 4291
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4295 ); // i2cPagedWrite  coef read 4295
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4299 ); // i2cPagedWrite  coef read 4299
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x759f, 0x00000000, 4303 ); // i2cPagedWrite  coef write 4303
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4307 ); // i2cPagedWrite  coef read 4307
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4311 ); // i2cPagedWrite  coef read 4311
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4315 ); // i2cPagedWrite  coef read 4315
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4319 ); // i2cPagedWrite  coef write 4319
//      snd_hda i2cPagedWrite end

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7300 i2c data 0x7302
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b73, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4326 ); // i2cPagedRead  coef read 4326
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4330 ); // i2cPagedRead  coef write 4330
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4334 ); // i2cPagedRead  coef write 4334
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4338 ); // i2cPagedRead  coef write 4338
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4342 ); // i2cPagedRead  coef read 4342
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7300, 0x00000000, 4346 ); // i2cPagedRead  coef write 4346
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4350 ); // i2cPagedRead  coef read 4350
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4354 ); // i2cPagedRead  coef read 4354
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007302, 4358 ); // i2cPagedRead  coef read 4358
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4362 ); // i2cPagedRead  coef read 4362
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4366 ); // i2cPagedRead  coef write 4366
//      snd_hda i2cPagedRead end

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x1b lo 0x73c0 i2c data 0x00c0
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1b73, 0x00c0, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4373 ); // i2cPagedWrite  coef read 4373
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4377 ); // i2cPagedWrite  coef write 4377
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4381 ); // i2cPagedWrite  coef write 4381
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4385 ); // i2cPagedWrite  coef write 4385
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4389 ); // i2cPagedWrite  coef read 4389
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4393 ); // i2cPagedWrite  coef read 4393
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x73c0, 0x00000000, 4397 ); // i2cPagedWrite  coef write 4397
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4401 ); // i2cPagedWrite  coef read 4401
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4405 ); // i2cPagedWrite  coef read 4405
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4409 ); // i2cPagedWrite  coef read 4409
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4413 ); // i2cPagedWrite  coef write 4413
//      snd_hda i2cPagedWrite end

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7b00 i2c data 0x7b00
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b7b, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4420 ); // i2cPagedRead  coef read 4420
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4424 ); // i2cPagedRead  coef write 4424
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4428 ); // i2cPagedRead  coef write 4428
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4432 ); // i2cPagedRead  coef write 4432
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4436 ); // i2cPagedRead  coef read 4436
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7b00, 0x00000000, 4440 ); // i2cPagedRead  coef write 4440
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4444 ); // i2cPagedRead  coef read 4444
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4448 ); // i2cPagedRead  coef read 4448
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007b00, 4452 ); // i2cPagedRead  coef read 4452
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4456 ); // i2cPagedRead  coef read 4456
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4460 ); // i2cPagedRead  coef write 4460
//      snd_hda i2cPagedRead end

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7900 i2c data 0x79e0
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b79, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4467 ); // i2cPagedRead  coef read 4467
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4471 ); // i2cPagedRead  coef write 4471
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4475 ); // i2cPagedRead  coef write 4475
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4479 ); // i2cPagedRead  coef write 4479
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4483 ); // i2cPagedRead  coef read 4483
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7900, 0x00000000, 4487 ); // i2cPagedRead  coef write 4487
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4491 ); // i2cPagedRead  coef read 4491
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4495 ); // i2cPagedRead  coef read 4495
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x000079e0, 4499 ); // i2cPagedRead  coef read 4499
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4503 ); // i2cPagedRead  coef read 4503
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4507 ); // i2cPagedRead  coef write 4507
//      snd_hda i2cPagedRead end

//      snd_hda: # i2cPagedWrite: 
//      snd_hda i2cPagedWrite i2c address 0x90 i2c reg hi 0x1b lo 0x79a0 i2c data 0x00a0
        //cs_8409_vendor_i2cWrite(codec, 0x90, 0x1b79, 0x00a0, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4514 ); // i2cPagedWrite  coef read 4514
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4518 ); // i2cPagedWrite  coef write 4518
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4522 ); // i2cPagedWrite  coef write 4522
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4526 ); // i2cPagedWrite  coef write 4526
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4530 ); // i2cPagedWrite  coef read 4530
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4534 ); // i2cPagedWrite  coef read 4534
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x79a0, 0x00000000, 4538 ); // i2cPagedWrite  coef write 4538
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4542 ); // i2cPagedWrite  coef read 4542
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4546 ); // i2cPagedWrite  coef read 4546
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4550 ); // i2cPagedWrite  coef read 4550
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4554 ); // i2cPagedWrite  coef write 4554
//      snd_hda i2cPagedWrite end

        // weird - multiple power down/ups
        // oh pigs - I bet these are delayed from the above calls - log output may not be ordered!!
        // highly likely - there is same number of these as i2c calls above
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7700 i2c data 0x7716
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b77, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4603 ); // i2cPagedRead  coef read 4603
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4607 ); // i2cPagedRead  coef write 4607
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 4611 ); // i2cPagedRead  coef write 4611
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 4615 ); // i2cPagedRead  coef write 4615
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4619 ); // i2cPagedRead  coef read 4619
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7700, 0x00000000, 4623 ); // i2cPagedRead  coef write 4623
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4627 ); // i2cPagedRead  coef read 4627
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4631 ); // i2cPagedRead  coef read 4631
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007716, 4635 ); // i2cPagedRead  coef read 4635
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4639 ); // i2cPagedRead  coef read 4639
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4643 ); // i2cPagedRead  coef write 4643
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

}

static void setup_jack_nids(struct hda_codec *codec)
{
        int retval;

        //int retgain1;
        //int retgain2;

        // this works on nids 0x22, 0x23, and 0x44, 0x45

        // these I think are the line in/headphone socket nids


        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004031); // 0x02224031
//      snd_hda:     stream format 34 [('CHAN', 2), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4663); // 0x022f0500
        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02270500
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 4666); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02270600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02270503
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4669); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);

        // so the following is being done with node 0x22 powered down!!

//      snd_hda: # AppleHDAWidgetCS8409::setConnectionSelect: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0009, 0x0000, 0x00000013, 4671 ); // AppleHDAWidgetCS8409::setConnectionSelect  coef read 4671
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0009, 0x0033, 0x00000000, 4675 ); // AppleHDAWidgetCS8409::setConnectionSelect  coef write 4675
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_CONNECT_SEL, 0x00000000); // 0x02270100

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000b3, 4680); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060a7); // 0x022360a7
//      snd_hda:     amp gain/mute 34 0x60a7 mute 1 gain 0x27 39 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000b3, 4682); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050a7); // 0x022350a7
//      snd_hda:     amp gain/mute 34 0x50a7 mute 1 gain 0x27 39 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000a7, 4684); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060a7); // 0x022360a7
//      snd_hda:     amp gain/mute 34 0x60a7 mute 1 gain 0x27 39 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000a7, 4686); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050a7); // 0x022350a7
//      snd_hda:     amp gain/mute 34 0x50a7 mute 1 gain 0x27 39 index 0x00 left 0 right 1 output 0 input 1  right  input


        // this is working on node 0x44

        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000000, 4688); // 0x044b2000
//      snd_hda:     amp gain/mute 68 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 68 0x0000 mute 0 gain 0x0 0
        snd_hda_codec_write(codec, 0x44, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006000); // 0x04436000
//      snd_hda:     amp gain/mute 68 0x6000 mute 0 gain 0x0 0 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000000, 4690); // 0x044b0000
//      snd_hda:     amp gain/mute 68 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 68 0x0000 mute 0 gain 0x0 0
        snd_hda_codec_write(codec, 0x44, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005000); // 0x04435000
//      snd_hda:     amp gain/mute 68 0x5000 mute 0 gain 0x0 0 index 0x00 left 0 right 1 output 0 input 1  right  input


        // I think this is for node 0x44

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000000, 4692 ); //   coef read 4692
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00000000, 4696 ); //   coef write 4696

        retval = snd_hda_codec_read_check(codec, 0x44, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 4700); // 0x044f0700
        snd_hda_codec_write(codec, 0x44, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000020); // 0x04470720
//      snd_hda:     68 ['AC_PINCTL_IN_EN']

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        // and redo the stream format???
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004031); // 0x02224031
//      snd_hda:     stream format 34 [('CHAN', 2), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        // followed by channels for node 0x23 and 0x45

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000b3, 4710); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060a7); // 0x023360a7
//      snd_hda:     amp gain/mute 35 0x60a7 mute 1 gain 0x27 39 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000b3, 4712); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050a7); // 0x023350a7
//      snd_hda:     amp gain/mute 35 0x50a7 mute 1 gain 0x27 39 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000a7, 4714); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060a7); // 0x023360a7
//      snd_hda:     amp gain/mute 35 0x60a7 mute 1 gain 0x27 39 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000a7, 4716); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050a7); // 0x023350a7
//      snd_hda:     amp gain/mute 35 0x50a7 mute 1 gain 0x27 39 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000000, 4718); // 0x045b2000
//      snd_hda:     amp gain/mute 69 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 69 0x0000 mute 0 gain 0x0 0
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006000); // 0x04536000
//      snd_hda:     amp gain/mute 69 0x6000 mute 0 gain 0x0 0 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000000, 4720); // 0x045b0000
//      snd_hda:     amp gain/mute 69 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 69 0x0000 mute 0 gain 0x0 0
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005000); // 0x04535000
//      snd_hda:     amp gain/mute 69 0x5000 mute 0 gain 0x0 0 index 0x00 left 0 right 1 output 0 input 1  right  input

        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4722); // 0x023f0500
        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 4725); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02370600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4728); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x02320000
//      snd_hda:     stream format 35 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000001, 4731 ); //   coef read 4731
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00000000, 4735 ); //   coef write 4735

        // and a sneaky node 0x45 here

        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 4739); // 0x045f0700
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04570700
//      snd_hda:     69 []

}

static void setup_jack_nids2(struct hda_codec *codec)
{
        int retval;

        //int retgain1;
        //int retgain2;


        // more node 0x22, 0x23 setups
        // this does seem to repeat the above
        // except the gain is slightly different

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301


        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 4742); // 0x022f0600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4743); // 0x022f0500
        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02270500
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 4746); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02270600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02270503
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4749); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);

 
        // this seems to be updating the coef index associated with setConnectionSelect
        // unable to figure where this is coming from currently
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0x00000033, 4751 ); // coef write mask 4751
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0xundef, 0x00000033, 4751 ); // coef write mask 4751


        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 4757); // 0x023f0600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4758); // 0x023f0500
        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 4761); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02370600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4764); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);


        // this seems to be updating the coef index associated with setConnectionSelect
        // unable to figure where this is coming from currently
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0x00000033, 4766 ); // coef write mask 4766
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0xundef, 0x00000033, 4766 ); // coef write mask 4766


        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4772); // 0x022f0500
        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02270500
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 4775); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02270600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02270503
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4778); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);

        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4780); // 0x023f0500
        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 4783); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02370600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4786); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_jack_vol1(struct hda_codec *codec)
{
        int retval;

        //int retgain1;
        //int retgain2;

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000a7, 4796); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060b3); // 0x022360b3
//      snd_hda:     amp gain/mute 34 0x60b3 mute 1 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000a7, 4798); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050b3); // 0x022350b3
//      snd_hda:     amp gain/mute 34 0x50b3 mute 1 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000a7, 4800); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060b3); // 0x023360b3
//      snd_hda:     amp gain/mute 35 0x60b3 mute 1 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000a7, 4802); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050b3); // 0x023350b3
//      snd_hda:     amp gain/mute 35 0x50b3 mute 1 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input
}

static void setup_jack_vol2(struct hda_codec *codec)
{
        int retval;

        //int retgain1;
        //int retgain2;

        // why the small changes in volumes??

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000b3, 4805); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02236033
//      snd_hda:     amp gain/mute 34 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000b3, 4807); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02235033
//      snd_hda:     amp gain/mute 34 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000b3, 4809); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02336033
//      snd_hda:     amp gain/mute 35 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000b3, 4811); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00b3 mute 1 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02335033
//      snd_hda:     amp gain/mute 35 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_TDM_6462(struct hda_codec *codec)
{
        int retval;

        // so this seems to be where we see the same code as in unmute and volup
        // - note that code structure is similar but detail differences exist
        // eg 0x083f below is 0x08ff in the unmute/volup stage

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        // why is this here??
        // this sets the input nid 0x02 (but not 0x03)

        // this seems to be setup for node 0x02 chain - which seems to use node 0x24 and amps 0x64 and 0x62

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00224033
//      snd_hda:     stream format 2 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]


        // so apple seems to convert all input audio to 4 channel, 44.1 kHz, 24 bits per channel with higher level processing
        // (as seen from node 0x2, 0x3 setups)
        // the digital data is streamed over the PCI bus to the 8409 HDA where its converted to a digital TDM stream over
        // the interal i2c bus to the amplifiers
        // the following seems to be setting up the TDM conversion by coef writes to the vendor node

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 4823 ); //   coef read 4823
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000000, 4827 ); //   coef write 4827

        // this is a different order June 2019

//      snd_hda: # AppleHDATDMBusManagerCS8409::setSampleRate: 
        // codes from windows cs4208_38.inf file
        // 0x0001 undocumented (0x0066 = ASP1/2_EN = 1, ASP1/2_STP = 1 ie ASP1_EN = 0x40, ASP2_EN = 0x20, ASP1_STP = 0x4, ASP2_STP = 0x2)
        // 0x0005 0x0001 SCDIV 1:4 (0x005a = ASP1: MCEN = 0, FSD = 010 (0x40), SCPOL_IN/OUT = 1 (0x10), SCDIV = 1:4 ie 0x0-0xf)
        // 0x0004 0x08ff SC_SRCSEL? = PLL1, LCPR = 0xff (0x28FF = (ASP1: MC/SC_SRCSEL = PLL1, LCPR = FFh), 0x2801 = (ASP1: MC/SC_SRCSEL = PLL1, LCPR = 01h))
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 4832 ); // coef write mask 4832
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000000, 4838 ); // coef write mask 4838
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x0000083f, 4844 ); // coef write mask 4844
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0xundef, 0x00000000, 4832 ); // coef write mask 4832
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000000, 4838 ); // coef write mask 4838
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0xundef, 0x0000083f, 4844 ); // coef write mask 4844

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath:
        // 0x0019 0x0800 = (ASP1.A: TX.LAP = 0, TX.LSZ = 24 bits, TX.LCS = 0)
        // 0x001a 0x0820 = (ASP1.A: TX.RAP = 0, TX.RSZ = 24 bits, TX.RCS = 32)
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008000, 4851 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 4851
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x0800, 0x00000000, 4855 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 4855
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008000, 4859 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 4859
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x0820, 0x00000000, 4863 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 4863

        // 0x0000 0xb000 = PLL2_EN (0x2000) PLL1_EN (0x1000) I2C disabled
        // 0x0004 0x08ff SC_SRCSEL? = PLL1, LCPR = 0xff (0x28FF = (ASP1: MC/SC_SRCSEL = PLL1, LCPR = FFh), 0x2801 = (ASP1: MC/SC_SRCSEL = PLL1, LCPR = 01h))
        // 0x0000 0x9000 = PLL1_EN (0x1000) I2C disabled
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4867 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 4867
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0xb000, 0x00000000, 4871 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 4871
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0004, 0x0000, 0x000008ff, 4875 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 4875
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x00000000, 4879 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 4879
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4883 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 4883

        // 0x0003 0x8000 = (ASP1: LCHI = 00h)
        // 0x0005 0x0001 = SCDIV = 1:4 (0x005A = (ASP1: MCEN = 0, FSD = 010 (0x40), SCPOL_IN/OUT = 1 (0x10), SCDIV = 1:4))
        // 0x0082 0x5401 = ASP1_xxx_EN (0x4000) ASP1_xxx_EN (0x1000) ASP1_xxx_EN (0x400) DMIC1_SCL_EN = 1 (0xFC01 = (ASP1/2_xxx_EN = 1, ASP1/2_MCLK_EN = 0, DMIC1_SCL_EN = 1))
        // 0x0002 0x0280 = ASP2_BUS_IDLE (0x02) GPIO_I2C (0x0A80 = (ASP1/2_BUS_IDLE = 10, +GPIO_I2C))
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0x0000801f, 4887 ); // coef write mask 4887
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 4893 ); // coef write mask 4893
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0x00000001, 4899 ); // coef write mask 4899
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0x00000080, 4905 ); // coef write mask 4905
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0xundef, 0x0000801f, 4887 ); // coef write mask 4887
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 4893 ); // coef write mask 4893
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0xundef, 0x00000001, 4899 ); // coef write mask 4899
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0xundef, 0x00000080, 4905 ); // coef write mask 4905

        // 0x0001 undocumented (0x0066 = ASP1/2_EN = 1, ASP1/2_STP = 1 ie ASP1_EN = 0x40, ASP2_EN = 0x20, ASP1_STP = 0x4, ASP2_STP = 0x2)
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 4911 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 4911
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000000, 4915 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 4915

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        // 0x0019 0x0800 = (ASP1.A: TX.LAP = 0, TX.LSZ = 24 bits, TX.LCS = 0)
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 4919 ); //   coef read 4919

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        // all these undocumented
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 4924 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 4924
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 4928 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 4928
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 4932 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 4932

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 4935

        // enable output node 0x24

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 4939); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02470740
//      snd_hda:     36 ['AC_PINCTL_OUT_EN']

}


static void setup_amps_6462(struct hda_codec *codec)
{
        //int retval;


        // HPFDCBlocker new as of June 2019

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4943 ); // i2cWrite  coef read 4943
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4947 ); // i2cWrite  coef write 4947
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 4951 ); // i2cWrite  coef write 4951
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 4955 ); // i2cWrite  coef write 4955
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4959 ); // i2cWrite  coef read 4959
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4963 ); // i2cWrite  coef read 4963
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4967 ); // i2cWrite  coef read 4967
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4971 ); // i2cWrite  coef write 4971
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4978 ); // i2cWrite  coef read 4978
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4982 ); // i2cWrite  coef write 4982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 4986 ); // i2cWrite  coef write 4986
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 4990 ); // i2cWrite  coef write 4990
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4994 ); // i2cWrite  coef read 4994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4998 ); // i2cWrite  coef read 4998
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5002 ); // i2cWrite  coef read 5002
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5006 ); // i2cWrite  coef write 5006
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5013 ); // i2cWrite  coef read 5013
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5017 ); // i2cWrite  coef write 5017
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5021 ); // i2cWrite  coef write 5021
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 5025 ); // i2cWrite  coef write 5025
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5029 ); // i2cWrite  coef read 5029
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5033 ); // i2cWrite  coef read 5033
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5037 ); // i2cWrite  coef read 5037
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5041 ); // i2cWrite  coef write 5041
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1501 i2c data 0x0001   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0015, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5048 ); // i2cWrite  coef read 5048
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5052 ); // i2cWrite  coef write 5052
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5056 ); // i2cWrite  coef write 5056
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1501, 0x00000000, 5060 ); // i2cWrite  coef write 5060
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5064 ); // i2cWrite  coef read 5064
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5068 ); // i2cWrite  coef read 5068
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5072 ); // i2cWrite  coef read 5072
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5076 ); // i2cWrite  coef write 5076
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5083 ); // i2cWrite  coef read 5083
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5087 ); // i2cWrite  coef write 5087
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5091 ); // i2cWrite  coef write 5091
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 5095 ); // i2cWrite  coef write 5095
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5099 ); // i2cWrite  coef read 5099
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5103 ); // i2cWrite  coef read 5103
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5107 ); // i2cWrite  coef read 5107
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5111 ); // i2cWrite  coef write 5111
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1800 i2c data 0x0000   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0018, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5118 ); // i2cWrite  coef read 5118
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5122 ); // i2cWrite  coef write 5122
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5126 ); // i2cWrite  coef write 5126
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1800, 0x00000000, 5130 ); // i2cWrite  coef write 5130
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5134 ); // i2cWrite  coef read 5134
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5138 ); // i2cWrite  coef read 5138
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5142 ); // i2cWrite  coef read 5142
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5146 ); // i2cWrite  coef write 5146
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5153 ); // i2cWrite  coef read 5153
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5157 ); // i2cWrite  coef write 5157
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5161 ); // i2cWrite  coef write 5161
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 5165 ); // i2cWrite  coef write 5165
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5169 ); // i2cWrite  coef read 5169
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5173 ); // i2cWrite  coef read 5173
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5177 ); // i2cWrite  coef read 5177
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5181 ); // i2cWrite  coef write 5181
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5188 ); // i2cWrite  coef read 5188
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5192 ); // i2cWrite  coef write 5192
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5196 ); // i2cWrite  coef write 5196
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 5200 ); // i2cWrite  coef write 5200
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5204 ); // i2cWrite  coef read 5204
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5208 ); // i2cWrite  coef read 5208
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5212 ); // i2cWrite  coef read 5212
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5216 ); // i2cWrite  coef write 5216
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5223 ); // i2cWrite  coef read 5223
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5227 ); // i2cWrite  coef write 5227
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5231 ); // i2cWrite  coef write 5231
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 5235 ); // i2cWrite  coef write 5235
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5239 ); // i2cWrite  coef read 5239
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5243 ); // i2cWrite  coef read 5243
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5247 ); // i2cWrite  coef read 5247
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5251 ); // i2cWrite  coef write 5251
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5258 ); // i2cWrite  coef read 5258
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5262 ); // i2cWrite  coef write 5262
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5266 ); // i2cWrite  coef write 5266
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 5270 ); // i2cWrite  coef write 5270
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5274 ); // i2cWrite  coef read 5274
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5278 ); // i2cWrite  coef read 5278
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5282 ); // i2cWrite  coef read 5282
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5286 ); // i2cWrite  coef write 5286
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5293 ); // i2cWrite  coef read 5293
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5297 ); // i2cWrite  coef write 5297
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5301 ); // i2cWrite  coef write 5301
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 5305 ); // i2cWrite  coef write 5305
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5309 ); // i2cWrite  coef read 5309
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5313 ); // i2cWrite  coef read 5313
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5317 ); // i2cWrite  coef read 5317
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5321 ); // i2cWrite  coef write 5321
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5328 ); // i2cWrite  coef read 5328
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5332 ); // i2cWrite  coef write 5332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5336 ); // i2cWrite  coef write 5336
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 5340 ); // i2cWrite  coef write 5340
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5344 ); // i2cWrite  coef read 5344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5348 ); // i2cWrite  coef read 5348
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5352 ); // i2cWrite  coef read 5352
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5356 ); // i2cWrite  coef write 5356
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x1100 i2c data 0x1108   reg anal: PCMSampleSetup          : 48kHz
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5363 ); // i2cRead  coef read 5363
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5367 ); // i2cRead  coef write 5367
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5371 ); // i2cRead  coef write 5371
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 5375 ); // i2cRead  coef write 5375
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5379 ); // i2cRead  coef read 5379
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5383 ); // i2cRead  coef read 5383
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001108, 5387 ); // i2cRead  coef read 5387
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5391 ); // i2cRead  coef read 5391
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5395 ); // i2cRead  coef write 5395
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5402 ); // i2cWrite  coef read 5402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5406 ); // i2cWrite  coef write 5406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 5410 ); // i2cWrite  coef write 5410
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 5414 ); // i2cWrite  coef write 5414
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5418 ); // i2cWrite  coef read 5418
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5422 ); // i2cWrite  coef read 5422
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5426 ); // i2cWrite  coef read 5426
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5430 ); // i2cWrite  coef write 5430
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5437 ); // i2cWrite  coef read 5437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5441 ); // i2cWrite  coef write 5441
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5445 ); // i2cWrite  coef write 5445
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 5449 ); // i2cWrite  coef write 5449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5453 ); // i2cWrite  coef read 5453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5457 ); // i2cWrite  coef read 5457
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5461 ); // i2cWrite  coef read 5461
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5465 ); // i2cWrite  coef write 5465
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5472 ); // i2cWrite  coef read 5472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5476 ); // i2cWrite  coef write 5476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5480 ); // i2cWrite  coef write 5480
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 5484 ); // i2cWrite  coef write 5484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5488 ); // i2cWrite  coef read 5488
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5492 ); // i2cWrite  coef read 5492
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5496 ); // i2cWrite  coef read 5496
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5500 ); // i2cWrite  coef write 5500
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5507 ); // i2cWrite  coef read 5507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5511 ); // i2cWrite  coef write 5511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5515 ); // i2cWrite  coef write 5515
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 5519 ); // i2cWrite  coef write 5519
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5523 ); // i2cWrite  coef read 5523
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5527 ); // i2cWrite  coef read 5527
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5531 ); // i2cWrite  coef read 5531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5535 ); // i2cWrite  coef write 5535
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1502 i2c data 0x0002   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0015, 0x0002, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5542 ); // i2cWrite  coef read 5542
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5546 ); // i2cWrite  coef write 5546
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5550 ); // i2cWrite  coef write 5550
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1502, 0x00000000, 5554 ); // i2cWrite  coef write 5554
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5558 ); // i2cWrite  coef read 5558
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5562 ); // i2cWrite  coef read 5562
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5566 ); // i2cWrite  coef read 5566
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5570 ); // i2cWrite  coef write 5570
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5577 ); // i2cWrite  coef read 5577
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5581 ); // i2cWrite  coef write 5581
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5585 ); // i2cWrite  coef write 5585
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 5589 ); // i2cWrite  coef write 5589
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5593 ); // i2cWrite  coef read 5593
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5597 ); // i2cWrite  coef read 5597
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5601 ); // i2cWrite  coef read 5601
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5605 ); // i2cWrite  coef write 5605
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1801 i2c data 0x0001   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0018, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5612 ); // i2cWrite  coef read 5612
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5616 ); // i2cWrite  coef write 5616
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5620 ); // i2cWrite  coef write 5620
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1801, 0x00000000, 5624 ); // i2cWrite  coef write 5624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5628 ); // i2cWrite  coef read 5628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5632 ); // i2cWrite  coef read 5632
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5636 ); // i2cWrite  coef read 5636
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5640 ); // i2cWrite  coef write 5640
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5647 ); // i2cWrite  coef read 5647
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5651 ); // i2cWrite  coef write 5651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5655 ); // i2cWrite  coef write 5655
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 5659 ); // i2cWrite  coef write 5659
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5663 ); // i2cWrite  coef read 5663
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5667 ); // i2cWrite  coef read 5667
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5671 ); // i2cWrite  coef read 5671
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5675 ); // i2cWrite  coef write 5675
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5682 ); // i2cWrite  coef read 5682
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5686 ); // i2cWrite  coef write 5686
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5690 ); // i2cWrite  coef write 5690
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 5694 ); // i2cWrite  coef write 5694
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5698 ); // i2cWrite  coef read 5698
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5702 ); // i2cWrite  coef read 5702
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5706 ); // i2cWrite  coef read 5706
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5710 ); // i2cWrite  coef write 5710
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5717 ); // i2cWrite  coef read 5717
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5721 ); // i2cWrite  coef write 5721
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5725 ); // i2cWrite  coef write 5725
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 5729 ); // i2cWrite  coef write 5729
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5733 ); // i2cWrite  coef read 5733
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5737 ); // i2cWrite  coef read 5737
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5741 ); // i2cWrite  coef read 5741
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5745 ); // i2cWrite  coef write 5745
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5752 ); // i2cWrite  coef read 5752
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5756 ); // i2cWrite  coef write 5756
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5760 ); // i2cWrite  coef write 5760
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 5764 ); // i2cWrite  coef write 5764
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5768 ); // i2cWrite  coef read 5768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5772 ); // i2cWrite  coef read 5772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5776 ); // i2cWrite  coef read 5776
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5780 ); // i2cWrite  coef write 5780
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5787 ); // i2cWrite  coef read 5787
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5791 ); // i2cWrite  coef write 5791
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5795 ); // i2cWrite  coef write 5795
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 5799 ); // i2cWrite  coef write 5799
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5803 ); // i2cWrite  coef read 5803
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5807 ); // i2cWrite  coef read 5807
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5811 ); // i2cWrite  coef read 5811
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5815 ); // i2cWrite  coef write 5815
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5822 ); // i2cWrite  coef read 5822
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5826 ); // i2cWrite  coef write 5826
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5830 ); // i2cWrite  coef write 5830
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 5834 ); // i2cWrite  coef write 5834
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5838 ); // i2cWrite  coef read 5838
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5842 ); // i2cWrite  coef read 5842
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5846 ); // i2cWrite  coef read 5846
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5850 ); // i2cWrite  coef write 5850
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x1100 i2c data 0x1108   reg anal: PCMSampleSetup          : 48kHz
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5857 ); // i2cRead  coef read 5857
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5861 ); // i2cRead  coef write 5861
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5865 ); // i2cRead  coef write 5865
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 5869 ); // i2cRead  coef write 5869
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5873 ); // i2cRead  coef read 5873
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5877 ); // i2cRead  coef read 5877
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001108, 5881 ); // i2cRead  coef read 5881
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5885 ); // i2cRead  coef read 5885
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5889 ); // i2cRead  coef write 5889
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5896 ); // i2cWrite  coef read 5896
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5900 ); // i2cWrite  coef write 5900
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 5904 ); // i2cWrite  coef write 5904
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 5908 ); // i2cWrite  coef write 5908
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5912 ); // i2cWrite  coef read 5912
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5916 ); // i2cWrite  coef read 5916
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5920 ); // i2cWrite  coef read 5920
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 5924 ); // i2cWrite  coef write 5924
//      snd_hda i2cWrite end

}



static void setup_TDM_7472(struct hda_codec *codec)
{
        int retval;

        // so this seems to be where we see the same code as in unmute and volup
        // this seems to be setup for node 0x03 chain - which seems to use node 0x25 and amps 0x74 and 0x72

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00324033
//      snd_hda:     stream format 3 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000002); // 0x00370602
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 0)]

        // 0x001b 0x0840 = (ASP1.B: TX.LAP = 0, TX.LSZ = 24 bits, TX.LCS = 64)
        // 0x001c 0x0860 = (ASP1.B: TX.RAP = 0, TX.RSZ = 24 bits, TX.RCS = 96)
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008000, 5934 ); //   coef read 5934
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x0840, 0x00000000, 5938 ); //   coef write 5938
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008000, 5942 ); //   coef read 5942
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x0860, 0x00000000, 5946 ); //   coef write 5946

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        // 0x0019 0x0800 = (ASP1.A: TX.LAP = 0, TX.LSZ = 24 bits, TX.LCS = 0)
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 5950 ); //   coef read 5950

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 5955 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 5955
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 5959 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 5959
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 5963 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 5963

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 5966


        // enable output on node 0x25

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 5970); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02570740
//      snd_hda:     37 ['AC_PINCTL_OUT_EN']

}


static void setup_amps_7472(struct hda_codec *codec)
{
        //int retval;


//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 5974 ); // i2cWrite  coef read 5974
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 5978 ); // i2cWrite  coef write 5978
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 5982 ); // i2cWrite  coef write 5982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 5986 ); // i2cWrite  coef write 5986
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5990 ); // i2cWrite  coef read 5990
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 5994 ); // i2cWrite  coef read 5994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 5998 ); // i2cWrite  coef read 5998
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6002 ); // i2cWrite  coef write 6002
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6009 ); // i2cWrite  coef read 6009
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6013 ); // i2cWrite  coef write 6013
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6017 ); // i2cWrite  coef write 6017
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 6021 ); // i2cWrite  coef write 6021
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6025 ); // i2cWrite  coef read 6025
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6029 ); // i2cWrite  coef read 6029
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6033 ); // i2cWrite  coef read 6033
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6037 ); // i2cWrite  coef write 6037
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6044 ); // i2cWrite  coef read 6044
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6048 ); // i2cWrite  coef write 6048
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6052 ); // i2cWrite  coef write 6052
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 6056 ); // i2cWrite  coef write 6056
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6060 ); // i2cWrite  coef read 6060
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6064 ); // i2cWrite  coef read 6064
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6068 ); // i2cWrite  coef read 6068
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6072 ); // i2cWrite  coef write 6072
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1504 i2c data 0x0004   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0015, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6079 ); // i2cWrite  coef read 6079
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6083 ); // i2cWrite  coef write 6083
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6087 ); // i2cWrite  coef write 6087
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1504, 0x00000000, 6091 ); // i2cWrite  coef write 6091
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6095 ); // i2cWrite  coef read 6095
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6099 ); // i2cWrite  coef read 6099
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6103 ); // i2cWrite  coef read 6103
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6107 ); // i2cWrite  coef write 6107
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6114 ); // i2cWrite  coef read 6114
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6118 ); // i2cWrite  coef write 6118
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6122 ); // i2cWrite  coef write 6122
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 6126 ); // i2cWrite  coef write 6126
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6130 ); // i2cWrite  coef read 6130
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6134 ); // i2cWrite  coef read 6134
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6138 ); // i2cWrite  coef read 6138
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6142 ); // i2cWrite  coef write 6142
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1802 i2c data 0x0002   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0018, 0x0002, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6149 ); // i2cWrite  coef read 6149
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6153 ); // i2cWrite  coef write 6153
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6157 ); // i2cWrite  coef write 6157
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1802, 0x00000000, 6161 ); // i2cWrite  coef write 6161
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6165 ); // i2cWrite  coef read 6165
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6169 ); // i2cWrite  coef read 6169
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6173 ); // i2cWrite  coef read 6173
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6177 ); // i2cWrite  coef write 6177
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6184 ); // i2cWrite  coef read 6184
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6188 ); // i2cWrite  coef write 6188
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6192 ); // i2cWrite  coef write 6192
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 6196 ); // i2cWrite  coef write 6196
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6200 ); // i2cWrite  coef read 6200
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6204 ); // i2cWrite  coef read 6204
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6208 ); // i2cWrite  coef read 6208
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6212 ); // i2cWrite  coef write 6212
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6219 ); // i2cWrite  coef read 6219
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6223 ); // i2cWrite  coef write 6223
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6227 ); // i2cWrite  coef write 6227
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 6231 ); // i2cWrite  coef write 6231
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6235 ); // i2cWrite  coef read 6235
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6239 ); // i2cWrite  coef read 6239
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6243 ); // i2cWrite  coef read 6243
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6247 ); // i2cWrite  coef write 6247
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6254 ); // i2cWrite  coef read 6254
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6258 ); // i2cWrite  coef write 6258
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6262 ); // i2cWrite  coef write 6262
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 6266 ); // i2cWrite  coef write 6266
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6270 ); // i2cWrite  coef read 6270
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6274 ); // i2cWrite  coef read 6274
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6278 ); // i2cWrite  coef read 6278
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6282 ); // i2cWrite  coef write 6282
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6289 ); // i2cWrite  coef read 6289
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6293 ); // i2cWrite  coef write 6293
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6297 ); // i2cWrite  coef write 6297
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 6301 ); // i2cWrite  coef write 6301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6305 ); // i2cWrite  coef read 6305
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6309 ); // i2cWrite  coef read 6309
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6313 ); // i2cWrite  coef read 6313
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6317 ); // i2cWrite  coef write 6317
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6324 ); // i2cWrite  coef read 6324
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6328 ); // i2cWrite  coef write 6328
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6332 ); // i2cWrite  coef write 6332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 6336 ); // i2cWrite  coef write 6336
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6340 ); // i2cWrite  coef read 6340
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6344 ); // i2cWrite  coef read 6344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6348 ); // i2cWrite  coef read 6348
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6352 ); // i2cWrite  coef write 6352
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6359 ); // i2cWrite  coef read 6359
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6363 ); // i2cWrite  coef write 6363
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6367 ); // i2cWrite  coef write 6367
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 6371 ); // i2cWrite  coef write 6371
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6375 ); // i2cWrite  coef read 6375
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6379 ); // i2cWrite  coef read 6379
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6383 ); // i2cWrite  coef read 6383
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6387 ); // i2cWrite  coef write 6387
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x1100 i2c data 0x1108   reg anal: PCMSampleSetup          : 48kHz
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6394 ); // i2cRead  coef read 6394
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6398 ); // i2cRead  coef write 6398
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6402 ); // i2cRead  coef write 6402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 6406 ); // i2cRead  coef write 6406
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6410 ); // i2cRead  coef read 6410
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6414 ); // i2cRead  coef read 6414
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001108, 6418 ); // i2cRead  coef read 6418
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6422 ); // i2cRead  coef read 6422
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6426 ); // i2cRead  coef write 6426
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6433 ); // i2cWrite  coef read 6433
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6437 ); // i2cWrite  coef write 6437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 6441 ); // i2cWrite  coef write 6441
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 6445 ); // i2cWrite  coef write 6445
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6449 ); // i2cWrite  coef read 6449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6453 ); // i2cWrite  coef read 6453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6457 ); // i2cWrite  coef read 6457
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6461 ); // i2cWrite  coef write 6461
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6468 ); // i2cWrite  coef read 6468
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6472 ); // i2cWrite  coef write 6472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6476 ); // i2cWrite  coef write 6476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 6480 ); // i2cWrite  coef write 6480
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6484 ); // i2cWrite  coef read 6484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6488 ); // i2cWrite  coef read 6488
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6492 ); // i2cWrite  coef read 6492
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6496 ); // i2cWrite  coef write 6496
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6503 ); // i2cWrite  coef read 6503
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6507 ); // i2cWrite  coef write 6507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6511 ); // i2cWrite  coef write 6511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 6515 ); // i2cWrite  coef write 6515
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6519 ); // i2cWrite  coef read 6519
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6523 ); // i2cWrite  coef read 6523
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6527 ); // i2cWrite  coef read 6527
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6531 ); // i2cWrite  coef write 6531
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6538 ); // i2cWrite  coef read 6538
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6542 ); // i2cWrite  coef write 6542
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6546 ); // i2cWrite  coef write 6546
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 6550 ); // i2cWrite  coef write 6550
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6554 ); // i2cWrite  coef read 6554
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6558 ); // i2cWrite  coef read 6558
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6562 ); // i2cWrite  coef read 6562
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6566 ); // i2cWrite  coef write 6566
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1508 i2c data 0x0008   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0015, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6573 ); // i2cWrite  coef read 6573
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6577 ); // i2cWrite  coef write 6577
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6581 ); // i2cWrite  coef write 6581
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1508, 0x00000000, 6585 ); // i2cWrite  coef write 6585
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6589 ); // i2cWrite  coef read 6589
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6593 ); // i2cWrite  coef read 6593
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6597 ); // i2cWrite  coef read 6597
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6601 ); // i2cWrite  coef write 6601
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6608 ); // i2cWrite  coef read 6608
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6612 ); // i2cWrite  coef write 6612
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6616 ); // i2cWrite  coef write 6616
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 6620 ); // i2cWrite  coef write 6620
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6624 ); // i2cWrite  coef read 6624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6628 ); // i2cWrite  coef read 6628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6632 ); // i2cWrite  coef read 6632
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6636 ); // i2cWrite  coef write 6636
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1803 i2c data 0x0003   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0018, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6643 ); // i2cWrite  coef read 6643
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6647 ); // i2cWrite  coef write 6647
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6651 ); // i2cWrite  coef write 6651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1803, 0x00000000, 6655 ); // i2cWrite  coef write 6655
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6659 ); // i2cWrite  coef read 6659
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6663 ); // i2cWrite  coef read 6663
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6667 ); // i2cWrite  coef read 6667
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6671 ); // i2cWrite  coef write 6671
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6678 ); // i2cWrite  coef read 6678
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6682 ); // i2cWrite  coef write 6682
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6686 ); // i2cWrite  coef write 6686
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 6690 ); // i2cWrite  coef write 6690
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6694 ); // i2cWrite  coef read 6694
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6698 ); // i2cWrite  coef read 6698
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6702 ); // i2cWrite  coef read 6702
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6706 ); // i2cWrite  coef write 6706
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6713 ); // i2cWrite  coef read 6713
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6717 ); // i2cWrite  coef write 6717
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6721 ); // i2cWrite  coef write 6721
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 6725 ); // i2cWrite  coef write 6725
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6729 ); // i2cWrite  coef read 6729
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6733 ); // i2cWrite  coef read 6733
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6737 ); // i2cWrite  coef read 6737
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6741 ); // i2cWrite  coef write 6741
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6748 ); // i2cWrite  coef read 6748
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6752 ); // i2cWrite  coef write 6752
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6756 ); // i2cWrite  coef write 6756
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 6760 ); // i2cWrite  coef write 6760
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6764 ); // i2cWrite  coef read 6764
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6768 ); // i2cWrite  coef read 6768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6772 ); // i2cWrite  coef read 6772
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6776 ); // i2cWrite  coef write 6776
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6783 ); // i2cWrite  coef read 6783
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6787 ); // i2cWrite  coef write 6787
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6791 ); // i2cWrite  coef write 6791
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 6795 ); // i2cWrite  coef write 6795
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6799 ); // i2cWrite  coef read 6799
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6803 ); // i2cWrite  coef read 6803
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6807 ); // i2cWrite  coef read 6807
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6811 ); // i2cWrite  coef write 6811
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6818 ); // i2cWrite  coef read 6818
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6822 ); // i2cWrite  coef write 6822
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6826 ); // i2cWrite  coef write 6826
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 6830 ); // i2cWrite  coef write 6830
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6834 ); // i2cWrite  coef read 6834
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6838 ); // i2cWrite  coef read 6838
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6842 ); // i2cWrite  coef read 6842
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6846 ); // i2cWrite  coef write 6846
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6853 ); // i2cWrite  coef read 6853
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6857 ); // i2cWrite  coef write 6857
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6861 ); // i2cWrite  coef write 6861
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 6865 ); // i2cWrite  coef write 6865
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6869 ); // i2cWrite  coef read 6869
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6873 ); // i2cWrite  coef read 6873
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6877 ); // i2cWrite  coef read 6877
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6881 ); // i2cWrite  coef write 6881
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x1100 i2c data 0x1108   reg anal: PCMSampleSetup          : 48kHz
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6888 ); // i2cRead  coef read 6888
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6892 ); // i2cRead  coef write 6892
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6896 ); // i2cRead  coef write 6896
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 6900 ); // i2cRead  coef write 6900
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6904 ); // i2cRead  coef read 6904
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6908 ); // i2cRead  coef read 6908
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001108, 6912 ); // i2cRead  coef read 6912
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6916 ); // i2cRead  coef read 6916
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6920 ); // i2cRead  coef write 6920
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 6927 ); // i2cWrite  coef read 6927
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 6931 ); // i2cWrite  coef write 6931
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 6935 ); // i2cWrite  coef write 6935
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 6939 ); // i2cWrite  coef write 6939
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6943 ); // i2cWrite  coef read 6943
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 6947 ); // i2cWrite  coef read 6947
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 6951 ); // i2cWrite  coef read 6951
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 6955 ); // i2cWrite  coef write 6955
//      snd_hda i2cWrite end

}

static void sync_converters(struct hda_codec *codec)
{
        int retval;


//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        // remove normal channel mapping

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 6961); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0x00000000, 6963 ); // coef write mask 6963
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0xundef, 0x00000000, 6963 ); // coef write mask 6963

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000002, 6969); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000001, 6971 ); // coef write mask 6971
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000001, 6971 ); // coef write mask 6971


        // and reset back to normal channel mapping

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000002); // 0x00370602
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 0)]


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void sync_converters1(struct hda_codec *codec)
{
        int retval;

        // this has some differences from the above
        // is this for disabling?? desyncing doesnt seem to be the right name

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);


//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 6987); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0x00000003, 6989 ); // coef write mask 6989
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0xundef, 0x00000003, 6989 ); // coef write mask 6989

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 6995); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000002, 6997 ); // coef write mask 6997
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0xundef, 0x00000002, 6997 ); // coef write mask 6997

        // this is extra for the "disable"
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 7003 ); //   coef read 7003
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 7007 ); //   coef read 7007

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000220, 7011 ); // coef write mask 7011
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0xundef, 0x00000220, 7011 ); // coef write mask 7011

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

}

// so in previous version there was a putative configureTDMUR call here - thats moved to later now
// it could have been disabling the TDM

static void amps_disable_6462(struct hda_codec *codec)
{
        //int retval;

        // - boot code split
        // specific boot only code here

        // this disables the amps


//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7021 ); // i2cWrite  coef read 7021
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7025 ); // i2cWrite  coef write 7025
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 7029 ); // i2cWrite  coef write 7029
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 7033 ); // i2cWrite  coef write 7033
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7037 ); // i2cWrite  coef read 7037
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7041 ); // i2cWrite  coef read 7041
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7045 ); // i2cWrite  coef read 7045
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7049 ); // i2cWrite  coef write 7049
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7056 ); // i2cRead  coef read 7056
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7060 ); // i2cRead  coef write 7060
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 7064 ); // i2cRead  coef write 7064
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 7068 ); // i2cRead  coef write 7068
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7072 ); // i2cRead  coef read 7072
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7076 ); // i2cRead  coef read 7076
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 7080 ); // i2cRead  coef read 7080
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7084 ); // i2cRead  coef read 7084
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7088 ); // i2cRead  coef write 7088
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7095 ); // i2cRead  coef read 7095
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7099 ); // i2cRead  coef write 7099
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 7103 ); // i2cRead  coef write 7103
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 7107 ); // i2cRead  coef write 7107
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7111 ); // i2cRead  coef read 7111
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7115 ); // i2cRead  coef read 7115
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 7119 ); // i2cRead  coef read 7119
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7123 ); // i2cRead  coef read 7123
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7127 ); // i2cRead  coef write 7127
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7134 ); // i2cRead  coef read 7134
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7138 ); // i2cRead  coef write 7138
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 7142 ); // i2cRead  coef write 7142
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 7146 ); // i2cRead  coef write 7146
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7150 ); // i2cRead  coef read 7150
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7154 ); // i2cRead  coef read 7154
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 7158 ); // i2cRead  coef read 7158
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7162 ); // i2cRead  coef read 7162
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7166 ); // i2cRead  coef write 7166
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7173 ); // i2cWrite  coef read 7173
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7177 ); // i2cWrite  coef write 7177
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 7181 ); // i2cWrite  coef write 7181
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 7185 ); // i2cWrite  coef write 7185
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7189 ); // i2cWrite  coef read 7189
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7193 ); // i2cWrite  coef read 7193
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7197 ); // i2cWrite  coef read 7197
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7201 ); // i2cWrite  coef write 7201
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7208 ); // i2cRead  coef read 7208
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7212 ); // i2cRead  coef write 7212
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 7216 ); // i2cRead  coef write 7216
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 7220 ); // i2cRead  coef write 7220
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7224 ); // i2cRead  coef read 7224
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7228 ); // i2cRead  coef read 7228
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 7232 ); // i2cRead  coef read 7232
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7236 ); // i2cRead  coef read 7236
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7240 ); // i2cRead  coef write 7240
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7247 ); // i2cRead  coef read 7247
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7251 ); // i2cRead  coef write 7251
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 7255 ); // i2cRead  coef write 7255
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 7259 ); // i2cRead  coef write 7259
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7263 ); // i2cRead  coef read 7263
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7267 ); // i2cRead  coef read 7267
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 7271 ); // i2cRead  coef read 7271
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7275 ); // i2cRead  coef read 7275
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7279 ); // i2cRead  coef write 7279
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7286 ); // i2cRead  coef read 7286
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7290 ); // i2cRead  coef write 7290
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 7294 ); // i2cRead  coef write 7294
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 7298 ); // i2cRead  coef write 7298
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7302 ); // i2cRead  coef read 7302
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7306 ); // i2cRead  coef read 7306
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 7310 ); // i2cRead  coef read 7310
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7314 ); // i2cRead  coef read 7314
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7318 ); // i2cRead  coef write 7318
//      snd_hda i2cRead end

}

static void putative_tdm_disable_6462(struct hda_codec *codec)
{
        int retval;

        // this could be disabling the TDM

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 7324 ); //   coef read 7324
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x8800, 0x00000000, 7328 ); //   coef write 7328

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000820, 7332 ); //   coef read 7332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x8820, 0x00000000, 7336 ); //   coef write 7336

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 7340 ); //   coef read 7340
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 7344 ); //   coef read 7344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 7348 ); //   coef read 7348

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 7353 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 7353
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 7357 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 7357
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 7361 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 7361

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 7364


        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00220000
//      snd_hda:     stream format 2 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 7370); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02470700
//      snd_hda:     36 []

}


static void amps_disable_7472(struct hda_codec *codec)
{
        //int retval;


//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7374 ); // i2cWrite  coef read 7374
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7378 ); // i2cWrite  coef write 7378
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 7382 ); // i2cWrite  coef write 7382
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 7386 ); // i2cWrite  coef write 7386
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7390 ); // i2cWrite  coef read 7390
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7394 ); // i2cWrite  coef read 7394
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7398 ); // i2cWrite  coef read 7398
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7402 ); // i2cWrite  coef write 7402
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7409 ); // i2cRead  coef read 7409
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7413 ); // i2cRead  coef write 7413
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 7417 ); // i2cRead  coef write 7417
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 7421 ); // i2cRead  coef write 7421
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7425 ); // i2cRead  coef read 7425
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7429 ); // i2cRead  coef read 7429
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 7433 ); // i2cRead  coef read 7433
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7437 ); // i2cRead  coef read 7437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7441 ); // i2cRead  coef write 7441
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7448 ); // i2cRead  coef read 7448
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7452 ); // i2cRead  coef write 7452
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 7456 ); // i2cRead  coef write 7456
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 7460 ); // i2cRead  coef write 7460
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7464 ); // i2cRead  coef read 7464
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7468 ); // i2cRead  coef read 7468
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 7472 ); // i2cRead  coef read 7472
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7476 ); // i2cRead  coef read 7476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7480 ); // i2cRead  coef write 7480
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7487 ); // i2cRead  coef read 7487
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7491 ); // i2cRead  coef write 7491
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 7495 ); // i2cRead  coef write 7495
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 7499 ); // i2cRead  coef write 7499
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7503 ); // i2cRead  coef read 7503
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7507 ); // i2cRead  coef read 7507
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 7511 ); // i2cRead  coef read 7511
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7515 ); // i2cRead  coef read 7515
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7519 ); // i2cRead  coef write 7519
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7526 ); // i2cWrite  coef read 7526
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7530 ); // i2cWrite  coef write 7530
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 7534 ); // i2cWrite  coef write 7534
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 7538 ); // i2cWrite  coef write 7538
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7542 ); // i2cWrite  coef read 7542
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7546 ); // i2cWrite  coef read 7546
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7550 ); // i2cWrite  coef read 7550
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7554 ); // i2cWrite  coef write 7554
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7561 ); // i2cRead  coef read 7561
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7565 ); // i2cRead  coef write 7565
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 7569 ); // i2cRead  coef write 7569
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 7573 ); // i2cRead  coef write 7573
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7577 ); // i2cRead  coef read 7577
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7581 ); // i2cRead  coef read 7581
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 7585 ); // i2cRead  coef read 7585
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7589 ); // i2cRead  coef read 7589
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7593 ); // i2cRead  coef write 7593
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7600 ); // i2cRead  coef read 7600
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7604 ); // i2cRead  coef write 7604
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 7608 ); // i2cRead  coef write 7608
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 7612 ); // i2cRead  coef write 7612
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7616 ); // i2cRead  coef read 7616
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7620 ); // i2cRead  coef read 7620
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 7624 ); // i2cRead  coef read 7624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7628 ); // i2cRead  coef read 7628
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7632 ); // i2cRead  coef write 7632
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 7639 ); // i2cRead  coef read 7639
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 7643 ); // i2cRead  coef write 7643
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 7647 ); // i2cRead  coef write 7647
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 7651 ); // i2cRead  coef write 7651
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7655 ); // i2cRead  coef read 7655
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 7659 ); // i2cRead  coef read 7659
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 7663 ); // i2cRead  coef read 7663
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 7667 ); // i2cRead  coef read 7667
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 7671 ); // i2cRead  coef write 7671
//      snd_hda i2cRead end

}


static void putative_tdm_disable_7472(struct hda_codec *codec)
{
        int retval;

        // this could be disabling the TDM

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 7677 ); //   coef read 7677
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x8840, 0x00000000, 7681 ); //   coef write 7681
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00000860, 7685 ); //   coef read 7685
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x8860, 0x00000000, 7689 ); //   coef write 7689

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00005401, 7693 ); // coef write mask 7693
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0xundef, 0x00005401, 7693 ); // coef write mask 7693

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000220, 7699 ); //   coef read 7699
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 7703 ); //   coef write 7703


        // AppleHDATDMBusManagerCS8409::setupTDMPath or disableTDMPath calls AppleHDATDMBusManagerCS8409::configureTDMUR
        // AppleHDATDMBusManagerCS8409::configureTDMUR only place calls this
        // this is AppleHDATDMBusManagerCS8409::tdmInUse
        // which reads from 0x19 to 0x57 in a loop if the snd_hda_coef_item returns 0 till the read value
        // does not have the word sign bit set (ie 0x8000) or finish all 0x57

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 7707 ); //   coef read 7707
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 7711 ); //   coef read 7711
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 7715 ); //   coef read 7715
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 7719 ); //   coef read 7719
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008000, 7723 ); //   coef read 7723
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 7727 ); //   coef read 7727
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008000, 7731 ); //   coef read 7731
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 7735 ); //   coef read 7735
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 7739 ); //   coef read 7739
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 7743 ); //   coef read 7743
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 7747 ); //   coef read 7747
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 7751 ); //   coef read 7751
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 7755 ); //   coef read 7755
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 7759 ); //   coef read 7759
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 7763 ); //   coef read 7763
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 7767 ); //   coef read 7767
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 7771 ); //   coef read 7771
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 7775 ); //   coef read 7775
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 7779 ); //   coef read 7779
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 7783 ); //   coef read 7783
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 7787 ); //   coef read 7787
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 7791 ); //   coef read 7791
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 7795 ); //   coef read 7795
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 7799 ); //   coef read 7799
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 7803 ); //   coef read 7803
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 7807 ); //   coef read 7807
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 7811 ); //   coef read 7811
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 7815 ); //   coef read 7815
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 7819 ); //   coef read 7819
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 7823 ); //   coef read 7823
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 7827 ); //   coef read 7827
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 7831 ); //   coef read 7831
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 7835 ); //   coef read 7835
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 7839 ); //   coef read 7839
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 7843 ); //   coef read 7843
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 7847 ); //   coef read 7847
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 7851 ); //   coef read 7851
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 7855 ); //   coef read 7855
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 7859 ); //   coef read 7859
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 7863 ); //   coef read 7863
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 7867 ); //   coef read 7867
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 7871 ); //   coef read 7871
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 7875 ); //   coef read 7875
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 7879 ); //   coef read 7879
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 7883 ); //   coef read 7883
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 7887 ); //   coef read 7887
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 7891 ); //   coef read 7891
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 7895 ); //   coef read 7895
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 7899 ); //   coef read 7899
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 7903 ); //   coef read 7903
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 7907 ); //   coef read 7907
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 7911 ); //   coef read 7911
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 7915 ); //   coef read 7915
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 7919 ); //   coef read 7919
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 7923 ); //   coef read 7923
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 7927 ); //   coef read 7927
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 7931 ); //   coef read 7931
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 7935 ); //   coef read 7935
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 7939 ); //   coef read 7939
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 7943 ); //   coef read 7943
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 7947 ); //   coef read 7947
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 7951 ); //   coef read 7951
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 7955 ); //   coef read 7955

        // AppleHDATDMBusManagerCS8409::configureTDMUR
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 7960 ); //   coef write 7960

        // this is new - setting to 0
        // only see this in AppleHDAWidgetCS8409::performPowerRailRestore
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00000000);


        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00320000
//      snd_hda:     stream format 3 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 7969); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02570700
//      snd_hda:     37 []

}

static void putative_enable1_TDM_6462(struct hda_codec *codec)
{
        //int retval;


        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00224033
//      snd_hda:     stream format 2 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 7974 ); //   coef read 7974
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 7978 ); //   coef write 7978

//      snd_hda: # AppleHDATDMBusManagerCS8409::setSampleRate: 
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000200, 7983 ); // coef write mask 7983
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 7989 ); // coef write mask 7989
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x000008ff, 7995 ); // coef write mask 7995
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0xundef, 0x00000200, 7983 ); // coef write mask 7983
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 7989 ); // coef write mask 7989
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0xundef, 0x000008ff, 7995 ); // coef write mask 7995

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 8002 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 8002
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x0800, 0x00000000, 8006 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 8006
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 8010 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 8010
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x0820, 0x00000000, 8014 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 8014

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8018 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 8018
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0xb000, 0x00000000, 8022 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 8022
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0004, 0x0000, 0x000008ff, 8026 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 8026
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x00000000, 8030 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 8030
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8034 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 8034

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0x00008000, 8038 ); // coef write mask 8038
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 8044 ); // coef write mask 8044
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0x00000001, 8050 ); // coef write mask 8050
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0x00000280, 8056 ); // coef write mask 8056
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0xundef, 0x00008000, 8038 ); // coef write mask 8038
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 8044 ); // coef write mask 8044
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0xundef, 0x00000001, 8050 ); // coef write mask 8050
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0xundef, 0x00000280, 8056 ); // coef write mask 8056

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 8062 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 8062
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000000, 8066 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 8066

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 8070 ); //   coef read 8070

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 8075 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 8075
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 8079 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 8079
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 8083 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 8083

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 8086

}

static void amps_disable2_6462(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8092 ); // i2cWrite  coef read 8092
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8096 ); // i2cWrite  coef write 8096
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8100 ); // i2cWrite  coef write 8100
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 8104 ); // i2cWrite  coef write 8104
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8108 ); // i2cWrite  coef read 8108
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8112 ); // i2cWrite  coef read 8112
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8116 ); // i2cWrite  coef read 8116
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8120 ); // i2cWrite  coef write 8120
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8127 ); // i2cRead  coef read 8127
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8131 ); // i2cRead  coef write 8131
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8135 ); // i2cRead  coef write 8135
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 8139 ); // i2cRead  coef write 8139
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8143 ); // i2cRead  coef read 8143
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8147 ); // i2cRead  coef read 8147
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 8151 ); // i2cRead  coef read 8151
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8155 ); // i2cRead  coef read 8155
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8159 ); // i2cRead  coef write 8159
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8166 ); // i2cRead  coef read 8166
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8170 ); // i2cRead  coef write 8170
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8174 ); // i2cRead  coef write 8174
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 8178 ); // i2cRead  coef write 8178
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8182 ); // i2cRead  coef read 8182
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8186 ); // i2cRead  coef read 8186
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 8190 ); // i2cRead  coef read 8190
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8194 ); // i2cRead  coef read 8194
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8198 ); // i2cRead  coef write 8198
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8205 ); // i2cRead  coef read 8205
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8209 ); // i2cRead  coef write 8209
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8213 ); // i2cRead  coef write 8213
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 8217 ); // i2cRead  coef write 8217
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8221 ); // i2cRead  coef read 8221
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8225 ); // i2cRead  coef read 8225
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 8229 ); // i2cRead  coef read 8229
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8233 ); // i2cRead  coef read 8233
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8237 ); // i2cRead  coef write 8237
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8244 ); // i2cWrite  coef read 8244
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8248 ); // i2cWrite  coef write 8248
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 8252 ); // i2cWrite  coef write 8252
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 8256 ); // i2cWrite  coef write 8256
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8260 ); // i2cWrite  coef read 8260
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8264 ); // i2cWrite  coef read 8264
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8268 ); // i2cWrite  coef read 8268
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8272 ); // i2cWrite  coef write 8272
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8279 ); // i2cRead  coef read 8279
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8283 ); // i2cRead  coef write 8283
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 8287 ); // i2cRead  coef write 8287
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 8291 ); // i2cRead  coef write 8291
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8295 ); // i2cRead  coef read 8295
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8299 ); // i2cRead  coef read 8299
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 8303 ); // i2cRead  coef read 8303
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8307 ); // i2cRead  coef read 8307
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8311 ); // i2cRead  coef write 8311
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8318 ); // i2cRead  coef read 8318
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8322 ); // i2cRead  coef write 8322
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 8326 ); // i2cRead  coef write 8326
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 8330 ); // i2cRead  coef write 8330
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8334 ); // i2cRead  coef read 8334
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8338 ); // i2cRead  coef read 8338
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 8342 ); // i2cRead  coef read 8342
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8346 ); // i2cRead  coef read 8346
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8350 ); // i2cRead  coef write 8350
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8357 ); // i2cRead  coef read 8357
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8361 ); // i2cRead  coef write 8361
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 8365 ); // i2cRead  coef write 8365
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 8369 ); // i2cRead  coef write 8369
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8373 ); // i2cRead  coef read 8373
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8377 ); // i2cRead  coef read 8377
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 8381 ); // i2cRead  coef read 8381
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8385 ); // i2cRead  coef read 8385
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8389 ); // i2cRead  coef write 8389
//      snd_hda i2cRead end

}

static void putative_enable1_TDM_7472(struct hda_codec *codec)
{

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00324033
//      snd_hda:     stream format 3 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 8398 ); //   coef read 8398
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x0840, 0x00000000, 8402 ); //   coef write 8402
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 8406 ); //   coef read 8406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x0860, 0x00000000, 8410 ); //   coef write 8410

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 8414 ); //   coef read 8414

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 8419 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 8419
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 8423 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 8423
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 8427 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 8427

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 8430

}


static void amps_disable2_7472(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8436 ); // i2cWrite  coef read 8436
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8440 ); // i2cWrite  coef write 8440
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 8444 ); // i2cWrite  coef write 8444
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 8448 ); // i2cWrite  coef write 8448
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8452 ); // i2cWrite  coef read 8452
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8456 ); // i2cWrite  coef read 8456
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8460 ); // i2cWrite  coef read 8460
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8464 ); // i2cWrite  coef write 8464
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8471 ); // i2cRead  coef read 8471
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8475 ); // i2cRead  coef write 8475
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 8479 ); // i2cRead  coef write 8479
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 8483 ); // i2cRead  coef write 8483
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8487 ); // i2cRead  coef read 8487
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8491 ); // i2cRead  coef read 8491
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 8495 ); // i2cRead  coef read 8495
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8499 ); // i2cRead  coef read 8499
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8503 ); // i2cRead  coef write 8503
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8510 ); // i2cRead  coef read 8510
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8514 ); // i2cRead  coef write 8514
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 8518 ); // i2cRead  coef write 8518
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 8522 ); // i2cRead  coef write 8522
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8526 ); // i2cRead  coef read 8526
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8530 ); // i2cRead  coef read 8530
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 8534 ); // i2cRead  coef read 8534
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8538 ); // i2cRead  coef read 8538
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8542 ); // i2cRead  coef write 8542
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8549 ); // i2cRead  coef read 8549
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8553 ); // i2cRead  coef write 8553
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 8557 ); // i2cRead  coef write 8557
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 8561 ); // i2cRead  coef write 8561
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8565 ); // i2cRead  coef read 8565
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8569 ); // i2cRead  coef read 8569
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 8573 ); // i2cRead  coef read 8573
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8577 ); // i2cRead  coef read 8577
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8581 ); // i2cRead  coef write 8581
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8588 ); // i2cWrite  coef read 8588
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8592 ); // i2cWrite  coef write 8592
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 8596 ); // i2cWrite  coef write 8596
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 8600 ); // i2cWrite  coef write 8600
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8604 ); // i2cWrite  coef read 8604
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8608 ); // i2cWrite  coef read 8608
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8612 ); // i2cWrite  coef read 8612
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8616 ); // i2cWrite  coef write 8616
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8623 ); // i2cRead  coef read 8623
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8627 ); // i2cRead  coef write 8627
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 8631 ); // i2cRead  coef write 8631
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 8635 ); // i2cRead  coef write 8635
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8639 ); // i2cRead  coef read 8639
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8643 ); // i2cRead  coef read 8643
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 8647 ); // i2cRead  coef read 8647
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8651 ); // i2cRead  coef read 8651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8655 ); // i2cRead  coef write 8655
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8662 ); // i2cRead  coef read 8662
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8666 ); // i2cRead  coef write 8666
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 8670 ); // i2cRead  coef write 8670
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 8674 ); // i2cRead  coef write 8674
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8678 ); // i2cRead  coef read 8678
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8682 ); // i2cRead  coef read 8682
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 8686 ); // i2cRead  coef read 8686
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8690 ); // i2cRead  coef read 8690
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8694 ); // i2cRead  coef write 8694
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8701 ); // i2cRead  coef read 8701
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8705 ); // i2cRead  coef write 8705
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 8709 ); // i2cRead  coef write 8709
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 8713 ); // i2cRead  coef write 8713
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8717 ); // i2cRead  coef read 8717
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8721 ); // i2cRead  coef read 8721
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 8725 ); // i2cRead  coef read 8725
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8729 ); // i2cRead  coef read 8729
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8733 ); // i2cRead  coef write 8733
//      snd_hda i2cRead end

}


static void sync_converters2(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 8739); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0x00000000, 8741 ); // coef write mask 8741
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0xundef, 0x00000000, 8741 ); // coef write mask 8741

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 8747); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000001, 8749 ); // coef write mask 8749
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000001, 8749 ); // coef write mask 8749

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

}

static void enable2_TDM2_6462(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00224033
//      snd_hda:     stream format 2 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 8763 ); //   coef read 8763
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x0800, 0x00000000, 8767 ); //   coef write 8767
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000820, 8771 ); //   coef read 8771
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x0820, 0x00000000, 8775 ); //   coef write 8775

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 8779 ); //   coef read 8779
//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 8784 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 8784
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 8788 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 8788
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 8792 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 8792

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 8795

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 8799); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02470740
//      snd_hda:     36 ['AC_PINCTL_OUT_EN']

}

static void amps_enable2_6462(struct hda_codec *codec)
{
        //int retval;


//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8803 ); // i2cWrite  coef read 8803
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8807 ); // i2cWrite  coef write 8807
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8811 ); // i2cWrite  coef write 8811
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 8815 ); // i2cWrite  coef write 8815
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8819 ); // i2cWrite  coef read 8819
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8823 ); // i2cWrite  coef read 8823
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8827 ); // i2cWrite  coef read 8827
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8831 ); // i2cWrite  coef write 8831
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8838 ); // i2cWrite  coef read 8838
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8842 ); // i2cWrite  coef write 8842
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8846 ); // i2cWrite  coef write 8846
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 8850 ); // i2cWrite  coef write 8850
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8854 ); // i2cWrite  coef read 8854
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8858 ); // i2cWrite  coef read 8858
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8862 ); // i2cWrite  coef read 8862
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8866 ); // i2cWrite  coef write 8866
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8873 ); // i2cWrite  coef read 8873
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8877 ); // i2cWrite  coef write 8877
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8881 ); // i2cWrite  coef write 8881
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 8885 ); // i2cWrite  coef write 8885
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8889 ); // i2cWrite  coef read 8889
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8893 ); // i2cWrite  coef read 8893
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8897 ); // i2cWrite  coef read 8897
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8901 ); // i2cWrite  coef write 8901
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1501 i2c data 0x0001   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0015, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8908 ); // i2cWrite  coef read 8908
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8912 ); // i2cWrite  coef write 8912
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8916 ); // i2cWrite  coef write 8916
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1501, 0x00000000, 8920 ); // i2cWrite  coef write 8920
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8924 ); // i2cWrite  coef read 8924
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8928 ); // i2cWrite  coef read 8928
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8932 ); // i2cWrite  coef read 8932
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8936 ); // i2cWrite  coef write 8936
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8943 ); // i2cWrite  coef read 8943
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8947 ); // i2cWrite  coef write 8947
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8951 ); // i2cWrite  coef write 8951
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 8955 ); // i2cWrite  coef write 8955
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8959 ); // i2cWrite  coef read 8959
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8963 ); // i2cWrite  coef read 8963
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 8967 ); // i2cWrite  coef read 8967
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 8971 ); // i2cWrite  coef write 8971
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1800 i2c data 0x0000   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0018, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 8978 ); // i2cWrite  coef read 8978
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 8982 ); // i2cWrite  coef write 8982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 8986 ); // i2cWrite  coef write 8986
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1800, 0x00000000, 8990 ); // i2cWrite  coef write 8990
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8994 ); // i2cWrite  coef read 8994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 8998 ); // i2cWrite  coef read 8998
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9002 ); // i2cWrite  coef read 9002
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9006 ); // i2cWrite  coef write 9006
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9013 ); // i2cWrite  coef read 9013
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9017 ); // i2cWrite  coef write 9017
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9021 ); // i2cWrite  coef write 9021
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 9025 ); // i2cWrite  coef write 9025
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9029 ); // i2cWrite  coef read 9029
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9033 ); // i2cWrite  coef read 9033
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9037 ); // i2cWrite  coef read 9037
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9041 ); // i2cWrite  coef write 9041
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9048 ); // i2cWrite  coef read 9048
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9052 ); // i2cWrite  coef write 9052
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9056 ); // i2cWrite  coef write 9056
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 9060 ); // i2cWrite  coef write 9060
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9064 ); // i2cWrite  coef read 9064
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9068 ); // i2cWrite  coef read 9068
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9072 ); // i2cWrite  coef read 9072
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9076 ); // i2cWrite  coef write 9076
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9083 ); // i2cWrite  coef read 9083
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9087 ); // i2cWrite  coef write 9087
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9091 ); // i2cWrite  coef write 9091
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 9095 ); // i2cWrite  coef write 9095
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9099 ); // i2cWrite  coef read 9099
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9103 ); // i2cWrite  coef read 9103
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9107 ); // i2cWrite  coef read 9107
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9111 ); // i2cWrite  coef write 9111
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9118 ); // i2cWrite  coef read 9118
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9122 ); // i2cWrite  coef write 9122
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9126 ); // i2cWrite  coef write 9126
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 9130 ); // i2cWrite  coef write 9130
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9134 ); // i2cWrite  coef read 9134
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9138 ); // i2cWrite  coef read 9138
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9142 ); // i2cWrite  coef read 9142
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9146 ); // i2cWrite  coef write 9146
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9153 ); // i2cWrite  coef read 9153
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9157 ); // i2cWrite  coef write 9157
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9161 ); // i2cWrite  coef write 9161
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 9165 ); // i2cWrite  coef write 9165
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9169 ); // i2cWrite  coef read 9169
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9173 ); // i2cWrite  coef read 9173
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9177 ); // i2cWrite  coef read 9177
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9181 ); // i2cWrite  coef write 9181
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9188 ); // i2cWrite  coef read 9188
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9192 ); // i2cWrite  coef write 9192
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9196 ); // i2cWrite  coef write 9196
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 9200 ); // i2cWrite  coef write 9200
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9204 ); // i2cWrite  coef read 9204
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9208 ); // i2cWrite  coef read 9208
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9212 ); // i2cWrite  coef read 9212
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9216 ); // i2cWrite  coef write 9216
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9223 ); // i2cRead  coef read 9223
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9227 ); // i2cRead  coef write 9227
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9231 ); // i2cRead  coef write 9231
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 9235 ); // i2cRead  coef write 9235
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9239 ); // i2cRead  coef read 9239
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9243 ); // i2cRead  coef read 9243
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 9247 ); // i2cRead  coef read 9247
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9251 ); // i2cRead  coef read 9251
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9255 ); // i2cRead  coef write 9255
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9262 ); // i2cWrite  coef read 9262
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9266 ); // i2cWrite  coef write 9266
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 9270 ); // i2cWrite  coef write 9270
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 9274 ); // i2cWrite  coef write 9274
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9278 ); // i2cWrite  coef read 9278
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9282 ); // i2cWrite  coef read 9282
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9286 ); // i2cWrite  coef read 9286
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9290 ); // i2cWrite  coef write 9290
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9297 ); // i2cWrite  coef read 9297
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9301 ); // i2cWrite  coef write 9301
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9305 ); // i2cWrite  coef write 9305
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 9309 ); // i2cWrite  coef write 9309
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9313 ); // i2cWrite  coef read 9313
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9317 ); // i2cWrite  coef read 9317
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9321 ); // i2cWrite  coef read 9321
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9325 ); // i2cWrite  coef write 9325
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9332 ); // i2cWrite  coef read 9332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9336 ); // i2cWrite  coef write 9336
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9340 ); // i2cWrite  coef write 9340
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 9344 ); // i2cWrite  coef write 9344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9348 ); // i2cWrite  coef read 9348
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9352 ); // i2cWrite  coef read 9352
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9356 ); // i2cWrite  coef read 9356
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9360 ); // i2cWrite  coef write 9360
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9367 ); // i2cWrite  coef read 9367
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9371 ); // i2cWrite  coef write 9371
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9375 ); // i2cWrite  coef write 9375
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 9379 ); // i2cWrite  coef write 9379
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9383 ); // i2cWrite  coef read 9383
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9387 ); // i2cWrite  coef read 9387
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9391 ); // i2cWrite  coef read 9391
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9395 ); // i2cWrite  coef write 9395
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1502 i2c data 0x0002   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0015, 0x0002, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9402 ); // i2cWrite  coef read 9402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9406 ); // i2cWrite  coef write 9406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9410 ); // i2cWrite  coef write 9410
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1502, 0x00000000, 9414 ); // i2cWrite  coef write 9414
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9418 ); // i2cWrite  coef read 9418
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9422 ); // i2cWrite  coef read 9422
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9426 ); // i2cWrite  coef read 9426
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9430 ); // i2cWrite  coef write 9430
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9437 ); // i2cWrite  coef read 9437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9441 ); // i2cWrite  coef write 9441
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9445 ); // i2cWrite  coef write 9445
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 9449 ); // i2cWrite  coef write 9449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9453 ); // i2cWrite  coef read 9453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9457 ); // i2cWrite  coef read 9457
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9461 ); // i2cWrite  coef read 9461
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9465 ); // i2cWrite  coef write 9465
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1801 i2c data 0x0001   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0018, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9472 ); // i2cWrite  coef read 9472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9476 ); // i2cWrite  coef write 9476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9480 ); // i2cWrite  coef write 9480
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1801, 0x00000000, 9484 ); // i2cWrite  coef write 9484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9488 ); // i2cWrite  coef read 9488
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9492 ); // i2cWrite  coef read 9492
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9496 ); // i2cWrite  coef read 9496
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9500 ); // i2cWrite  coef write 9500
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9507 ); // i2cWrite  coef read 9507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9511 ); // i2cWrite  coef write 9511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9515 ); // i2cWrite  coef write 9515
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 9519 ); // i2cWrite  coef write 9519
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9523 ); // i2cWrite  coef read 9523
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9527 ); // i2cWrite  coef read 9527
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9531 ); // i2cWrite  coef read 9531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9535 ); // i2cWrite  coef write 9535
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9542 ); // i2cWrite  coef read 9542
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9546 ); // i2cWrite  coef write 9546
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9550 ); // i2cWrite  coef write 9550
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 9554 ); // i2cWrite  coef write 9554
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9558 ); // i2cWrite  coef read 9558
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9562 ); // i2cWrite  coef read 9562
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9566 ); // i2cWrite  coef read 9566
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9570 ); // i2cWrite  coef write 9570
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9577 ); // i2cWrite  coef read 9577
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9581 ); // i2cWrite  coef write 9581
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9585 ); // i2cWrite  coef write 9585
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 9589 ); // i2cWrite  coef write 9589
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9593 ); // i2cWrite  coef read 9593
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9597 ); // i2cWrite  coef read 9597
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9601 ); // i2cWrite  coef read 9601
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9605 ); // i2cWrite  coef write 9605
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9612 ); // i2cWrite  coef read 9612
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9616 ); // i2cWrite  coef write 9616
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9620 ); // i2cWrite  coef write 9620
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 9624 ); // i2cWrite  coef write 9624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9628 ); // i2cWrite  coef read 9628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9632 ); // i2cWrite  coef read 9632
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9636 ); // i2cWrite  coef read 9636
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9640 ); // i2cWrite  coef write 9640
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9647 ); // i2cWrite  coef read 9647
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9651 ); // i2cWrite  coef write 9651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9655 ); // i2cWrite  coef write 9655
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 9659 ); // i2cWrite  coef write 9659
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9663 ); // i2cWrite  coef read 9663
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9667 ); // i2cWrite  coef read 9667
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9671 ); // i2cWrite  coef read 9671
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9675 ); // i2cWrite  coef write 9675
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9682 ); // i2cWrite  coef read 9682
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9686 ); // i2cWrite  coef write 9686
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9690 ); // i2cWrite  coef write 9690
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 9694 ); // i2cWrite  coef write 9694
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9698 ); // i2cWrite  coef read 9698
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9702 ); // i2cWrite  coef read 9702
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9706 ); // i2cWrite  coef read 9706
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9710 ); // i2cWrite  coef write 9710
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9717 ); // i2cRead  coef read 9717
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9721 ); // i2cRead  coef write 9721
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9725 ); // i2cRead  coef write 9725
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 9729 ); // i2cRead  coef write 9729
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9733 ); // i2cRead  coef read 9733
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9737 ); // i2cRead  coef read 9737
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 9741 ); // i2cRead  coef read 9741
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9745 ); // i2cRead  coef read 9745
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9749 ); // i2cRead  coef write 9749
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9756 ); // i2cWrite  coef read 9756
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9760 ); // i2cWrite  coef write 9760
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 9764 ); // i2cWrite  coef write 9764
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 9768 ); // i2cWrite  coef write 9768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9772 ); // i2cWrite  coef read 9772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9776 ); // i2cWrite  coef read 9776
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9780 ); // i2cWrite  coef read 9780
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9784 ); // i2cWrite  coef write 9784
//      snd_hda i2cWrite end

}

static void enable2_TDM2_7472(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00324033
//      snd_hda:     stream format 3 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 9794 ); //   coef read 9794
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x0840, 0x00000000, 9798 ); //   coef write 9798
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00000860, 9802 ); //   coef read 9802
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x0860, 0x00000000, 9806 ); //   coef write 9806

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 9810 ); //   coef read 9810
//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 9815 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 9815
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 9819 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 9819
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 9823 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 9823

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 9826

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 9830); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02570740
//      snd_hda:     37 ['AC_PINCTL_OUT_EN']

}


static void amps_enable2_7472(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9834 ); // i2cWrite  coef read 9834
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9838 ); // i2cWrite  coef write 9838
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 9842 ); // i2cWrite  coef write 9842
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 9846 ); // i2cWrite  coef write 9846
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9850 ); // i2cWrite  coef read 9850
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9854 ); // i2cWrite  coef read 9854
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9858 ); // i2cWrite  coef read 9858
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9862 ); // i2cWrite  coef write 9862
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9869 ); // i2cWrite  coef read 9869
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9873 ); // i2cWrite  coef write 9873
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 9877 ); // i2cWrite  coef write 9877
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 9881 ); // i2cWrite  coef write 9881
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9885 ); // i2cWrite  coef read 9885
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9889 ); // i2cWrite  coef read 9889
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9893 ); // i2cWrite  coef read 9893
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9897 ); // i2cWrite  coef write 9897
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9904 ); // i2cWrite  coef read 9904
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9908 ); // i2cWrite  coef write 9908
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 9912 ); // i2cWrite  coef write 9912
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 9916 ); // i2cWrite  coef write 9916
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9920 ); // i2cWrite  coef read 9920
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9924 ); // i2cWrite  coef read 9924
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9928 ); // i2cWrite  coef read 9928
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9932 ); // i2cWrite  coef write 9932
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1504 i2c data 0x0004   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0015, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9939 ); // i2cWrite  coef read 9939
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9943 ); // i2cWrite  coef write 9943
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 9947 ); // i2cWrite  coef write 9947
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1504, 0x00000000, 9951 ); // i2cWrite  coef write 9951
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9955 ); // i2cWrite  coef read 9955
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9959 ); // i2cWrite  coef read 9959
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9963 ); // i2cWrite  coef read 9963
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 9967 ); // i2cWrite  coef write 9967
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 9974 ); // i2cWrite  coef read 9974
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 9978 ); // i2cWrite  coef write 9978
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 9982 ); // i2cWrite  coef write 9982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 9986 ); // i2cWrite  coef write 9986
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9990 ); // i2cWrite  coef read 9990
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 9994 ); // i2cWrite  coef read 9994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 9998 ); // i2cWrite  coef read 9998
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10002 ); // i2cWrite  coef write 10002
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1802 i2c data 0x0002   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0018, 0x0002, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10009 ); // i2cWrite  coef read 10009
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10013 ); // i2cWrite  coef write 10013
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10017 ); // i2cWrite  coef write 10017
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1802, 0x00000000, 10021 ); // i2cWrite  coef write 10021
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10025 ); // i2cWrite  coef read 10025
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10029 ); // i2cWrite  coef read 10029
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10033 ); // i2cWrite  coef read 10033
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10037 ); // i2cWrite  coef write 10037
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10044 ); // i2cWrite  coef read 10044
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10048 ); // i2cWrite  coef write 10048
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10052 ); // i2cWrite  coef write 10052
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 10056 ); // i2cWrite  coef write 10056
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10060 ); // i2cWrite  coef read 10060
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10064 ); // i2cWrite  coef read 10064
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10068 ); // i2cWrite  coef read 10068
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10072 ); // i2cWrite  coef write 10072
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10079 ); // i2cWrite  coef read 10079
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10083 ); // i2cWrite  coef write 10083
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10087 ); // i2cWrite  coef write 10087
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 10091 ); // i2cWrite  coef write 10091
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10095 ); // i2cWrite  coef read 10095
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10099 ); // i2cWrite  coef read 10099
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10103 ); // i2cWrite  coef read 10103
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10107 ); // i2cWrite  coef write 10107
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10114 ); // i2cWrite  coef read 10114
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10118 ); // i2cWrite  coef write 10118
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10122 ); // i2cWrite  coef write 10122
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 10126 ); // i2cWrite  coef write 10126
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10130 ); // i2cWrite  coef read 10130
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10134 ); // i2cWrite  coef read 10134
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10138 ); // i2cWrite  coef read 10138
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10142 ); // i2cWrite  coef write 10142
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10149 ); // i2cWrite  coef read 10149
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10153 ); // i2cWrite  coef write 10153
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10157 ); // i2cWrite  coef write 10157
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 10161 ); // i2cWrite  coef write 10161
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10165 ); // i2cWrite  coef read 10165
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10169 ); // i2cWrite  coef read 10169
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10173 ); // i2cWrite  coef read 10173
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10177 ); // i2cWrite  coef write 10177
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10184 ); // i2cWrite  coef read 10184
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10188 ); // i2cWrite  coef write 10188
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10192 ); // i2cWrite  coef write 10192
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 10196 ); // i2cWrite  coef write 10196
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10200 ); // i2cWrite  coef read 10200
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10204 ); // i2cWrite  coef read 10204
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10208 ); // i2cWrite  coef read 10208
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10212 ); // i2cWrite  coef write 10212
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10219 ); // i2cWrite  coef read 10219
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10223 ); // i2cWrite  coef write 10223
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10227 ); // i2cWrite  coef write 10227
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 10231 ); // i2cWrite  coef write 10231
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10235 ); // i2cWrite  coef read 10235
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10239 ); // i2cWrite  coef read 10239
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10243 ); // i2cWrite  coef read 10243
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10247 ); // i2cWrite  coef write 10247
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10254 ); // i2cRead  coef read 10254
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10258 ); // i2cRead  coef write 10258
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10262 ); // i2cRead  coef write 10262
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 10266 ); // i2cRead  coef write 10266
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10270 ); // i2cRead  coef read 10270
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10274 ); // i2cRead  coef read 10274
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 10278 ); // i2cRead  coef read 10278
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10282 ); // i2cRead  coef read 10282
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10286 ); // i2cRead  coef write 10286
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10293 ); // i2cWrite  coef read 10293
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10297 ); // i2cWrite  coef write 10297
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 10301 ); // i2cWrite  coef write 10301
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 10305 ); // i2cWrite  coef write 10305
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10309 ); // i2cWrite  coef read 10309
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10313 ); // i2cWrite  coef read 10313
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10317 ); // i2cWrite  coef read 10317
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10321 ); // i2cWrite  coef write 10321
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10328 ); // i2cWrite  coef read 10328
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10332 ); // i2cWrite  coef write 10332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10336 ); // i2cWrite  coef write 10336
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 10340 ); // i2cWrite  coef write 10340
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10344 ); // i2cWrite  coef read 10344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10348 ); // i2cWrite  coef read 10348
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10352 ); // i2cWrite  coef read 10352
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10356 ); // i2cWrite  coef write 10356
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10363 ); // i2cWrite  coef read 10363
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10367 ); // i2cWrite  coef write 10367
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10371 ); // i2cWrite  coef write 10371
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 10375 ); // i2cWrite  coef write 10375
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10379 ); // i2cWrite  coef read 10379
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10383 ); // i2cWrite  coef read 10383
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10387 ); // i2cWrite  coef read 10387
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10391 ); // i2cWrite  coef write 10391
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10398 ); // i2cWrite  coef read 10398
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10402 ); // i2cWrite  coef write 10402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10406 ); // i2cWrite  coef write 10406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 10410 ); // i2cWrite  coef write 10410
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10414 ); // i2cWrite  coef read 10414
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10418 ); // i2cWrite  coef read 10418
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10422 ); // i2cWrite  coef read 10422
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10426 ); // i2cWrite  coef write 10426
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1508 i2c data 0x0008   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0015, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10433 ); // i2cWrite  coef read 10433
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10437 ); // i2cWrite  coef write 10437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10441 ); // i2cWrite  coef write 10441
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1508, 0x00000000, 10445 ); // i2cWrite  coef write 10445
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10449 ); // i2cWrite  coef read 10449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10453 ); // i2cWrite  coef read 10453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10457 ); // i2cWrite  coef read 10457
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10461 ); // i2cWrite  coef write 10461
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10468 ); // i2cWrite  coef read 10468
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10472 ); // i2cWrite  coef write 10472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10476 ); // i2cWrite  coef write 10476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 10480 ); // i2cWrite  coef write 10480
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10484 ); // i2cWrite  coef read 10484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10488 ); // i2cWrite  coef read 10488
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10492 ); // i2cWrite  coef read 10492
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10496 ); // i2cWrite  coef write 10496
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1803 i2c data 0x0003   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0018, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10503 ); // i2cWrite  coef read 10503
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10507 ); // i2cWrite  coef write 10507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10511 ); // i2cWrite  coef write 10511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1803, 0x00000000, 10515 ); // i2cWrite  coef write 10515
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10519 ); // i2cWrite  coef read 10519
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10523 ); // i2cWrite  coef read 10523
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10527 ); // i2cWrite  coef read 10527
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10531 ); // i2cWrite  coef write 10531
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10538 ); // i2cWrite  coef read 10538
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10542 ); // i2cWrite  coef write 10542
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10546 ); // i2cWrite  coef write 10546
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 10550 ); // i2cWrite  coef write 10550
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10554 ); // i2cWrite  coef read 10554
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10558 ); // i2cWrite  coef read 10558
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10562 ); // i2cWrite  coef read 10562
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10566 ); // i2cWrite  coef write 10566
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10573 ); // i2cWrite  coef read 10573
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10577 ); // i2cWrite  coef write 10577
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10581 ); // i2cWrite  coef write 10581
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 10585 ); // i2cWrite  coef write 10585
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10589 ); // i2cWrite  coef read 10589
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10593 ); // i2cWrite  coef read 10593
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10597 ); // i2cWrite  coef read 10597
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10601 ); // i2cWrite  coef write 10601
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10608 ); // i2cWrite  coef read 10608
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10612 ); // i2cWrite  coef write 10612
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10616 ); // i2cWrite  coef write 10616
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 10620 ); // i2cWrite  coef write 10620
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10624 ); // i2cWrite  coef read 10624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10628 ); // i2cWrite  coef read 10628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10632 ); // i2cWrite  coef read 10632
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10636 ); // i2cWrite  coef write 10636
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10643 ); // i2cWrite  coef read 10643
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10647 ); // i2cWrite  coef write 10647
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10651 ); // i2cWrite  coef write 10651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 10655 ); // i2cWrite  coef write 10655
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10659 ); // i2cWrite  coef read 10659
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10663 ); // i2cWrite  coef read 10663
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10667 ); // i2cWrite  coef read 10667
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10671 ); // i2cWrite  coef write 10671
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10678 ); // i2cWrite  coef read 10678
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10682 ); // i2cWrite  coef write 10682
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10686 ); // i2cWrite  coef write 10686
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 10690 ); // i2cWrite  coef write 10690
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10694 ); // i2cWrite  coef read 10694
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10698 ); // i2cWrite  coef read 10698
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10702 ); // i2cWrite  coef read 10702
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10706 ); // i2cWrite  coef write 10706
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10713 ); // i2cWrite  coef read 10713
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10717 ); // i2cWrite  coef write 10717
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10721 ); // i2cWrite  coef write 10721
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 10725 ); // i2cWrite  coef write 10725
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10729 ); // i2cWrite  coef read 10729
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10733 ); // i2cWrite  coef read 10733
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10737 ); // i2cWrite  coef read 10737
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10741 ); // i2cWrite  coef write 10741
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10748 ); // i2cRead  coef read 10748
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10752 ); // i2cRead  coef write 10752
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10756 ); // i2cRead  coef write 10756
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 10760 ); // i2cRead  coef write 10760
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10764 ); // i2cRead  coef read 10764
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10768 ); // i2cRead  coef read 10768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 10772 ); // i2cRead  coef read 10772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10776 ); // i2cRead  coef read 10776
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10780 ); // i2cRead  coef write 10780
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10787 ); // i2cWrite  coef read 10787
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10791 ); // i2cWrite  coef write 10791
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 10795 ); // i2cWrite  coef write 10795
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 10799 ); // i2cWrite  coef write 10799
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10803 ); // i2cWrite  coef read 10803
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10807 ); // i2cWrite  coef read 10807
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10811 ); // i2cWrite  coef read 10811
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10815 ); // i2cWrite  coef write 10815
//      snd_hda i2cWrite end

}

static void sync_converters3(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 10821); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000003, 10823 ); // coef write mask 10823
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000003, 10823 ); // coef write mask 10823

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 10829); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000003, 10831 ); // coef write mask 10831
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000003, 10831 ); // coef write mask 10831

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
}

static void sync_converters4(struct hda_codec *codec)
{
        int retval;

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301
//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 

        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 10860); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0x00000003, 10862 ); // coef write mask 10862
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0xundef, 0x00000003, 10862 ); // coef write mask 10862

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 10868); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000002, 10870 ); // coef write mask 10870
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0xundef, 0x00000002, 10870 ); // coef write mask 10870

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 10876 ); //   coef read 10876
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 10880 ); //   coef read 10880

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000220, 10884 ); // coef write mask 10884
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0xundef, 0x00000220, 10884 ); // coef write mask 10884

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

}

static void amps_disable3_6462(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10894 ); // i2cWrite  coef read 10894
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10898 ); // i2cWrite  coef write 10898
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 10902 ); // i2cWrite  coef write 10902
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 10906 ); // i2cWrite  coef write 10906
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10910 ); // i2cWrite  coef read 10910
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10914 ); // i2cWrite  coef read 10914
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10918 ); // i2cWrite  coef read 10918
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10922 ); // i2cWrite  coef write 10922
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10929 ); // i2cRead  coef read 10929
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10933 ); // i2cRead  coef write 10933
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 10937 ); // i2cRead  coef write 10937
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 10941 ); // i2cRead  coef write 10941
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10945 ); // i2cRead  coef read 10945
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10949 ); // i2cRead  coef read 10949
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 10953 ); // i2cRead  coef read 10953
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10957 ); // i2cRead  coef read 10957
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 10961 ); // i2cRead  coef write 10961
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 10968 ); // i2cRead  coef read 10968
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 10972 ); // i2cRead  coef write 10972
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 10976 ); // i2cRead  coef write 10976
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 10980 ); // i2cRead  coef write 10980
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10984 ); // i2cRead  coef read 10984
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 10988 ); // i2cRead  coef read 10988
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 10992 ); // i2cRead  coef read 10992
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 10996 ); // i2cRead  coef read 10996
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11000 ); // i2cRead  coef write 11000
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11007 ); // i2cRead  coef read 11007
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11011 ); // i2cRead  coef write 11011
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 11015 ); // i2cRead  coef write 11015
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 11019 ); // i2cRead  coef write 11019
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11023 ); // i2cRead  coef read 11023
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11027 ); // i2cRead  coef read 11027
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 11031 ); // i2cRead  coef read 11031
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11035 ); // i2cRead  coef read 11035
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11039 ); // i2cRead  coef write 11039
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11046 ); // i2cWrite  coef read 11046
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11050 ); // i2cWrite  coef write 11050
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 11054 ); // i2cWrite  coef write 11054
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 11058 ); // i2cWrite  coef write 11058
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11062 ); // i2cWrite  coef read 11062
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11066 ); // i2cWrite  coef read 11066
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11070 ); // i2cWrite  coef read 11070
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11074 ); // i2cWrite  coef write 11074
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11081 ); // i2cRead  coef read 11081
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11085 ); // i2cRead  coef write 11085
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 11089 ); // i2cRead  coef write 11089
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 11093 ); // i2cRead  coef write 11093
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11097 ); // i2cRead  coef read 11097
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11101 ); // i2cRead  coef read 11101
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 11105 ); // i2cRead  coef read 11105
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11109 ); // i2cRead  coef read 11109
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11113 ); // i2cRead  coef write 11113
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11120 ); // i2cRead  coef read 11120
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11124 ); // i2cRead  coef write 11124
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 11128 ); // i2cRead  coef write 11128
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 11132 ); // i2cRead  coef write 11132
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11136 ); // i2cRead  coef read 11136
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11140 ); // i2cRead  coef read 11140
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 11144 ); // i2cRead  coef read 11144
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11148 ); // i2cRead  coef read 11148
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11152 ); // i2cRead  coef write 11152
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11159 ); // i2cRead  coef read 11159
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11163 ); // i2cRead  coef write 11163
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 11167 ); // i2cRead  coef write 11167
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 11171 ); // i2cRead  coef write 11171
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11175 ); // i2cRead  coef read 11175
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11179 ); // i2cRead  coef read 11179
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 11183 ); // i2cRead  coef read 11183
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11187 ); // i2cRead  coef read 11187
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11191 ); // i2cRead  coef write 11191
//      snd_hda i2cRead end

}

static void putative_disable3_TDM_6462(struct hda_codec *codec)
{
        int retval;

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 11197 ); //   coef read 11197
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x8800, 0x00000000, 11201 ); //   coef write 11201
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000820, 11205 ); //   coef read 11205
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x8820, 0x00000000, 11209 ); //   coef write 11209

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 11213 ); //   coef read 11213
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 11217 ); //   coef read 11217
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 11221 ); //   coef read 11221
//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 11226 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 11226
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 11230 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 11230
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 11234 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 11234

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 11237


        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00220000
//      snd_hda:     stream format 2 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 11243); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02470700
//      snd_hda:     36 []

}

static void amps_disable3_7472(struct hda_codec *codec)
{
        //int retval;


//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11247 ); // i2cWrite  coef read 11247
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11251 ); // i2cWrite  coef write 11251
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 11255 ); // i2cWrite  coef write 11255
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 11259 ); // i2cWrite  coef write 11259
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11263 ); // i2cWrite  coef read 11263
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11267 ); // i2cWrite  coef read 11267
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11271 ); // i2cWrite  coef read 11271
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11275 ); // i2cWrite  coef write 11275
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11282 ); // i2cRead  coef read 11282
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11286 ); // i2cRead  coef write 11286
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 11290 ); // i2cRead  coef write 11290
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 11294 ); // i2cRead  coef write 11294
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11298 ); // i2cRead  coef read 11298
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11302 ); // i2cRead  coef read 11302
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 11306 ); // i2cRead  coef read 11306
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11310 ); // i2cRead  coef read 11310
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11314 ); // i2cRead  coef write 11314
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11321 ); // i2cRead  coef read 11321
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11325 ); // i2cRead  coef write 11325
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 11329 ); // i2cRead  coef write 11329
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 11333 ); // i2cRead  coef write 11333
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11337 ); // i2cRead  coef read 11337
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11341 ); // i2cRead  coef read 11341
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 11345 ); // i2cRead  coef read 11345
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11349 ); // i2cRead  coef read 11349
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11353 ); // i2cRead  coef write 11353
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11360 ); // i2cRead  coef read 11360
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11364 ); // i2cRead  coef write 11364
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 11368 ); // i2cRead  coef write 11368
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 11372 ); // i2cRead  coef write 11372
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11376 ); // i2cRead  coef read 11376
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11380 ); // i2cRead  coef read 11380
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 11384 ); // i2cRead  coef read 11384
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11388 ); // i2cRead  coef read 11388
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11392 ); // i2cRead  coef write 11392
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11399 ); // i2cWrite  coef read 11399
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11403 ); // i2cWrite  coef write 11403
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 11407 ); // i2cWrite  coef write 11407
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 11411 ); // i2cWrite  coef write 11411
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11415 ); // i2cWrite  coef read 11415
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11419 ); // i2cWrite  coef read 11419
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11423 ); // i2cWrite  coef read 11423
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11427 ); // i2cWrite  coef write 11427
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11434 ); // i2cRead  coef read 11434
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11438 ); // i2cRead  coef write 11438
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 11442 ); // i2cRead  coef write 11442
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 11446 ); // i2cRead  coef write 11446
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11450 ); // i2cRead  coef read 11450
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11454 ); // i2cRead  coef read 11454
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 11458 ); // i2cRead  coef read 11458
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11462 ); // i2cRead  coef read 11462
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11466 ); // i2cRead  coef write 11466
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11473 ); // i2cRead  coef read 11473
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11477 ); // i2cRead  coef write 11477
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 11481 ); // i2cRead  coef write 11481
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 11485 ); // i2cRead  coef write 11485
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11489 ); // i2cRead  coef read 11489
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11493 ); // i2cRead  coef read 11493
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 11497 ); // i2cRead  coef read 11497
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11501 ); // i2cRead  coef read 11501
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11505 ); // i2cRead  coef write 11505
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11512 ); // i2cRead  coef read 11512
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11516 ); // i2cRead  coef write 11516
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 11520 ); // i2cRead  coef write 11520
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 11524 ); // i2cRead  coef write 11524
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11528 ); // i2cRead  coef read 11528
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11532 ); // i2cRead  coef read 11532
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 11536 ); // i2cRead  coef read 11536
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11540 ); // i2cRead  coef read 11540
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11544 ); // i2cRead  coef write 11544
//      snd_hda i2cRead end

}

static void putative_disable3_TDM_7472(struct hda_codec *codec)
{
        int retval;

        // this could be disabling the TDM

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 11550 ); //   coef read 11550
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x8840, 0x00000000, 11554 ); //   coef write 11554
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00000860, 11558 ); //   coef read 11558
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x8860, 0x00000000, 11562 ); //   coef write 11562

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00005401, 11566 ); // coef write mask 11566
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0xundef, 0x00005401, 11566 ); // coef write mask 11566

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000220, 11572 ); //   coef read 11572
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 11576 ); //   coef write 11576

        // AppleHDATDMBusManagerCS8409::setupTDMPath or disableTDMPath calls AppleHDATDMBusManagerCS8409::configureTDMUR
        // AppleHDATDMBusManagerCS8409::configureTDMUR only place calls this
        // this is AppleHDATDMBusManagerCS8409::tdmInUse
        // which reads from 0x19 to 0x57 in a loop if the snd_hda_coef_item returns 0 till the read value
        // does not have the word sign bit set (ie 0x8000) or finish all 0x57

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 11580 ); //   coef read 11580
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 11584 ); //   coef read 11584
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 11588 ); //   coef read 11588
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 11592 ); //   coef read 11592
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008000, 11596 ); //   coef read 11596
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 11600 ); //   coef read 11600
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008000, 11604 ); //   coef read 11604
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 11608 ); //   coef read 11608
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 11612 ); //   coef read 11612
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 11616 ); //   coef read 11616
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 11620 ); //   coef read 11620
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 11624 ); //   coef read 11624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 11628 ); //   coef read 11628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 11632 ); //   coef read 11632
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 11636 ); //   coef read 11636
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 11640 ); //   coef read 11640
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 11644 ); //   coef read 11644
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 11648 ); //   coef read 11648
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 11652 ); //   coef read 11652
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 11656 ); //   coef read 11656
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 11660 ); //   coef read 11660
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 11664 ); //   coef read 11664
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 11668 ); //   coef read 11668
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 11672 ); //   coef read 11672
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 11676 ); //   coef read 11676
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 11680 ); //   coef read 11680
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 11684 ); //   coef read 11684
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 11688 ); //   coef read 11688
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 11692 ); //   coef read 11692
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 11696 ); //   coef read 11696
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 11700 ); //   coef read 11700
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 11704 ); //   coef read 11704
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 11708 ); //   coef read 11708
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 11712 ); //   coef read 11712
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 11716 ); //   coef read 11716
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 11720 ); //   coef read 11720
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 11724 ); //   coef read 11724
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 11728 ); //   coef read 11728
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 11732 ); //   coef read 11732
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 11736 ); //   coef read 11736
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 11740 ); //   coef read 11740
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 11744 ); //   coef read 11744
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 11748 ); //   coef read 11748
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 11752 ); //   coef read 11752
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 11756 ); //   coef read 11756
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 11760 ); //   coef read 11760
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 11764 ); //   coef read 11764
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 11768 ); //   coef read 11768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 11772 ); //   coef read 11772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 11776 ); //   coef read 11776
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 11780 ); //   coef read 11780
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 11784 ); //   coef read 11784
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 11788 ); //   coef read 11788
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 11792 ); //   coef read 11792
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 11796 ); //   coef read 11796
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 11800 ); //   coef read 11800
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 11804 ); //   coef read 11804
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 11808 ); //   coef read 11808
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 11812 ); //   coef read 11812
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 11816 ); //   coef read 11816
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 11820 ); //   coef read 11820
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 11824 ); //   coef read 11824
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 11828 ); //   coef read 11828

        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 11833 ); //   coef write 11833

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00000000);


        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00320000
//      snd_hda:     stream format 3 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 11842); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02570700
//      snd_hda:     37 []

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void setup_mic_vol2(struct hda_codec *codec)
{
        int retval;

        // nodes 0x44, 0x45 which are connected to 0x22, 0x23 are labelled as mic inputs

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11851); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02236033
//      snd_hda:     amp gain/mute 34 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 11853); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02235033
//      snd_hda:     amp gain/mute 34 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11855); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02336033
//      snd_hda:     amp gain/mute 35 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 11857); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02335033
//      snd_hda:     amp gain/mute 35 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void setup_mic_vol3(struct hda_codec *codec)
{
        int retval;

        // nodes 0x44, 0x45 which are connected to 0x22, 0x23 are labelled as mic inputs

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11866); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02236033
//      snd_hda:     amp gain/mute 34 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 11868); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02235033
//      snd_hda:     amp gain/mute 34 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11870); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02336033
//      snd_hda:     amp gain/mute 35 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 11872); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02335033
//      snd_hda:     amp gain/mute 35 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

        // whats with these multiple power ups/down
        // it appears OSXs logs are not guaranteed to be ordered - so these are delayed from some above calls
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503

        // so these may also be delayed outputs - which explains their weird positioning
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 11911); // 0x022f0500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 11912); // 0x023f0500


static void read_gpio_status1(struct hda_codec *codec)
{
        int retval;

        // should these be done powered down??
        // lets check power state here
        // why the 3 calls

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DATA, 0x00000000, 0x00000027, 11915); // 0x001f1500
//      snd_hda:     gpio data 1 0x27
}


static void read_gpio_status2(struct hda_codec *codec)
{
        int retval;
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DATA, 0x00000000, 0x00000027, 11916); // 0x001f1500
//      snd_hda:     gpio data 1 0x27
}

static void read_gpio_status3(struct hda_codec *codec)
{
        int retval;
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DATA, 0x00000000, 0x00000027, 11917); // 0x001f1500
//      snd_hda:     gpio data 1 0x27

}


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);


static void setup_mic3(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7700 i2c data 0x7716
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b77, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 11932 ); // i2cPagedRead  coef read 11932
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 11936 ); // i2cPagedRead  coef write 11936
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 11940 ); // i2cPagedRead  coef write 11940
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 11944 ); // i2cPagedRead  coef write 11944
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11948 ); // i2cPagedRead  coef read 11948
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7700, 0x00000000, 11952 ); // i2cPagedRead  coef write 11952
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11956 ); // i2cPagedRead  coef read 11956
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 11960 ); // i2cPagedRead  coef read 11960
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007716, 11964 ); // i2cPagedRead  coef read 11964
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 11968 ); // i2cPagedRead  coef read 11968
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 11972 ); // i2cPagedRead  coef write 11972
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_mic_vol4(struct hda_codec *codec)
{
        int retval;

        //int retgain1;
        //int retgain2;

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11984); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02236033
//      snd_hda:     amp gain/mute 34 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 11986); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02235033
//      snd_hda:     amp gain/mute 34 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11988); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02336033
//      snd_hda:     amp gain/mute 35 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 11990); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02335033
//      snd_hda:     amp gain/mute 35 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_mic_vol5(struct hda_codec *codec)
{
        int retval;


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 11999); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02236033
//      snd_hda:     amp gain/mute 34 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 12001); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02235033
//      snd_hda:     amp gain/mute 34 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 12003); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02336033
//      snd_hda:     amp gain/mute 35 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 12005); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02335033
//      snd_hda:     amp gain/mute 35 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
}

        // more likely delayed log prints
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503


static void setup_mic4(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7700 i2c data 0x7716
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b77, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 12049 ); // i2cPagedRead  coef read 12049
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 12053 ); // i2cPagedRead  coef write 12053
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 12057 ); // i2cPagedRead  coef write 12057
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 12061 ); // i2cPagedRead  coef write 12061
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 12065 ); // i2cPagedRead  coef read 12065
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7700, 0x00000000, 12069 ); // i2cPagedRead  coef write 12069
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 12073 ); // i2cPagedRead  coef read 12073
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 12077 ); // i2cPagedRead  coef read 12077
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007716, 12081 ); // i2cPagedRead  coef read 12081
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 12085 ); // i2cPagedRead  coef read 12085
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 12089 ); // i2cPagedRead  coef write 12089
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void setup_mic5(struct hda_codec *codec)
{

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7700 i2c data 0x7716
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b77, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 12100 ); // i2cPagedRead  coef read 12100
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 12104 ); // i2cPagedRead  coef write 12104
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 12108 ); // i2cPagedRead  coef write 12108
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 12112 ); // i2cPagedRead  coef write 12112
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 12116 ); // i2cPagedRead  coef read 12116
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7700, 0x00000000, 12120 ); // i2cPagedRead  coef write 12120
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 12124 ); // i2cPagedRead  coef read 12124
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 12128 ); // i2cPagedRead  coef read 12128
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007716, 12132 ); // i2cPagedRead  coef read 12132
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 12136 ); // i2cPagedRead  coef read 12136
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 12140 ); // i2cPagedRead  coef write 12140
//      snd_hda i2cPagedRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


        // likely delayed outputs
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12153); // 0x022f0500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12154); // 0x023f0500


static void setup_mic_vol6(struct hda_codec *codec)
{

        int retval;

        //int retgain1;
        //int retgain2;


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004031); // 0x02224031
//      snd_hda:     stream format 34 [('CHAN', 2), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        // why the double setup of 0x23 here??

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 12163); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006027); // 0x02336027
//      snd_hda:     amp gain/mute 35 0x6027 mute 0 gain 0x27 39 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 12165); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005027); // 0x02335027
//      snd_hda:     amp gain/mute 35 0x5027 mute 0 gain 0x27 39 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000027, 12167); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0027 mute 0 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060a7); // 0x023360a7
//      snd_hda:     amp gain/mute 35 0x60a7 mute 1 gain 0x27 39 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000027, 12169); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x0027 mute 0 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050a7); // 0x023350a7
//      snd_hda:     amp gain/mute 35 0x50a7 mute 1 gain 0x27 39 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000000, 12171); // 0x045b2000
//      snd_hda:     amp gain/mute 69 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 69 0x0000 mute 0 gain 0x0 0
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006000); // 0x04536000
//      snd_hda:     amp gain/mute 69 0x6000 mute 0 gain 0x0 0 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000000, 12173); // 0x045b0000
//      snd_hda:     amp gain/mute 69 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 69 0x0000 mute 0 gain 0x0 0
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005000); // 0x04535000
//      snd_hda:     amp gain/mute 69 0x5000 mute 0 gain 0x0 0 index 0x00 left 0 right 1 output 0 input 1  right  input


        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12175); // 0x023f0500
        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 12178); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02370600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12181); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x02320000
//      snd_hda:     stream format 35 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0082, 0x0000, 0x00000001, 12184 ); //   coef read 12184
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00000000, 12188 ); //   coef write 12188

        retval = snd_hda_codec_read_check(codec, 0x45, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 12192); // 0x045f0700
        snd_hda_codec_write(codec, 0x45, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x04570700
//      snd_hda:     69 []


}

static void setup_mic7(struct hda_codec *codec)
{

        int retval;

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 12195); // 0x022f0600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12196); // 0x022f0500
        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02270500
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 12199); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02270600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02270503
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12202); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0x00000033, 12204 ); // coef write mask 12204
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0xundef, 0x00000033, 12204 ); // coef write mask 12204


        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000000, 12210); // 0x023f0600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12211); // 0x023f0500
        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 12214); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02370600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12217); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0x00000033, 12219 ); // coef write mask 12219
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0009, 0x0033, 0xundef, 0x00000033, 12219 ); // coef write mask 12219

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12225); // 0x022f0500
        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02270500
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 12228); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02270600
//      snd_hda:     conv stream channel map 34 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02270503
        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12231); // 0x022f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);


        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12233); // 0x023f0500
        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x02370500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000030, 12236); // 0x023f0500
        hda_set_node_power_state(codec, 0x22, AC_PWRST_D0);

        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x02370600
//      snd_hda:     conv stream channel map 35 [('CHAN', 0), ('STREAMID', 0)]

        //snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x02370503
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 12239); // 0x023f0500
        hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_mic_vol7(struct hda_codec *codec)
{

        int retval;


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x00000033, 12248); // 0x022b2000
//      snd_hda:     amp gain/mute 34 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00006033); // 0x02236033
//      snd_hda:     amp gain/mute 34 0x6033 mute 0 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x00000033, 12250); // 0x022b0000
//      snd_hda:     amp gain/mute 34 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 34 0x0033 mute 0 gain 0x33 51
        snd_hda_codec_write(codec, 0x22, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x00005033); // 0x02235033
//      snd_hda:     amp gain/mute 34 0x5033 mute 0 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00002000, 0x000000a7, 12252); // 0x023b2000
//      snd_hda:     amp gain/mute 35 0x2000 index 0x00 left/right 1 left output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000060b3); // 0x023360b3
//      snd_hda:     amp gain/mute 35 0x60b3 mute 1 gain 0x33 51 index 0x00 left 1 right 0 output 0 input 1 left   input
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_AMP_GAIN_MUTE, 0x00000000, 0x000000a7, 12254); // 0x023b0000
//      snd_hda:     amp gain/mute 35 0x0000 index 0x00 left/right 0 right output/input 0 input
//      snd_hda:     amp gain/mute 35 0x00a7 mute 1 gain 0x27 39
        snd_hda_codec_write(codec, 0x23, 0, AC_VERB_SET_AMP_GAIN_MUTE, 0x000050b3); // 0x023350b3
//      snd_hda:     amp gain/mute 35 0x50b3 mute 1 gain 0x33 51 index 0x00 left 0 right 1 output 0 input 1  right  input

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}

static void setup_node_alpha_reset_and_clear(struct hda_codec *codec)
{

        // still need to define this for the moment - but not used


        // so now really dont know whay I skipped all this - maybe because they
        // almost entirely reads??
        // - except it does clear all the pin configs
        // plus does a DBL init

        int retval;


        dev_info(hda_codec_dev(codec), "command nid start setup_node_alpha_reset_and_clear\n");


        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 1);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 2);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 3);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 4);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000004, 0x00010001, 5);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000004, 0x00020046, 6);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000101, 7);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_SUBSYSTEM_ID, 0x00000000, 0x106b3900, 8);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 9);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 10);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000f, 0xe0000019, 11);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_DBL_CODEC_RESET, 0x00000000);
        snd_hda_double_reset(codec);

        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 13);
        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000002, 0x00100100, 14);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000005, 0x00000101, 15);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000f, 0xe0000019, 16);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000a, 0x001a017f, 17);
//      snd_hda:     pcm params           1 bits: 16bit 24bit 32bit rates: 8kHz 11.025kHz 16kHz 22.05kHz 32kHz 44.1kHz 48kHz 96kHz
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000b, 0x00000001, 18);
//      snd_hda:     stream format params 1 pcm
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000012, 0x00000000, 19);
//      snd_hda:     amp capabilities 1 output 0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x0000000d, 0x00000000, 20);
//      snd_hda:     amp capabilities 1 input  0x00000000 offset 0x00 numsteps 0x00 stepsize 0x00 mute 0

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_SUBSYSTEM_ID, 0x00000000, 0x106b3900, 22);
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000008, 0x00010000, 23);

        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_GET_GPIO_DIRECTION, 0x00000000, 0x00000000, 24);
//      snd_hda:     gpio direction 1 0x00 in in in in in in in in
        retval = snd_hda_codec_read_check(codec, codec->core.afg, 0, AC_VERB_PARAMETERS, 0x00000011, 0xc0000008, 25);
//      snd_hda:     gpio params 1 [('GPIO', 8), ('GPIO_WAKE', 1), ('GPO', 0), ('GPI', 0), ('GPIO_UNSOL', 1)]


        // read parameters from all nodes - excluding VirtualWidgets

        init_read_all_nodes(codec);

        //setup_beep(codec);

        read_vendor_node(codec);

        // now moved to separate function read_virtual_widgets

        dev_info(hda_codec_dev(codec), "command nid end setup_node_alpha_reset_and_clear\n");

}

// cant decide if to have this at end or beginning
// I think end is better - also means dont have extra forward function definitions

static void cs_8409_boot_setup_data(struct hda_codec *codec)
{

        // so now really dont know whay I skipped all this - maybe because they
        // almost entirely reads??
        // - except it does clear all the pin configs
        // plus does a DBL init

        //int retval;


        setup_reset_and_clear(codec);


        // read parameters from all nodes - excluding VirtualWidgets

        // the loop over node counts calls AppleHDAWidgetFactory::createAppleHDAWidget(DevIdStruct*)
        // which Im assuming calls the initForNodeID functions

        init_read_all_nodes(codec);

        //setup_beep(codec);

        read_vendor_node(codec);

        init_read_coefs(codec);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        read_virtual_widgets(codec);

        init_for_node_id(codec);

        setup_jack_pin_config(codec);

        enable_i2c(codec);

        enable_GPIforUR(codec);

        external_control_GPIO(codec);

        putative_setup_mic(codec);

        external_control_GPIO2_clear_2(codec);

        external_control_GPIO2_set_2(codec);

        putative_setup_mic2(codec);

        putative_setup_mic3(codec);

        putative_setup_mic4(codec);


        setup_amps_reset(codec);

        read_gpio_status(codec);


        putative_setup_mic5(codec);

        setup_jack_nids(codec);

        setup_jack_nids2(codec);

        setup_jack_vol1(codec);

        setup_jack_vol2(codec);


        setup_TDM_6462(codec);

        setup_amps_6462(codec);

        setup_TDM_7472(codec);

        setup_amps_7472(codec);

        sync_converters(codec);


        sync_converters1(codec);

        amps_disable_6462(codec);

        putative_tdm_disable_6462(codec);

        amps_disable_7472(codec);

        putative_tdm_disable_7472(codec);


        putative_enable1_TDM_6462(codec);

        amps_disable2_6462(codec);

        putative_enable1_TDM_7472(codec);

        amps_disable2_7472(codec);

        sync_converters2(codec);


        enable2_TDM2_6462(codec);

        amps_enable2_6462(codec);

        enable2_TDM2_7472(codec);

        amps_enable2_7472(codec);

        sync_converters3(codec);


        sync_converters4(codec);

        amps_disable3_6462(codec);

        putative_disable3_TDM_6462(codec);

        amps_disable3_7472(codec);

        putative_disable3_TDM_7472(codec);


        setup_mic_vol2(codec);

        setup_mic_vol3(codec);


        read_gpio_status1(codec);

        read_gpio_status2(codec);

        read_gpio_status3(codec);


        setup_mic3(codec);

        setup_mic_vol4(codec);

        setup_mic_vol5(codec);

        setup_mic4(codec);

        setup_mic5(codec);

        setup_mic_vol6(codec);

        setup_mic7(codec);

        setup_mic_vol7(codec);


        dev_info(hda_codec_dev(codec), "command cs_8409_boot_setup_data end\n");
}


static void cs_8409_unmute_data(struct hda_codec *codec)
{
	int retval;

	//int retwake;

        //int retconv;

        int retpower1;
        int retpower2;

	//int ret_power;

	printk("snd_hda_intel: command nid cs_8409_unmute_data");

	// this initial bit is specific to unmute


        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 1);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000);
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003);
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

	// this is the mike

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7700 i2c data 0x0038
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b77, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 22 ); // i2cPagedRead  coef read 22
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 26 ); // i2cPagedRead  coef write 26
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 30 ); // i2cPagedRead  coef write 30
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 34 ); // i2cPagedRead  coef write 34
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 38 ); // i2cPagedRead  coef read 38
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7700, 0x00000000, 42 ); // i2cPagedRead  coef write 42
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 46 ); // i2cPagedRead  coef read 46
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 50 ); // i2cPagedRead  coef read 50
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007716, 54 ); // i2cPagedRead  coef read 54
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 58 ); // i2cPagedRead  coef read 58
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 62 ); // i2cPagedRead  coef write 62
//      snd_hda i2cPagedRead end


        // so from this point on unmute and volup are identical

	// these are the amps

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033);
//      snd_hda:     stream format 2 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 71 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 71
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 75 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 75
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 79 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 79
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x0800, 0x00000000, 83 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 83
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 87 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 87
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x0820, 0x00000000, 91 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 91
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 95 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 95
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0xb000, 0x00000000, 99 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 99
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0004, 0x0000, 0x000008ff, 103 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 103
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x00000000, 107 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 107
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 111 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 111

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0x00008000, 115 ); // coef write mask 115
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0xundef, 0x00008000, 115 ); // coef write mask 115
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 121 ); // coef write mask 121
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 121 ); // coef write mask 121
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0x00000001, 127 ); // coef write mask 127
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0xundef, 0x00000001, 127 ); // coef write mask 127
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0x00000280, 133 ); // coef write mask 133

//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0xundef, 0x00000280, 133 ); // coef write mask 133
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 139 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 139
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000000, 143 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 143
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 147 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 147

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 152 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 152
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 156 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 156
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 160 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 160

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 163

        // boot code has this here
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # AppleHDATDMBusManagerCS8409::setSampleRate: 
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000220, 168 ); // coef write mask 168
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0xundef, 0x00000220, 168 ); // coef write mask 168
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 174 ); // coef write mask 174
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 174 ); // coef write mask 174
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x000008ff, 180 ); // coef write mask 180
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0xundef, 0x000008ff, 180 ); // coef write mask 180

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 187);

        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040);
//      snd_hda:     36 ['AC_PINCTL_OUT_EN']

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0010, 0x0008, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 191 ); // i2cWrite  coef read 191
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 195 ); // i2cWrite  coef write 195
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 199 ); // i2cWrite  coef write 199
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 203 ); // i2cWrite  coef write 203
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 207 ); // i2cWrite  coef read 207
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 211 ); // i2cWrite  coef read 211
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 215 ); // i2cWrite  coef read 215
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 219 ); // i2cWrite  coef write 219
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0014, 0x00e4, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 226 ); // i2cWrite  coef read 226
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 230 ); // i2cWrite  coef write 230
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 234 ); // i2cWrite  coef write 234
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 238 ); // i2cWrite  coef write 238
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 242 ); // i2cWrite  coef read 242
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 246 ); // i2cWrite  coef read 246
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 250 ); // i2cWrite  coef read 250
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 254 ); // i2cWrite  coef write 254
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1501 i2c data 0x0001   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0015, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 261 ); // i2cWrite  coef read 261
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 265 ); // i2cWrite  coef write 265
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 269 ); // i2cWrite  coef write 269
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1501, 0x00000000, 273 ); // i2cWrite  coef write 273
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 277 ); // i2cWrite  coef read 277
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 281 ); // i2cWrite  coef read 281
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 285 ); // i2cWrite  coef read 285
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 289 ); // i2cWrite  coef write 289
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0016, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 296 ); // i2cWrite  coef read 296
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 300 ); // i2cWrite  coef write 300
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 304 ); // i2cWrite  coef write 304
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 308 ); // i2cWrite  coef write 308
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 312 ); // i2cWrite  coef read 312
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 316 ); // i2cWrite  coef read 316
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 320 ); // i2cWrite  coef read 320
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 324 ); // i2cWrite  coef write 324
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1800 i2c data 0x0000   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0018, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 331 ); // i2cWrite  coef read 331
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 335 ); // i2cWrite  coef write 335
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 339 ); // i2cWrite  coef write 339
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1800, 0x00000000, 343 ); // i2cWrite  coef write 343
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 347 ); // i2cWrite  coef read 347
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 351 ); // i2cWrite  coef read 351
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 355 ); // i2cWrite  coef read 355
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 359 ); // i2cWrite  coef write 359
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0019, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 366 ); // i2cWrite  coef read 366
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 370 ); // i2cWrite  coef write 370
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 374 ); // i2cWrite  coef write 374
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 378 ); // i2cWrite  coef write 378
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 382 ); // i2cWrite  coef read 382
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 386 ); // i2cWrite  coef read 386
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 390 ); // i2cWrite  coef read 390
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 394 ); // i2cWrite  coef write 394
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002d, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 401 ); // i2cWrite  coef read 401
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 405 ); // i2cWrite  coef write 405
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 409 ); // i2cWrite  coef write 409
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 413 ); // i2cWrite  coef write 413
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 417 ); // i2cWrite  coef read 417
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 421 ); // i2cWrite  coef read 421
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 425 ); // i2cWrite  coef read 425
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 429 ); // i2cWrite  coef write 429
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002e, 0x0005, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 436 ); // i2cWrite  coef read 436
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 440 ); // i2cWrite  coef write 440
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 444 ); // i2cWrite  coef write 444
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 448 ); // i2cWrite  coef write 448
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 452 ); // i2cWrite  coef read 452
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 456 ); // i2cWrite  coef read 456
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 460 ); // i2cWrite  coef read 460
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 464 ); // i2cWrite  coef write 464
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004a, 0x0021, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 471 ); // i2cWrite  coef read 471
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 475 ); // i2cWrite  coef write 475
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 479 ); // i2cWrite  coef write 479
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 483 ); // i2cWrite  coef write 483
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 487 ); // i2cWrite  coef read 487
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 491 ); // i2cWrite  coef read 491
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 495 ); // i2cWrite  coef read 495
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 499 ); // i2cWrite  coef write 499
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004d, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 506 ); // i2cWrite  coef read 506
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 510 ); // i2cWrite  coef write 510
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 514 ); // i2cWrite  coef write 514
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 518 ); // i2cWrite  coef write 518
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 522 ); // i2cWrite  coef read 522
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 526 ); // i2cWrite  coef read 526
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 530 ); // i2cWrite  coef read 530
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 534 ); // i2cWrite  coef write 534
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0055, 0x0034, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 541 ); // i2cWrite  coef read 541
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 545 ); // i2cWrite  coef write 545
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 549 ); // i2cWrite  coef write 549
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 553 ); // i2cWrite  coef write 553
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 557 ); // i2cWrite  coef read 557
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 561 ); // i2cWrite  coef read 561
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 565 ); // i2cWrite  coef read 565
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 569 ); // i2cWrite  coef write 569
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0011, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 576 ); // i2cRead  coef read 576
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 580 ); // i2cRead  coef write 580
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 584 ); // i2cRead  coef write 584
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 588 ); // i2cRead  coef write 588
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 592 ); // i2cRead  coef read 592
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 596 ); // i2cRead  coef read 596
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 600 ); // i2cRead  coef read 600
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 604 ); // i2cRead  coef read 604
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 608 ); // i2cRead  coef write 608
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0011, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 615 ); // i2cWrite  coef read 615
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 619 ); // i2cWrite  coef write 619
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 623 ); // i2cWrite  coef write 623
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 627 ); // i2cWrite  coef write 627
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 631 ); // i2cWrite  coef read 631
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 635 ); // i2cWrite  coef read 635
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 639 ); // i2cWrite  coef read 639
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 643 ); // i2cWrite  coef write 643
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 650 ); // i2cWrite  coef read 650
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 654 ); // i2cWrite  coef write 654
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 658 ); // i2cWrite  coef write 658
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 662 ); // i2cWrite  coef write 662
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 666 ); // i2cWrite  coef read 666
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 670 ); // i2cWrite  coef read 670
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 674 ); // i2cWrite  coef read 674
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 678 ); // i2cWrite  coef write 678
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0010, 0x0008, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 685 ); // i2cWrite  coef read 685
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 689 ); // i2cWrite  coef write 689
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 693 ); // i2cWrite  coef write 693
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 697 ); // i2cWrite  coef write 697
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 701 ); // i2cWrite  coef read 701
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 705 ); // i2cWrite  coef read 705
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 709 ); // i2cWrite  coef read 709
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 713 ); // i2cWrite  coef write 713
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0014, 0x00e4, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 720 ); // i2cWrite  coef read 720
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 724 ); // i2cWrite  coef write 724
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 728 ); // i2cWrite  coef write 728
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 732 ); // i2cWrite  coef write 732
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 736 ); // i2cWrite  coef read 736
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 740 ); // i2cWrite  coef read 740
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 744 ); // i2cWrite  coef read 744
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 748 ); // i2cWrite  coef write 748
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1502 i2c data 0x0002   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0015, 0x0002, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 755 ); // i2cWrite  coef read 755
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 759 ); // i2cWrite  coef write 759
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 763 ); // i2cWrite  coef write 763
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1502, 0x00000000, 767 ); // i2cWrite  coef write 767
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 771 ); // i2cWrite  coef read 771
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 775 ); // i2cWrite  coef read 775
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 779 ); // i2cWrite  coef read 779
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 783 ); // i2cWrite  coef write 783
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0016, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 790 ); // i2cWrite  coef read 790
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 794 ); // i2cWrite  coef write 794
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 798 ); // i2cWrite  coef write 798
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 802 ); // i2cWrite  coef write 802
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 806 ); // i2cWrite  coef read 806
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 810 ); // i2cWrite  coef read 810
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 814 ); // i2cWrite  coef read 814
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 818 ); // i2cWrite  coef write 818
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1801 i2c data 0x0001   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0018, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 825 ); // i2cWrite  coef read 825
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 829 ); // i2cWrite  coef write 829
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 833 ); // i2cWrite  coef write 833
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1801, 0x00000000, 837 ); // i2cWrite  coef write 837
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 841 ); // i2cWrite  coef read 841
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 845 ); // i2cWrite  coef read 845
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 849 ); // i2cWrite  coef read 849
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 853 ); // i2cWrite  coef write 853
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0019, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 860 ); // i2cWrite  coef read 860
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 864 ); // i2cWrite  coef write 864
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 868 ); // i2cWrite  coef write 868
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 872 ); // i2cWrite  coef write 872
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 876 ); // i2cWrite  coef read 876
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 880 ); // i2cWrite  coef read 880
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 884 ); // i2cWrite  coef read 884
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 888 ); // i2cWrite  coef write 888
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002d, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 895 ); // i2cWrite  coef read 895
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 899 ); // i2cWrite  coef write 899
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 903 ); // i2cWrite  coef write 903
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 907 ); // i2cWrite  coef write 907
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 911 ); // i2cWrite  coef read 911
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 915 ); // i2cWrite  coef read 915
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 919 ); // i2cWrite  coef read 919
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 923 ); // i2cWrite  coef write 923
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002e, 0x0005, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 930 ); // i2cWrite  coef read 930
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 934 ); // i2cWrite  coef write 934
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 938 ); // i2cWrite  coef write 938
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 942 ); // i2cWrite  coef write 942
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 946 ); // i2cWrite  coef read 946
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 950 ); // i2cWrite  coef read 950
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 954 ); // i2cWrite  coef read 954
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 958 ); // i2cWrite  coef write 958
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004a, 0x0021, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 965 ); // i2cWrite  coef read 965
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 969 ); // i2cWrite  coef write 969
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 973 ); // i2cWrite  coef write 973
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 977 ); // i2cWrite  coef write 977
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 981 ); // i2cWrite  coef read 981
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 985 ); // i2cWrite  coef read 985
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 989 ); // i2cWrite  coef read 989
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 993 ); // i2cWrite  coef write 993
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004d, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1000 ); // i2cWrite  coef read 1000
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1004 ); // i2cWrite  coef write 1004
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1008 ); // i2cWrite  coef write 1008
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 1012 ); // i2cWrite  coef write 1012
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1016 ); // i2cWrite  coef read 1016
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1020 ); // i2cWrite  coef read 1020
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1024 ); // i2cWrite  coef read 1024
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1028 ); // i2cWrite  coef write 1028
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0055, 0x0034, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1035 ); // i2cWrite  coef read 1035
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1039 ); // i2cWrite  coef write 1039
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1043 ); // i2cWrite  coef write 1043
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 1047 ); // i2cWrite  coef write 1047
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1051 ); // i2cWrite  coef read 1051
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1055 ); // i2cWrite  coef read 1055
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1059 ); // i2cWrite  coef read 1059
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1063 ); // i2cWrite  coef write 1063
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0011, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1070 ); // i2cRead  coef read 1070
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1074 ); // i2cRead  coef write 1074
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1078 ); // i2cRead  coef write 1078
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 1082 ); // i2cRead  coef write 1082
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1086 ); // i2cRead  coef read 1086
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1090 ); // i2cRead  coef read 1090
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 1094 ); // i2cRead  coef read 1094
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1098 ); // i2cRead  coef read 1098
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1102 ); // i2cRead  coef write 1102
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0011, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1109 ); // i2cWrite  coef read 1109
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1113 ); // i2cWrite  coef write 1113
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1117 ); // i2cWrite  coef write 1117
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 1121 ); // i2cWrite  coef write 1121
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1125 ); // i2cWrite  coef read 1125
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1129 ); // i2cWrite  coef read 1129
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1133 ); // i2cWrite  coef read 1133
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1137 ); // i2cWrite  coef write 1137
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1144 ); // i2cWrite  coef read 1144
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1148 ); // i2cWrite  coef write 1148
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1152 ); // i2cWrite  coef write 1152
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 1156 ); // i2cWrite  coef write 1156
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1160 ); // i2cWrite  coef read 1160
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1164 ); // i2cWrite  coef read 1164
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1168 ); // i2cWrite  coef read 1168
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1172 ); // i2cWrite  coef write 1172
//      snd_hda i2cWrite end

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033);
//      snd_hda:     stream format 3 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012);
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 1180 ); //   coef read 1180
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x0840, 0x00000000, 1184 ); //   coef write 1184
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 1188 ); //   coef read 1188
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x0860, 0x00000000, 1192 ); //   coef write 1192
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 1196 ); //   coef read 1196

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 1201 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 1201
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 1205 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 1205
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 1209 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 1209

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 1212

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 1218);
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040);
//      snd_hda:     37 ['AC_PINCTL_OUT_EN']

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0010, 0x0008, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1222 ); // i2cWrite  coef read 1222
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1226 ); // i2cWrite  coef write 1226
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1230 ); // i2cWrite  coef write 1230
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 1234 ); // i2cWrite  coef write 1234
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1238 ); // i2cWrite  coef read 1238
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1242 ); // i2cWrite  coef read 1242
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1246 ); // i2cWrite  coef read 1246
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1250 ); // i2cWrite  coef write 1250
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0014, 0x00e4, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1257 ); // i2cWrite  coef read 1257
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1261 ); // i2cWrite  coef write 1261
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1265 ); // i2cWrite  coef write 1265
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 1269 ); // i2cWrite  coef write 1269
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1273 ); // i2cWrite  coef read 1273
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1277 ); // i2cWrite  coef read 1277
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1281 ); // i2cWrite  coef read 1281
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1285 ); // i2cWrite  coef write 1285
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1504 i2c data 0x0004   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0015, 0x0004, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1292 ); // i2cWrite  coef read 1292
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1296 ); // i2cWrite  coef write 1296
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1300 ); // i2cWrite  coef write 1300
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1504, 0x00000000, 1304 ); // i2cWrite  coef write 1304
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1308 ); // i2cWrite  coef read 1308
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1312 ); // i2cWrite  coef read 1312
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1316 ); // i2cWrite  coef read 1316
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1320 ); // i2cWrite  coef write 1320
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0016, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1327 ); // i2cWrite  coef read 1327
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1331 ); // i2cWrite  coef write 1331
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1335 ); // i2cWrite  coef write 1335
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 1339 ); // i2cWrite  coef write 1339
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1343 ); // i2cWrite  coef read 1343
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1347 ); // i2cWrite  coef read 1347
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1351 ); // i2cWrite  coef read 1351
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1355 ); // i2cWrite  coef write 1355
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1802 i2c data 0x0002   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0018, 0x0002, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1362 ); // i2cWrite  coef read 1362
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1366 ); // i2cWrite  coef write 1366
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1370 ); // i2cWrite  coef write 1370
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1802, 0x00000000, 1374 ); // i2cWrite  coef write 1374
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1378 ); // i2cWrite  coef read 1378
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1382 ); // i2cWrite  coef read 1382
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1386 ); // i2cWrite  coef read 1386
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1390 ); // i2cWrite  coef write 1390
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0019, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1397 ); // i2cWrite  coef read 1397
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1401 ); // i2cWrite  coef write 1401
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1405 ); // i2cWrite  coef write 1405
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 1409 ); // i2cWrite  coef write 1409
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1413 ); // i2cWrite  coef read 1413
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1417 ); // i2cWrite  coef read 1417
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1421 ); // i2cWrite  coef read 1421
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1425 ); // i2cWrite  coef write 1425
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002d, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1432 ); // i2cWrite  coef read 1432
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1436 ); // i2cWrite  coef write 1436
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1440 ); // i2cWrite  coef write 1440
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 1444 ); // i2cWrite  coef write 1444
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1448 ); // i2cWrite  coef read 1448
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1452 ); // i2cWrite  coef read 1452
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1456 ); // i2cWrite  coef read 1456
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1460 ); // i2cWrite  coef write 1460
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002e, 0x0005, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1467 ); // i2cWrite  coef read 1467
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1471 ); // i2cWrite  coef write 1471
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1475 ); // i2cWrite  coef write 1475
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 1479 ); // i2cWrite  coef write 1479
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1483 ); // i2cWrite  coef read 1483
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1487 ); // i2cWrite  coef read 1487
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1491 ); // i2cWrite  coef read 1491
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1495 ); // i2cWrite  coef write 1495
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004a, 0x0021, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1502 ); // i2cWrite  coef read 1502
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1506 ); // i2cWrite  coef write 1506
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1510 ); // i2cWrite  coef write 1510
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 1514 ); // i2cWrite  coef write 1514
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1518 ); // i2cWrite  coef read 1518
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1522 ); // i2cWrite  coef read 1522
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1526 ); // i2cWrite  coef read 1526
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1530 ); // i2cWrite  coef write 1530
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004d, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1537 ); // i2cWrite  coef read 1537
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1541 ); // i2cWrite  coef write 1541
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1545 ); // i2cWrite  coef write 1545
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 1549 ); // i2cWrite  coef write 1549
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1553 ); // i2cWrite  coef read 1553
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1557 ); // i2cWrite  coef read 1557
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1561 ); // i2cWrite  coef read 1561
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1565 ); // i2cWrite  coef write 1565
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0055, 0x0034, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1572 ); // i2cWrite  coef read 1572
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1576 ); // i2cWrite  coef write 1576
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1580 ); // i2cWrite  coef write 1580
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 1584 ); // i2cWrite  coef write 1584
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1588 ); // i2cWrite  coef read 1588
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1592 ); // i2cWrite  coef read 1592
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1596 ); // i2cWrite  coef read 1596
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1600 ); // i2cWrite  coef write 1600
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0011, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1607 ); // i2cRead  coef read 1607
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1611 ); // i2cRead  coef write 1611
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1615 ); // i2cRead  coef write 1615
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 1619 ); // i2cRead  coef write 1619
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1623 ); // i2cRead  coef read 1623
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1627 ); // i2cRead  coef read 1627
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 1631 ); // i2cRead  coef read 1631
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1635 ); // i2cRead  coef read 1635
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1639 ); // i2cRead  coef write 1639
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0011, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1646 ); // i2cWrite  coef read 1646
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1650 ); // i2cWrite  coef write 1650
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1654 ); // i2cWrite  coef write 1654
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 1658 ); // i2cWrite  coef write 1658
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1662 ); // i2cWrite  coef read 1662
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1666 ); // i2cWrite  coef read 1666
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1670 ); // i2cWrite  coef read 1670
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1674 ); // i2cWrite  coef write 1674
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1681 ); // i2cWrite  coef read 1681
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1685 ); // i2cWrite  coef write 1685
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1689 ); // i2cWrite  coef write 1689
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 1693 ); // i2cWrite  coef write 1693
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1697 ); // i2cWrite  coef read 1697
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1701 ); // i2cWrite  coef read 1701
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1705 ); // i2cWrite  coef read 1705
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1709 ); // i2cWrite  coef write 1709
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0010, 0x0008, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1716 ); // i2cWrite  coef read 1716
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1720 ); // i2cWrite  coef write 1720
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1724 ); // i2cWrite  coef write 1724
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 1728 ); // i2cWrite  coef write 1728
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1732 ); // i2cWrite  coef read 1732
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1736 ); // i2cWrite  coef read 1736
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1740 ); // i2cWrite  coef read 1740
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1744 ); // i2cWrite  coef write 1744
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0014, 0x00e4, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1751 ); // i2cWrite  coef read 1751
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1755 ); // i2cWrite  coef write 1755
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1759 ); // i2cWrite  coef write 1759
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 1763 ); // i2cWrite  coef write 1763
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1767 ); // i2cWrite  coef read 1767
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1771 ); // i2cWrite  coef read 1771
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1775 ); // i2cWrite  coef read 1775
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1779 ); // i2cWrite  coef write 1779
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1508 i2c data 0x0008   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0015, 0x0008, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1786 ); // i2cWrite  coef read 1786
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1790 ); // i2cWrite  coef write 1790
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1794 ); // i2cWrite  coef write 1794
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1508, 0x00000000, 1798 ); // i2cWrite  coef write 1798
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1802 ); // i2cWrite  coef read 1802
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1806 ); // i2cWrite  coef read 1806
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1810 ); // i2cWrite  coef read 1810
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1814 ); // i2cWrite  coef write 1814
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0016, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1821 ); // i2cWrite  coef read 1821
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1825 ); // i2cWrite  coef write 1825
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1829 ); // i2cWrite  coef write 1829
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 1833 ); // i2cWrite  coef write 1833
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1837 ); // i2cWrite  coef read 1837
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1841 ); // i2cWrite  coef read 1841
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1845 ); // i2cWrite  coef read 1845
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1849 ); // i2cWrite  coef write 1849
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1803 i2c data 0x0003   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0018, 0x0003, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1856 ); // i2cWrite  coef read 1856
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1860 ); // i2cWrite  coef write 1860
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1864 ); // i2cWrite  coef write 1864
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1803, 0x00000000, 1868 ); // i2cWrite  coef write 1868
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1872 ); // i2cWrite  coef read 1872
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1876 ); // i2cWrite  coef read 1876
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1880 ); // i2cWrite  coef read 1880
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1884 ); // i2cWrite  coef write 1884
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0019, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1891 ); // i2cWrite  coef read 1891
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1895 ); // i2cWrite  coef write 1895
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1899 ); // i2cWrite  coef write 1899
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 1903 ); // i2cWrite  coef write 1903
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1907 ); // i2cWrite  coef read 1907
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1911 ); // i2cWrite  coef read 1911
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1915 ); // i2cWrite  coef read 1915
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1919 ); // i2cWrite  coef write 1919
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002d, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1926 ); // i2cWrite  coef read 1926
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1930 ); // i2cWrite  coef write 1930
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1934 ); // i2cWrite  coef write 1934
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 1938 ); // i2cWrite  coef write 1938
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1942 ); // i2cWrite  coef read 1942
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1946 ); // i2cWrite  coef read 1946
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1950 ); // i2cWrite  coef read 1950
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1954 ); // i2cWrite  coef write 1954
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002e, 0x0005, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1961 ); // i2cWrite  coef read 1961
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1965 ); // i2cWrite  coef write 1965
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1969 ); // i2cWrite  coef write 1969
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 1973 ); // i2cWrite  coef write 1973
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1977 ); // i2cWrite  coef read 1977
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1981 ); // i2cWrite  coef read 1981
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1985 ); // i2cWrite  coef read 1985
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1989 ); // i2cWrite  coef write 1989
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004a, 0x0021, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1996 ); // i2cWrite  coef read 1996
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2000 ); // i2cWrite  coef write 2000
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2004 ); // i2cWrite  coef write 2004
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 2008 ); // i2cWrite  coef write 2008
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2012 ); // i2cWrite  coef read 2012
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2016 ); // i2cWrite  coef read 2016
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2020 ); // i2cWrite  coef read 2020
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2024 ); // i2cWrite  coef write 2024
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004d, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2031 ); // i2cWrite  coef read 2031
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2035 ); // i2cWrite  coef write 2035
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2039 ); // i2cWrite  coef write 2039
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 2043 ); // i2cWrite  coef write 2043
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2047 ); // i2cWrite  coef read 2047
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2051 ); // i2cWrite  coef read 2051
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2055 ); // i2cWrite  coef read 2055
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2059 ); // i2cWrite  coef write 2059
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0055, 0x0034, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2066 ); // i2cWrite  coef read 2066
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2070 ); // i2cWrite  coef write 2070
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2074 ); // i2cWrite  coef write 2074
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 2078 ); // i2cWrite  coef write 2078
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2082 ); // i2cWrite  coef read 2082
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2086 ); // i2cWrite  coef read 2086
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2090 ); // i2cWrite  coef read 2090
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2094 ); // i2cWrite  coef write 2094
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0011, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2101 ); // i2cRead  coef read 2101
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2105 ); // i2cRead  coef write 2105
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2109 ); // i2cRead  coef write 2109
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 2113 ); // i2cRead  coef write 2113
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2117 ); // i2cRead  coef read 2117
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2121 ); // i2cRead  coef read 2121
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 2125 ); // i2cRead  coef read 2125
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2129 ); // i2cRead  coef read 2129
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2133 ); // i2cRead  coef write 2133
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0011, 0x0007, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2140 ); // i2cWrite  coef read 2140
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2144 ); // i2cWrite  coef write 2144
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2148 ); // i2cWrite  coef write 2148
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 2152 ); // i2cWrite  coef write 2152
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2156 ); // i2cWrite  coef read 2156
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2160 ); // i2cWrite  coef read 2160
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2164 ); // i2cWrite  coef read 2164
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2168 ); // i2cWrite  coef write 2168
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0001, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2175 ); // i2cWrite  coef read 2175
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2179 ); // i2cWrite  coef write 2179
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2183 ); // i2cWrite  coef write 2183
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 2187 ); // i2cWrite  coef write 2187
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2191 ); // i2cWrite  coef read 2191
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2195 ); // i2cWrite  coef read 2195
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2199 ); // i2cWrite  coef read 2199
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2203 ); // i2cWrite  coef write 2203
//      snd_hda i2cWrite end

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 2209);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0x00000000, 2211 ); // coef write mask 2211
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0xundef, 0x00000000, 2211 ); // coef write mask 2211

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 2217);
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000);
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000001, 2219 ); // coef write mask 2219
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000001, 2219 ); // coef write mask 2219

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]
        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012);
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        // additional power status not in boot code
        retpower1 = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2232);
        retpower2 = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2233);


        // there is additional code in the boot stage

        // following is common code for boot and unmute etc

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 2240);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0x00000003, 2242 ); // coef write mask 2242
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0xundef, 0x00000003, 2242 ); // coef write mask 2242

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 2248);
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000);
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000002, 2250 ); // coef write mask 2250
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0xundef, 0x00000002, 2250 ); // coef write mask 2250
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 2256 ); //   coef read 2256
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 2260 ); //   coef read 2260
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000220, 2264 ); // coef write mask 2264
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0xundef, 0x00000220, 2264 ); // coef write mask 2264

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012);
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2274 ); // i2cWrite  coef read 2274
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2278 ); // i2cWrite  coef write 2278
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 2282 ); // i2cWrite  coef write 2282
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2286 ); // i2cWrite  coef write 2286
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2290 ); // i2cWrite  coef read 2290
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2294 ); // i2cWrite  coef read 2294
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2298 ); // i2cWrite  coef read 2298
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2302 ); // i2cWrite  coef write 2302
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2309 ); // i2cWrite  coef read 2309
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2313 ); // i2cWrite  coef write 2313
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 2317 ); // i2cWrite  coef write 2317
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2321 ); // i2cWrite  coef write 2321
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2325 ); // i2cWrite  coef read 2325
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2329 ); // i2cWrite  coef read 2329
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2333 ); // i2cWrite  coef read 2333
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2337 ); // i2cWrite  coef write 2337
//      snd_hda i2cWrite end

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 2343 ); //   coef read 2343
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x8800, 0x00000000, 2347 ); //   coef write 2347
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000820, 2351 ); //   coef read 2351
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x8820, 0x00000000, 2355 ); //   coef write 2355
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 2359 ); //   coef read 2359
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 2363 ); //   coef read 2363
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 2367 ); //   coef read 2367

        // boot code addition
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 2372 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 2372
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 2376 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 2376
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 2380 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 2380

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 2383

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000);
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000);
//      snd_hda:     stream format 2 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 2389);

        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000);
//      snd_hda:     36 []

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2393 ); // i2cWrite  coef read 2393
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2397 ); // i2cWrite  coef write 2397
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2401 ); // i2cWrite  coef write 2401
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2405 ); // i2cWrite  coef write 2405
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2409 ); // i2cWrite  coef read 2409
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2413 ); // i2cWrite  coef read 2413
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2417 ); // i2cWrite  coef read 2417
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2421 ); // i2cWrite  coef write 2421
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2428 ); // i2cWrite  coef read 2428
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2432 ); // i2cWrite  coef write 2432
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2436 ); // i2cWrite  coef write 2436
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2440 ); // i2cWrite  coef write 2440
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2444 ); // i2cWrite  coef read 2444
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2448 ); // i2cWrite  coef read 2448
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2452 ); // i2cWrite  coef read 2452
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2456 ); // i2cWrite  coef write 2456
//      snd_hda i2cWrite end

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 2462 ); //   coef read 2462
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x8840, 0x00000000, 2466 ); //   coef write 2466
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00000860, 2470 ); //   coef read 2470
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x8860, 0x00000000, 2474 ); //   coef write 2474
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00005401, 2478 ); // coef write mask 2478
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0xundef, 0x00005401, 2478 ); // coef write mask 2478
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000220, 2484 ); //   coef read 2484
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 2488 ); //   coef write 2488


        // the following duplicates the boot sequence in cs8409_init_coef2

        //snd_hda_coef_sequence(codec, cs8409_init_coef2, "init_coef2");

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 2492 ); //   coef read 2492
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 2496 ); //   coef read 2496
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 2500 ); //   coef read 2500
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 2504 ); //   coef read 2504
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008000, 2508 ); //   coef read 2508
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 2512 ); //   coef read 2512
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008000, 2516 ); //   coef read 2516
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 2520 ); //   coef read 2520
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 2524 ); //   coef read 2524
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 2528 ); //   coef read 2528
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 2532 ); //   coef read 2532
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 2536 ); //   coef read 2536
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 2540 ); //   coef read 2540
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 2544 ); //   coef read 2544
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 2548 ); //   coef read 2548
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 2552 ); //   coef read 2552
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 2556 ); //   coef read 2556
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 2560 ); //   coef read 2560
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 2564 ); //   coef read 2564
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 2568 ); //   coef read 2568
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 2572 ); //   coef read 2572
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 2576 ); //   coef read 2576
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 2580 ); //   coef read 2580
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 2584 ); //   coef read 2584
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 2588 ); //   coef read 2588
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 2592 ); //   coef read 2592
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 2596 ); //   coef read 2596
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 2600 ); //   coef read 2600
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 2604 ); //   coef read 2604
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 2608 ); //   coef read 2608
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 2612 ); //   coef read 2612
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 2616 ); //   coef read 2616
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 2620 ); //   coef read 2620
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 2624 ); //   coef read 2624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 2628 ); //   coef read 2628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 2632 ); //   coef read 2632
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 2636 ); //   coef read 2636
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 2640 ); //   coef read 2640
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 2644 ); //   coef read 2644
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 2648 ); //   coef read 2648
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 2652 ); //   coef read 2652
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 2656 ); //   coef read 2656
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 2660 ); //   coef read 2660
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 2664 ); //   coef read 2664
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 2668 ); //   coef read 2668
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 2672 ); //   coef read 2672
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 2676 ); //   coef read 2676
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 2680 ); //   coef read 2680
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 2684 ); //   coef read 2684
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 2688 ); //   coef read 2688
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 2692 ); //   coef read 2692
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 2696 ); //   coef read 2696
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 2700 ); //   coef read 2700
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 2704 ); //   coef read 2704
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 2708 ); //   coef read 2708
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 2712 ); //   coef read 2712
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 2716 ); //   coef read 2716
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 2720 ); //   coef read 2720
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 2724 ); //   coef read 2724
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 2728 ); //   coef read 2728
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 2732 ); //   coef read 2732
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 2736 ); //   coef read 2736
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 2740 ); //   coef read 2740
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 2745 ); //   coef write 2745

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00000000);

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000);
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000);
//      snd_hda:     stream format 3 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 2754);

        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000);
//      snd_hda:     37 []

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2761 ); // i2cWrite  coef read 2761
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2765 ); // i2cWrite  coef write 2765
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 2769 ); // i2cWrite  coef write 2769
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2773 ); // i2cWrite  coef write 2773
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2777 ); // i2cWrite  coef read 2777
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2781 ); // i2cWrite  coef read 2781
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2785 ); // i2cWrite  coef read 2785
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2789 ); // i2cWrite  coef write 2789
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2796 ); // i2cWrite  coef read 2796
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2800 ); // i2cWrite  coef write 2800
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 2804 ); // i2cWrite  coef write 2804
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2808 ); // i2cWrite  coef write 2808
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2812 ); // i2cWrite  coef read 2812
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2816 ); // i2cWrite  coef read 2816
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2820 ); // i2cWrite  coef read 2820
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2824 ); // i2cWrite  coef write 2824
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003);
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2838 ); // i2cWrite  coef read 2838
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2842 ); // i2cWrite  coef write 2842
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2846 ); // i2cWrite  coef write 2846
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2850 ); // i2cWrite  coef write 2850
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2854 ); // i2cWrite  coef read 2854
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2858 ); // i2cWrite  coef read 2858
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2862 ); // i2cWrite  coef read 2862
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2866 ); // i2cWrite  coef write 2866
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003);
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001);
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2877 ); // i2cWrite  coef read 2877
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2881 ); // i2cWrite  coef write 2881
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2885 ); // i2cWrite  coef write 2885
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2889 ); // i2cWrite  coef write 2889
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2893 ); // i2cWrite  coef read 2893
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2897 ); // i2cWrite  coef read 2897
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2901 ); // i2cWrite  coef read 2901
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2905 ); // i2cWrite  coef write 2905
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003);
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        retpower1 = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2912);
        retpower2 = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2913);

        printk("snd_hda_intel: command nid cs_8409_unmute_data end");

}


        // there is evidence OSX logs are not guaranteeably ordered and these seem to be combined into a block
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

static void volup_start(struct hda_codec *codec)
{ 
        int retval;

        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 1); // 0x000f0000

        // lets do a power up here as that was last state according to above power sets
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

}


static void volup_enable_mic(struct hda_codec *codec)
{

//      snd_hda: # i2cPagedRead: 
//      snd_hda i2cPagedRead  i2c address 0x90 i2c reg hi 0x1b lo 0x7700 i2c data 0x7716
        //cs_8409_vendor_i2cRead(codec, 0x90, 0x1b77, 1); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cPagedRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 43 ); // i2cPagedRead  coef read 43
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 47 ); // i2cPagedRead  coef write 47
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0090, 0x00000000, 51 ); // i2cPagedRead  coef write 51
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x001b, 0x00000000, 55 ); // i2cPagedRead  coef write 55
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 59 ); // i2cPagedRead  coef read 59
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x7700, 0x00000000, 63 ); // i2cPagedRead  coef write 63
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 67 ); // i2cPagedRead  coef read 67
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 71 ); // i2cPagedRead  coef read 71
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00007716, 75 ); // i2cPagedRead  coef read 75
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 79 ); // i2cPagedRead  coef read 79
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 83 ); // i2cPagedRead  coef write 83
//      snd_hda i2cPagedRead end

}

static void volup_setup_TDM_6462(struct hda_codec *codec)
{
        int retval;

        // so this seems to be where we see the same code as in unmute and volup
        // this seems to be setup for node 0x02 chain - which seems to use node 0x24 and amps 0x64 and 0x62

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00224033
//      snd_hda:     stream format 2 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 92 ); //   coef read 92
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 96 ); //   coef write 96

//      snd_hda: # AppleHDATDMBusManagerCS8409::setSampleRate: 
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000200, 101 ); // coef write mask 101
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 107 ); // coef write mask 107
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x000008ff, 113 ); // coef write mask 113
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0xundef, 0x00000200, 101 ); // coef write mask 101
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 107 ); // coef write mask 107
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0xundef, 0x000008ff, 113 ); // coef write mask 113

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 120 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 120
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x0800, 0x00000000, 124 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 124
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 128 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 128
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x0820, 0x00000000, 132 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 132

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 136 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 136
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0xb000, 0x00000000, 140 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 140
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0004, 0x0000, 0x000008ff, 144 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 144
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x00000000, 148 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 148
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 152 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 152

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0x00008000, 156 ); // coef write mask 156
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 162 ); // coef write mask 162
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0x00000001, 168 ); // coef write mask 168
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0x00000280, 174 ); // coef write mask 174
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0xundef, 0x00008000, 156 ); // coef write mask 156
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 162 ); // coef write mask 162
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0xundef, 0x00000001, 168 ); // coef write mask 168
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0xundef, 0x00000280, 174 ); // coef write mask 174

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 180 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 180
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000000, 184 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 184

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 188 ); //   coef read 188

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 193 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 193
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 197 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 197
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 201 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 201

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 204

        // enable output node 0x24

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 208); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02470740
//      snd_hda:     36 ['AC_PINCTL_OUT_EN']
}

static void volup_setup_amps_6462(struct hda_codec *codec)
{
        //int retval;


        // HPFDCBlocker new as of June 2019

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 212 ); // i2cWrite  coef read 212
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 216 ); // i2cWrite  coef write 216
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 220 ); // i2cWrite  coef write 220
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 224 ); // i2cWrite  coef write 224
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 228 ); // i2cWrite  coef read 228
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 232 ); // i2cWrite  coef read 232
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 236 ); // i2cWrite  coef read 236
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 240 ); // i2cWrite  coef write 240
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 247 ); // i2cWrite  coef read 247
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 251 ); // i2cWrite  coef write 251
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 255 ); // i2cWrite  coef write 255
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 259 ); // i2cWrite  coef write 259
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 263 ); // i2cWrite  coef read 263
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 267 ); // i2cWrite  coef read 267
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 271 ); // i2cWrite  coef read 271
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 275 ); // i2cWrite  coef write 275
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 282 ); // i2cWrite  coef read 282
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 286 ); // i2cWrite  coef write 286
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 290 ); // i2cWrite  coef write 290
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 294 ); // i2cWrite  coef write 294
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 298 ); // i2cWrite  coef read 298
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 302 ); // i2cWrite  coef read 302
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 306 ); // i2cWrite  coef read 306
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 310 ); // i2cWrite  coef write 310
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1501 i2c data 0x0001   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0015, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 317 ); // i2cWrite  coef read 317
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 321 ); // i2cWrite  coef write 321
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 325 ); // i2cWrite  coef write 325
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1501, 0x00000000, 329 ); // i2cWrite  coef write 329
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 333 ); // i2cWrite  coef read 333
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 337 ); // i2cWrite  coef read 337
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 341 ); // i2cWrite  coef read 341
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 345 ); // i2cWrite  coef write 345
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 352 ); // i2cWrite  coef read 352
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 356 ); // i2cWrite  coef write 356
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 360 ); // i2cWrite  coef write 360
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 364 ); // i2cWrite  coef write 364
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 368 ); // i2cWrite  coef read 368
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 372 ); // i2cWrite  coef read 372
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 376 ); // i2cWrite  coef read 376
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 380 ); // i2cWrite  coef write 380
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1800 i2c data 0x0000   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0018, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 387 ); // i2cWrite  coef read 387
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 391 ); // i2cWrite  coef write 391
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 395 ); // i2cWrite  coef write 395
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1800, 0x00000000, 399 ); // i2cWrite  coef write 399
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 403 ); // i2cWrite  coef read 403
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 407 ); // i2cWrite  coef read 407
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 411 ); // i2cWrite  coef read 411
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 415 ); // i2cWrite  coef write 415
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 422 ); // i2cWrite  coef read 422
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 426 ); // i2cWrite  coef write 426
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 430 ); // i2cWrite  coef write 430
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 434 ); // i2cWrite  coef write 434
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 438 ); // i2cWrite  coef read 438
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 442 ); // i2cWrite  coef read 442
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 446 ); // i2cWrite  coef read 446
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 450 ); // i2cWrite  coef write 450
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 457 ); // i2cWrite  coef read 457
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 461 ); // i2cWrite  coef write 461
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 465 ); // i2cWrite  coef write 465
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 469 ); // i2cWrite  coef write 469
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 473 ); // i2cWrite  coef read 473
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 477 ); // i2cWrite  coef read 477
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 481 ); // i2cWrite  coef read 481
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 485 ); // i2cWrite  coef write 485
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 492 ); // i2cWrite  coef read 492
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 496 ); // i2cWrite  coef write 496
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 500 ); // i2cWrite  coef write 500
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 504 ); // i2cWrite  coef write 504
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 508 ); // i2cWrite  coef read 508
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 512 ); // i2cWrite  coef read 512
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 516 ); // i2cWrite  coef read 516
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 520 ); // i2cWrite  coef write 520
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 527 ); // i2cWrite  coef read 527
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 531 ); // i2cWrite  coef write 531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 535 ); // i2cWrite  coef write 535
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 539 ); // i2cWrite  coef write 539
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 543 ); // i2cWrite  coef read 543
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 547 ); // i2cWrite  coef read 547
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 551 ); // i2cWrite  coef read 551
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 555 ); // i2cWrite  coef write 555
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 562 ); // i2cWrite  coef read 562
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 566 ); // i2cWrite  coef write 566
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 570 ); // i2cWrite  coef write 570
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 574 ); // i2cWrite  coef write 574
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 578 ); // i2cWrite  coef read 578
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 582 ); // i2cWrite  coef read 582
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 586 ); // i2cWrite  coef read 586
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 590 ); // i2cWrite  coef write 590
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 597 ); // i2cWrite  coef read 597
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 601 ); // i2cWrite  coef write 601
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 605 ); // i2cWrite  coef write 605
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 609 ); // i2cWrite  coef write 609
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 613 ); // i2cWrite  coef read 613
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 617 ); // i2cWrite  coef read 617
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 621 ); // i2cWrite  coef read 621
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 625 ); // i2cWrite  coef write 625
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 632 ); // i2cRead  coef read 632
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 636 ); // i2cRead  coef write 636
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 640 ); // i2cRead  coef write 640
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 644 ); // i2cRead  coef write 644
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 648 ); // i2cRead  coef read 648
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 652 ); // i2cRead  coef read 652
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 656 ); // i2cRead  coef read 656
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 660 ); // i2cRead  coef read 660
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 664 ); // i2cRead  coef write 664
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 671 ); // i2cWrite  coef read 671
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 675 ); // i2cWrite  coef write 675
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 679 ); // i2cWrite  coef write 679
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 683 ); // i2cWrite  coef write 683
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 687 ); // i2cWrite  coef read 687
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 691 ); // i2cWrite  coef read 691
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 695 ); // i2cWrite  coef read 695
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 699 ); // i2cWrite  coef write 699
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0009, 0x003f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 706 ); // i2cWrite  coef read 706
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 710 ); // i2cWrite  coef write 710
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 714 ); // i2cWrite  coef write 714
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 718 ); // i2cWrite  coef write 718
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 722 ); // i2cWrite  coef read 722
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 726 ); // i2cWrite  coef read 726
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 730 ); // i2cWrite  coef read 730
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 734 ); // i2cWrite  coef write 734
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x000a, 0x007f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 741 ); // i2cWrite  coef read 741
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 745 ); // i2cWrite  coef write 745
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 749 ); // i2cWrite  coef write 749
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 753 ); // i2cWrite  coef write 753
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 757 ); // i2cWrite  coef read 757
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 761 ); // i2cWrite  coef read 761
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 765 ); // i2cWrite  coef read 765
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 769 ); // i2cWrite  coef write 769
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x000f, 0x000e, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 776 ); // i2cWrite  coef read 776
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 780 ); // i2cWrite  coef write 780
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 784 ); // i2cWrite  coef write 784
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 788 ); // i2cWrite  coef write 788
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 792 ); // i2cWrite  coef read 792
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 796 ); // i2cWrite  coef read 796
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 800 ); // i2cWrite  coef read 800
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 804 ); // i2cWrite  coef write 804
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 811 ); // i2cWrite  coef read 811
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 815 ); // i2cWrite  coef write 815
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 819 ); // i2cWrite  coef write 819
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 823 ); // i2cWrite  coef write 823
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 827 ); // i2cWrite  coef read 827
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 831 ); // i2cWrite  coef read 831
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 835 ); // i2cWrite  coef read 835
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 839 ); // i2cWrite  coef write 839
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 846 ); // i2cWrite  coef read 846
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 850 ); // i2cWrite  coef write 850
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 854 ); // i2cWrite  coef write 854
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 858 ); // i2cWrite  coef write 858
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 862 ); // i2cWrite  coef read 862
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 866 ); // i2cWrite  coef read 866
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 870 ); // i2cWrite  coef read 870
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 874 ); // i2cWrite  coef write 874
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 881 ); // i2cWrite  coef read 881
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 885 ); // i2cWrite  coef write 885
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 889 ); // i2cWrite  coef write 889
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 893 ); // i2cWrite  coef write 893
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 897 ); // i2cWrite  coef read 897
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 901 ); // i2cWrite  coef read 901
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 905 ); // i2cWrite  coef read 905
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 909 ); // i2cWrite  coef write 909
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 916 ); // i2cWrite  coef read 916
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 920 ); // i2cWrite  coef write 920
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 924 ); // i2cWrite  coef write 924
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 928 ); // i2cWrite  coef write 928
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 932 ); // i2cWrite  coef read 932
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 936 ); // i2cWrite  coef read 936
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 940 ); // i2cWrite  coef read 940
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 944 ); // i2cWrite  coef write 944
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1502 i2c data 0x0002   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0015, 0x0002, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 951 ); // i2cWrite  coef read 951
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 955 ); // i2cWrite  coef write 955
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 959 ); // i2cWrite  coef write 959
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1502, 0x00000000, 963 ); // i2cWrite  coef write 963
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 967 ); // i2cWrite  coef read 967
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 971 ); // i2cWrite  coef read 971
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 975 ); // i2cWrite  coef read 975
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 979 ); // i2cWrite  coef write 979
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 986 ); // i2cWrite  coef read 986
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 990 ); // i2cWrite  coef write 990
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 994 ); // i2cWrite  coef write 994
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 998 ); // i2cWrite  coef write 998
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1002 ); // i2cWrite  coef read 1002
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1006 ); // i2cWrite  coef read 1006
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1010 ); // i2cWrite  coef read 1010
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1014 ); // i2cWrite  coef write 1014
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1801 i2c data 0x0001   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0018, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1021 ); // i2cWrite  coef read 1021
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1025 ); // i2cWrite  coef write 1025
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1029 ); // i2cWrite  coef write 1029
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1801, 0x00000000, 1033 ); // i2cWrite  coef write 1033
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1037 ); // i2cWrite  coef read 1037
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1041 ); // i2cWrite  coef read 1041
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1045 ); // i2cWrite  coef read 1045
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1049 ); // i2cWrite  coef write 1049
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1056 ); // i2cWrite  coef read 1056
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1060 ); // i2cWrite  coef write 1060
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1064 ); // i2cWrite  coef write 1064
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 1068 ); // i2cWrite  coef write 1068
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1072 ); // i2cWrite  coef read 1072
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1076 ); // i2cWrite  coef read 1076
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1080 ); // i2cWrite  coef read 1080
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1084 ); // i2cWrite  coef write 1084
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1091 ); // i2cWrite  coef read 1091
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1095 ); // i2cWrite  coef write 1095
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1099 ); // i2cWrite  coef write 1099
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 1103 ); // i2cWrite  coef write 1103
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1107 ); // i2cWrite  coef read 1107
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1111 ); // i2cWrite  coef read 1111
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1115 ); // i2cWrite  coef read 1115
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1119 ); // i2cWrite  coef write 1119
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1126 ); // i2cWrite  coef read 1126
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1130 ); // i2cWrite  coef write 1130
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1134 ); // i2cWrite  coef write 1134
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 1138 ); // i2cWrite  coef write 1138
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1142 ); // i2cWrite  coef read 1142
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1146 ); // i2cWrite  coef read 1146
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1150 ); // i2cWrite  coef read 1150
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1154 ); // i2cWrite  coef write 1154
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1161 ); // i2cWrite  coef read 1161
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1165 ); // i2cWrite  coef write 1165
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1169 ); // i2cWrite  coef write 1169
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 1173 ); // i2cWrite  coef write 1173
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1177 ); // i2cWrite  coef read 1177
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1181 ); // i2cWrite  coef read 1181
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1185 ); // i2cWrite  coef read 1185
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1189 ); // i2cWrite  coef write 1189
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1196 ); // i2cWrite  coef read 1196
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1200 ); // i2cWrite  coef write 1200
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1204 ); // i2cWrite  coef write 1204
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 1208 ); // i2cWrite  coef write 1208
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1212 ); // i2cWrite  coef read 1212
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1216 ); // i2cWrite  coef read 1216
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1220 ); // i2cWrite  coef read 1220
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1224 ); // i2cWrite  coef write 1224
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1231 ); // i2cWrite  coef read 1231
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1235 ); // i2cWrite  coef write 1235
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1239 ); // i2cWrite  coef write 1239
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 1243 ); // i2cWrite  coef write 1243
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1247 ); // i2cWrite  coef read 1247
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1251 ); // i2cWrite  coef read 1251
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1255 ); // i2cWrite  coef read 1255
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1259 ); // i2cWrite  coef write 1259
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1266 ); // i2cRead  coef read 1266
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1270 ); // i2cRead  coef write 1270
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1274 ); // i2cRead  coef write 1274
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 1278 ); // i2cRead  coef write 1278
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1282 ); // i2cRead  coef read 1282
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1286 ); // i2cRead  coef read 1286
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 1290 ); // i2cRead  coef read 1290
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1294 ); // i2cRead  coef read 1294
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1298 ); // i2cRead  coef write 1298
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1305 ); // i2cWrite  coef read 1305
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1309 ); // i2cWrite  coef write 1309
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1313 ); // i2cWrite  coef write 1313
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 1317 ); // i2cWrite  coef write 1317
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1321 ); // i2cWrite  coef read 1321
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1325 ); // i2cWrite  coef read 1325
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1329 ); // i2cWrite  coef read 1329
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1333 ); // i2cWrite  coef write 1333
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0009, 0x003f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1340 ); // i2cWrite  coef read 1340
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1344 ); // i2cWrite  coef write 1344
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1348 ); // i2cWrite  coef write 1348
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 1352 ); // i2cWrite  coef write 1352
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1356 ); // i2cWrite  coef read 1356
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1360 ); // i2cWrite  coef read 1360
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1364 ); // i2cWrite  coef read 1364
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1368 ); // i2cWrite  coef write 1368
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x000a, 0x007f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1375 ); // i2cWrite  coef read 1375
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1379 ); // i2cWrite  coef write 1379
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1383 ); // i2cWrite  coef write 1383
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 1387 ); // i2cWrite  coef write 1387
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1391 ); // i2cWrite  coef read 1391
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1395 ); // i2cWrite  coef read 1395
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1399 ); // i2cWrite  coef read 1399
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1403 ); // i2cWrite  coef write 1403
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x000f, 0x000e, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1410 ); // i2cWrite  coef read 1410
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1414 ); // i2cWrite  coef write 1414
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1418 ); // i2cWrite  coef write 1418
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 1422 ); // i2cWrite  coef write 1422
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1426 ); // i2cWrite  coef read 1426
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1430 ); // i2cWrite  coef read 1430
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1434 ); // i2cWrite  coef read 1434
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1438 ); // i2cWrite  coef write 1438
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1445 ); // i2cWrite  coef read 1445
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1449 ); // i2cWrite  coef write 1449
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1453 ); // i2cWrite  coef write 1453
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 1457 ); // i2cWrite  coef write 1457
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1461 ); // i2cWrite  coef read 1461
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1465 ); // i2cWrite  coef read 1465
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1469 ); // i2cWrite  coef read 1469
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1473 ); // i2cWrite  coef write 1473
//      snd_hda i2cWrite end
}

static void volup_setup_TDM_7472(struct hda_codec *codec)
{
        int retval;

        // so this seems to be where we see the same code as in unmute and volup
        // this seems to be setup for node 0x03 chain - which seems to use node 0x25 and amps 0x74 and 0x72

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00324033
//      snd_hda:     stream format 3 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 1483 ); //   coef read 1483
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x0840, 0x00000000, 1487 ); //   coef write 1487
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 1491 ); //   coef read 1491
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x0860, 0x00000000, 1495 ); //   coef write 1495

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 1499 ); //   coef read 1499

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 1504 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 1504
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 1508 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 1508
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 1512 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 1512

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 1515


        // enable output on node 0x25

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 1519); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02570740
//      snd_hda:     37 ['AC_PINCTL_OUT_EN']

}

static void volup_setup_amps_7472(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1523 ); // i2cWrite  coef read 1523
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1527 ); // i2cWrite  coef write 1527
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1531 ); // i2cWrite  coef write 1531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 1535 ); // i2cWrite  coef write 1535
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1539 ); // i2cWrite  coef read 1539
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1543 ); // i2cWrite  coef read 1543
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1547 ); // i2cWrite  coef read 1547
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1551 ); // i2cWrite  coef write 1551
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1558 ); // i2cWrite  coef read 1558
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1562 ); // i2cWrite  coef write 1562
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1566 ); // i2cWrite  coef write 1566
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 1570 ); // i2cWrite  coef write 1570
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1574 ); // i2cWrite  coef read 1574
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1578 ); // i2cWrite  coef read 1578
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1582 ); // i2cWrite  coef read 1582
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1586 ); // i2cWrite  coef write 1586
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1593 ); // i2cWrite  coef read 1593
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1597 ); // i2cWrite  coef write 1597
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1601 ); // i2cWrite  coef write 1601
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 1605 ); // i2cWrite  coef write 1605
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1609 ); // i2cWrite  coef read 1609
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1613 ); // i2cWrite  coef read 1613
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1617 ); // i2cWrite  coef read 1617
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1621 ); // i2cWrite  coef write 1621
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1504 i2c data 0x0004   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0015, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1628 ); // i2cWrite  coef read 1628
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1632 ); // i2cWrite  coef write 1632
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1636 ); // i2cWrite  coef write 1636
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1504, 0x00000000, 1640 ); // i2cWrite  coef write 1640
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1644 ); // i2cWrite  coef read 1644
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1648 ); // i2cWrite  coef read 1648
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1652 ); // i2cWrite  coef read 1652
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1656 ); // i2cWrite  coef write 1656
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1663 ); // i2cWrite  coef read 1663
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1667 ); // i2cWrite  coef write 1667
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1671 ); // i2cWrite  coef write 1671
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 1675 ); // i2cWrite  coef write 1675
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1679 ); // i2cWrite  coef read 1679
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1683 ); // i2cWrite  coef read 1683
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1687 ); // i2cWrite  coef read 1687
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1691 ); // i2cWrite  coef write 1691
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1802 i2c data 0x0002   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0018, 0x0002, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1698 ); // i2cWrite  coef read 1698
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1702 ); // i2cWrite  coef write 1702
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1706 ); // i2cWrite  coef write 1706
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1802, 0x00000000, 1710 ); // i2cWrite  coef write 1710
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1714 ); // i2cWrite  coef read 1714
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1718 ); // i2cWrite  coef read 1718
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1722 ); // i2cWrite  coef read 1722
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1726 ); // i2cWrite  coef write 1726
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1733 ); // i2cWrite  coef read 1733
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1737 ); // i2cWrite  coef write 1737
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1741 ); // i2cWrite  coef write 1741
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 1745 ); // i2cWrite  coef write 1745
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1749 ); // i2cWrite  coef read 1749
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1753 ); // i2cWrite  coef read 1753
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1757 ); // i2cWrite  coef read 1757
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1761 ); // i2cWrite  coef write 1761
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1768 ); // i2cWrite  coef read 1768
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1772 ); // i2cWrite  coef write 1772
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1776 ); // i2cWrite  coef write 1776
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 1780 ); // i2cWrite  coef write 1780
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1784 ); // i2cWrite  coef read 1784
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1788 ); // i2cWrite  coef read 1788
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1792 ); // i2cWrite  coef read 1792
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1796 ); // i2cWrite  coef write 1796
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1803 ); // i2cWrite  coef read 1803
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1807 ); // i2cWrite  coef write 1807
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1811 ); // i2cWrite  coef write 1811
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 1815 ); // i2cWrite  coef write 1815
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1819 ); // i2cWrite  coef read 1819
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1823 ); // i2cWrite  coef read 1823
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1827 ); // i2cWrite  coef read 1827
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1831 ); // i2cWrite  coef write 1831
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1838 ); // i2cWrite  coef read 1838
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1842 ); // i2cWrite  coef write 1842
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1846 ); // i2cWrite  coef write 1846
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 1850 ); // i2cWrite  coef write 1850
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1854 ); // i2cWrite  coef read 1854
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1858 ); // i2cWrite  coef read 1858
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1862 ); // i2cWrite  coef read 1862
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1866 ); // i2cWrite  coef write 1866
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1873 ); // i2cWrite  coef read 1873
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1877 ); // i2cWrite  coef write 1877
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1881 ); // i2cWrite  coef write 1881
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 1885 ); // i2cWrite  coef write 1885
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1889 ); // i2cWrite  coef read 1889
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1893 ); // i2cWrite  coef read 1893
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1897 ); // i2cWrite  coef read 1897
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1901 ); // i2cWrite  coef write 1901
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1908 ); // i2cWrite  coef read 1908
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1912 ); // i2cWrite  coef write 1912
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1916 ); // i2cWrite  coef write 1916
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 1920 ); // i2cWrite  coef write 1920
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1924 ); // i2cWrite  coef read 1924
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1928 ); // i2cWrite  coef read 1928
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1932 ); // i2cWrite  coef read 1932
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1936 ); // i2cWrite  coef write 1936
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1943 ); // i2cRead  coef read 1943
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1947 ); // i2cRead  coef write 1947
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1951 ); // i2cRead  coef write 1951
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 1955 ); // i2cRead  coef write 1955
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1959 ); // i2cRead  coef read 1959
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1963 ); // i2cRead  coef read 1963
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 1967 ); // i2cRead  coef read 1967
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1971 ); // i2cRead  coef read 1971
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1975 ); // i2cRead  coef write 1975
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1982 ); // i2cWrite  coef read 1982
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1986 ); // i2cWrite  coef write 1986
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1990 ); // i2cWrite  coef write 1990
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 1994 ); // i2cWrite  coef write 1994
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1998 ); // i2cWrite  coef read 1998
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2002 ); // i2cWrite  coef read 2002
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2006 ); // i2cWrite  coef read 2006
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2010 ); // i2cWrite  coef write 2010
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0009, 0x003f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2017 ); // i2cWrite  coef read 2017
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2021 ); // i2cWrite  coef write 2021
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2025 ); // i2cWrite  coef write 2025
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 2029 ); // i2cWrite  coef write 2029
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2033 ); // i2cWrite  coef read 2033
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2037 ); // i2cWrite  coef read 2037
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2041 ); // i2cWrite  coef read 2041
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2045 ); // i2cWrite  coef write 2045
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x000a, 0x007f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2052 ); // i2cWrite  coef read 2052
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2056 ); // i2cWrite  coef write 2056
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2060 ); // i2cWrite  coef write 2060
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 2064 ); // i2cWrite  coef write 2064
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2068 ); // i2cWrite  coef read 2068
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2072 ); // i2cWrite  coef read 2072
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2076 ); // i2cWrite  coef read 2076
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2080 ); // i2cWrite  coef write 2080
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x000f, 0x000e, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2087 ); // i2cWrite  coef read 2087
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2091 ); // i2cWrite  coef write 2091
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2095 ); // i2cWrite  coef write 2095
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 2099 ); // i2cWrite  coef write 2099
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2103 ); // i2cWrite  coef read 2103
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2107 ); // i2cWrite  coef read 2107
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2111 ); // i2cWrite  coef read 2111
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2115 ); // i2cWrite  coef write 2115
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2122 ); // i2cWrite  coef read 2122
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2126 ); // i2cWrite  coef write 2126
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2130 ); // i2cWrite  coef write 2130
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 2134 ); // i2cWrite  coef write 2134
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2138 ); // i2cWrite  coef read 2138
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2142 ); // i2cWrite  coef read 2142
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2146 ); // i2cWrite  coef read 2146
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2150 ); // i2cWrite  coef write 2150
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x001c, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2157 ); // i2cWrite  coef read 2157
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2161 ); // i2cWrite  coef write 2161
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2165 ); // i2cWrite  coef write 2165
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 2169 ); // i2cWrite  coef write 2169
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2173 ); // i2cWrite  coef read 2173
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2177 ); // i2cWrite  coef read 2177
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2181 ); // i2cWrite  coef read 2181
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2185 ); // i2cWrite  coef write 2185
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0010, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2192 ); // i2cWrite  coef read 2192
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2196 ); // i2cWrite  coef write 2196
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2200 ); // i2cWrite  coef write 2200
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 2204 ); // i2cWrite  coef write 2204
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2208 ); // i2cWrite  coef read 2208
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2212 ); // i2cWrite  coef read 2212
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2216 ); // i2cWrite  coef read 2216
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2220 ); // i2cWrite  coef write 2220
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0014, 0x00e4, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2227 ); // i2cWrite  coef read 2227
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2231 ); // i2cWrite  coef write 2231
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2235 ); // i2cWrite  coef write 2235
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 2239 ); // i2cWrite  coef write 2239
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2243 ); // i2cWrite  coef read 2243
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2247 ); // i2cWrite  coef read 2247
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2251 ); // i2cWrite  coef read 2251
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2255 ); // i2cWrite  coef write 2255
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1508 i2c data 0x0008   reg anal: PCMRXEnablesA
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0015, 0x0008, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2262 ); // i2cWrite  coef read 2262
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2266 ); // i2cWrite  coef write 2266
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2270 ); // i2cWrite  coef write 2270
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1508, 0x00000000, 2274 ); // i2cWrite  coef write 2274
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2278 ); // i2cWrite  coef read 2278
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2282 ); // i2cWrite  coef read 2282
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2286 ); // i2cWrite  coef read 2286
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2290 ); // i2cWrite  coef write 2290
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0016, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2297 ); // i2cWrite  coef read 2297
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2301 ); // i2cWrite  coef write 2301
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2305 ); // i2cWrite  coef write 2305
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 2309 ); // i2cWrite  coef write 2309
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2313 ); // i2cWrite  coef read 2313
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2317 ); // i2cWrite  coef read 2317
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2321 ); // i2cWrite  coef read 2321
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2325 ); // i2cWrite  coef write 2325
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1803 i2c data 0x0003   reg anal: MonoMixChannelSource
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0018, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2332 ); // i2cWrite  coef read 2332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2336 ); // i2cWrite  coef write 2336
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2340 ); // i2cWrite  coef write 2340
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1803, 0x00000000, 2344 ); // i2cWrite  coef write 2344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2348 ); // i2cWrite  coef read 2348
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2352 ); // i2cWrite  coef read 2352
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2356 ); // i2cWrite  coef read 2356
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2360 ); // i2cWrite  coef write 2360
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0019, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2367 ); // i2cWrite  coef read 2367
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2371 ); // i2cWrite  coef write 2371
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2375 ); // i2cWrite  coef write 2375
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 2379 ); // i2cWrite  coef write 2379
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2383 ); // i2cWrite  coef read 2383
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2387 ); // i2cWrite  coef read 2387
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2391 ); // i2cWrite  coef read 2391
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2395 ); // i2cWrite  coef write 2395
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002d, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2402 ); // i2cWrite  coef read 2402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2406 ); // i2cWrite  coef write 2406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2410 ); // i2cWrite  coef write 2410
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d01, 0x00000000, 2414 ); // i2cWrite  coef write 2414
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2418 ); // i2cWrite  coef read 2418
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2422 ); // i2cWrite  coef read 2422
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2426 ); // i2cWrite  coef read 2426
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2430 ); // i2cWrite  coef write 2430
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x002e, 0x0005, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2437 ); // i2cWrite  coef read 2437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2441 ); // i2cWrite  coef write 2441
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2445 ); // i2cWrite  coef write 2445
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 2449 ); // i2cWrite  coef write 2449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2453 ); // i2cWrite  coef read 2453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2457 ); // i2cWrite  coef read 2457
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2461 ); // i2cWrite  coef read 2461
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2465 ); // i2cWrite  coef write 2465
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004a, 0x0021, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2472 ); // i2cWrite  coef read 2472
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2476 ); // i2cWrite  coef write 2476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2480 ); // i2cWrite  coef write 2480
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 2484 ); // i2cWrite  coef write 2484
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2488 ); // i2cWrite  coef read 2488
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2492 ); // i2cWrite  coef read 2492
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2496 ); // i2cWrite  coef read 2496
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2500 ); // i2cWrite  coef write 2500
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x004d, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2507 ); // i2cWrite  coef read 2507
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2511 ); // i2cWrite  coef write 2511
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2515 ); // i2cWrite  coef write 2515
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 2519 ); // i2cWrite  coef write 2519
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2523 ); // i2cWrite  coef read 2523
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2527 ); // i2cWrite  coef read 2527
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2531 ); // i2cWrite  coef read 2531
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2535 ); // i2cWrite  coef write 2535
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0055, 0x0034, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2542 ); // i2cWrite  coef read 2542
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2546 ); // i2cWrite  coef write 2546
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2550 ); // i2cWrite  coef write 2550
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 2554 ); // i2cWrite  coef write 2554
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2558 ); // i2cWrite  coef read 2558
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2562 ); // i2cWrite  coef read 2562
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2566 ); // i2cWrite  coef read 2566
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2570 ); // i2cWrite  coef write 2570
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0011, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2577 ); // i2cRead  coef read 2577
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2581 ); // i2cRead  coef write 2581
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2585 ); // i2cRead  coef write 2585
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 2589 ); // i2cRead  coef write 2589
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2593 ); // i2cRead  coef read 2593
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2597 ); // i2cRead  coef read 2597
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 2601 ); // i2cRead  coef read 2601
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2605 ); // i2cRead  coef read 2605
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2609 ); // i2cRead  coef write 2609
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0011, 0x0007, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2616 ); // i2cWrite  coef read 2616
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2620 ); // i2cWrite  coef write 2620
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2624 ); // i2cWrite  coef write 2624
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 2628 ); // i2cWrite  coef write 2628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2632 ); // i2cWrite  coef read 2632
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2636 ); // i2cWrite  coef read 2636
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2640 ); // i2cWrite  coef read 2640
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2644 ); // i2cWrite  coef write 2644
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0009, 0x003f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2651 ); // i2cWrite  coef read 2651
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2655 ); // i2cWrite  coef write 2655
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2659 ); // i2cWrite  coef write 2659
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 2663 ); // i2cWrite  coef write 2663
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2667 ); // i2cWrite  coef read 2667
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2671 ); // i2cWrite  coef read 2671
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2675 ); // i2cWrite  coef read 2675
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2679 ); // i2cWrite  coef write 2679
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x000a, 0x007f, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2686 ); // i2cWrite  coef read 2686
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2690 ); // i2cWrite  coef write 2690
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2694 ); // i2cWrite  coef write 2694
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 2698 ); // i2cWrite  coef write 2698
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2702 ); // i2cWrite  coef read 2702
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2706 ); // i2cWrite  coef read 2706
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2710 ); // i2cWrite  coef read 2710
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2714 ); // i2cWrite  coef write 2714
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x000f, 0x000e, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2721 ); // i2cWrite  coef read 2721
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2725 ); // i2cWrite  coef write 2725
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2729 ); // i2cWrite  coef write 2729
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 2733 ); // i2cWrite  coef write 2733
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2737 ); // i2cWrite  coef read 2737
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2741 ); // i2cWrite  coef read 2741
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2745 ); // i2cWrite  coef read 2745
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2749 ); // i2cWrite  coef write 2749
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0001, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2756 ); // i2cWrite  coef read 2756
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2760 ); // i2cWrite  coef write 2760
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2764 ); // i2cWrite  coef write 2764
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 2768 ); // i2cWrite  coef write 2768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2772 ); // i2cWrite  coef read 2772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2776 ); // i2cWrite  coef read 2776
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2780 ); // i2cWrite  coef read 2780
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2784 ); // i2cWrite  coef write 2784
//      snd_hda i2cWrite end

}

static void volup_sync_converters(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        // remove normal channel mapping

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 2790); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0x00000000, 2792 ); // coef write mask 2792
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0xundef, 0x00000000, 2792 ); // coef write mask 2792

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 2798); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000001, 2800 ); // coef write mask 2800
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000001, 2800 ); // coef write mask 2800

        // and reset back to normal channel mapping

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]


        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2813); // 0x022f0500
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2814); // 0x023f0500

}

static void volup_sync_converters1(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        // remove normal channel mapping

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 2824); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0x00000003, 2826 ); // coef write mask 2826
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0xundef, 0x00000003, 2826 ); // coef write mask 2826

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 2832); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000002, 2834 ); // coef write mask 2834
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0xundef, 0x00000002, 2834 ); // coef write mask 2834

        // this is extra for the "disable"
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 2840 ); //   coef read 2840
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 2844 ); //   coef read 2844

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000220, 2848 ); // coef write mask 2848
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0xundef, 0x00000220, 2848 ); // coef write mask 2848

        // and reset back to normal channel mapping

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

}

static void volup_amps_disable_6462(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2858 ); // i2cWrite  coef read 2858
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2862 ); // i2cWrite  coef write 2862
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 2866 ); // i2cWrite  coef write 2866
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 2870 ); // i2cWrite  coef write 2870
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2874 ); // i2cWrite  coef read 2874
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2878 ); // i2cWrite  coef read 2878
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2882 ); // i2cWrite  coef read 2882
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2886 ); // i2cWrite  coef write 2886
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2893 ); // i2cRead  coef read 2893
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2897 ); // i2cRead  coef write 2897
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 2901 ); // i2cRead  coef write 2901
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 2905 ); // i2cRead  coef write 2905
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2909 ); // i2cRead  coef read 2909
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2913 ); // i2cRead  coef read 2913
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 2917 ); // i2cRead  coef read 2917
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2921 ); // i2cRead  coef read 2921
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2925 ); // i2cRead  coef write 2925
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2932 ); // i2cRead  coef read 2932
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2936 ); // i2cRead  coef write 2936
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 2940 ); // i2cRead  coef write 2940
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 2944 ); // i2cRead  coef write 2944
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2948 ); // i2cRead  coef read 2948
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2952 ); // i2cRead  coef read 2952
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 2956 ); // i2cRead  coef read 2956
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2960 ); // i2cRead  coef read 2960
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2964 ); // i2cRead  coef write 2964
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2971 ); // i2cRead  coef read 2971
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2975 ); // i2cRead  coef write 2975
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 2979 ); // i2cRead  coef write 2979
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 2983 ); // i2cRead  coef write 2983
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2987 ); // i2cRead  coef read 2987
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2991 ); // i2cRead  coef read 2991
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 2995 ); // i2cRead  coef read 2995
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2999 ); // i2cRead  coef read 2999
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3003 ); // i2cRead  coef write 3003
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3010 ); // i2cWrite  coef read 3010
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3014 ); // i2cWrite  coef write 3014
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 3018 ); // i2cWrite  coef write 3018
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 3022 ); // i2cWrite  coef write 3022
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3026 ); // i2cWrite  coef read 3026
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3030 ); // i2cWrite  coef read 3030
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3034 ); // i2cWrite  coef read 3034
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3038 ); // i2cWrite  coef write 3038
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3045 ); // i2cRead  coef read 3045
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3049 ); // i2cRead  coef write 3049
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 3053 ); // i2cRead  coef write 3053
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 3057 ); // i2cRead  coef write 3057
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3061 ); // i2cRead  coef read 3061
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3065 ); // i2cRead  coef read 3065
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 3069 ); // i2cRead  coef read 3069
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3073 ); // i2cRead  coef read 3073
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3077 ); // i2cRead  coef write 3077
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3084 ); // i2cRead  coef read 3084
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3088 ); // i2cRead  coef write 3088
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 3092 ); // i2cRead  coef write 3092
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 3096 ); // i2cRead  coef write 3096
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3100 ); // i2cRead  coef read 3100
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3104 ); // i2cRead  coef read 3104
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 3108 ); // i2cRead  coef read 3108
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3112 ); // i2cRead  coef read 3112
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3116 ); // i2cRead  coef write 3116
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3123 ); // i2cRead  coef read 3123
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3127 ); // i2cRead  coef write 3127
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 3131 ); // i2cRead  coef write 3131
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 3135 ); // i2cRead  coef write 3135
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3139 ); // i2cRead  coef read 3139
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3143 ); // i2cRead  coef read 3143
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 3147 ); // i2cRead  coef read 3147
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3151 ); // i2cRead  coef read 3151
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3155 ); // i2cRead  coef write 3155
//      snd_hda i2cRead end

}

static void volup_putative_tdm_disable_6462(struct hda_codec *codec)
{
        int retval;

        // this could be disabling the TDM

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 3161 ); //   coef read 3161
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x8800, 0x00000000, 3165 ); //   coef write 3165

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000820, 3169 ); //   coef read 3169
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x8820, 0x00000000, 3173 ); //   coef write 3173

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 3177 ); //   coef read 3177
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 3181 ); //   coef read 3181
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 3185 ); //   coef read 3185
//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 3190 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 3190
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 3194 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 3194
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 3198 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 3198

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 3201

        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00220000
//      snd_hda:     stream format 2 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 3207); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02470700
//      snd_hda:     36 []

}

static void volup_amps_disable_7472(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3211 ); // i2cWrite  coef read 3211
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3215 ); // i2cWrite  coef write 3215
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 3219 ); // i2cWrite  coef write 3219
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 3223 ); // i2cWrite  coef write 3223
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3227 ); // i2cWrite  coef read 3227
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3231 ); // i2cWrite  coef read 3231
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3235 ); // i2cWrite  coef read 3235
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3239 ); // i2cWrite  coef write 3239
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3246 ); // i2cRead  coef read 3246
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3250 ); // i2cRead  coef write 3250
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 3254 ); // i2cRead  coef write 3254
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 3258 ); // i2cRead  coef write 3258
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3262 ); // i2cRead  coef read 3262
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3266 ); // i2cRead  coef read 3266
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 3270 ); // i2cRead  coef read 3270
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3274 ); // i2cRead  coef read 3274
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3278 ); // i2cRead  coef write 3278
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3285 ); // i2cRead  coef read 3285
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3289 ); // i2cRead  coef write 3289
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 3293 ); // i2cRead  coef write 3293
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 3297 ); // i2cRead  coef write 3297
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3301 ); // i2cRead  coef read 3301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3305 ); // i2cRead  coef read 3305
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 3309 ); // i2cRead  coef read 3309
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3313 ); // i2cRead  coef read 3313
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3317 ); // i2cRead  coef write 3317
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3324 ); // i2cRead  coef read 3324
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3328 ); // i2cRead  coef write 3328
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 3332 ); // i2cRead  coef write 3332
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 3336 ); // i2cRead  coef write 3336
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3340 ); // i2cRead  coef read 3340
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3344 ); // i2cRead  coef read 3344
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 3348 ); // i2cRead  coef read 3348
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3352 ); // i2cRead  coef read 3352
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3356 ); // i2cRead  coef write 3356
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3363 ); // i2cWrite  coef read 3363
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3367 ); // i2cWrite  coef write 3367
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 3371 ); // i2cWrite  coef write 3371
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 3375 ); // i2cWrite  coef write 3375
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3379 ); // i2cWrite  coef read 3379
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3383 ); // i2cWrite  coef read 3383
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3387 ); // i2cWrite  coef read 3387
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3391 ); // i2cWrite  coef write 3391
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3398 ); // i2cRead  coef read 3398
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3402 ); // i2cRead  coef write 3402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 3406 ); // i2cRead  coef write 3406
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 3410 ); // i2cRead  coef write 3410
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3414 ); // i2cRead  coef read 3414
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3418 ); // i2cRead  coef read 3418
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 3422 ); // i2cRead  coef read 3422
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3426 ); // i2cRead  coef read 3426
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3430 ); // i2cRead  coef write 3430
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3437 ); // i2cRead  coef read 3437
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3441 ); // i2cRead  coef write 3441
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 3445 ); // i2cRead  coef write 3445
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 3449 ); // i2cRead  coef write 3449
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3453 ); // i2cRead  coef read 3453
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3457 ); // i2cRead  coef read 3457
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 3461 ); // i2cRead  coef read 3461
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3465 ); // i2cRead  coef read 3465
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3469 ); // i2cRead  coef write 3469
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3476 ); // i2cRead  coef read 3476
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3480 ); // i2cRead  coef write 3480
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 3484 ); // i2cRead  coef write 3484
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 3488 ); // i2cRead  coef write 3488
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3492 ); // i2cRead  coef read 3492
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3496 ); // i2cRead  coef read 3496
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 3500 ); // i2cRead  coef read 3500
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3504 ); // i2cRead  coef read 3504
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3508 ); // i2cRead  coef write 3508
//      snd_hda i2cRead end

}

static void volup_putative_tdm_disable_7472(struct hda_codec *codec)
{
        int retval;

        // this could be disabling the TDM

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 3514 ); //   coef read 3514
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x8840, 0x00000000, 3518 ); //   coef write 3518
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00000860, 3522 ); //   coef read 3522
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x8860, 0x00000000, 3526 ); //   coef write 3526

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00005401, 3530 ); // coef write mask 3530
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0xundef, 0x00005401, 3530 ); // coef write mask 3530

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000220, 3536 ); //   coef read 3536
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 3540 ); //   coef write 3540

        // AppleHDATDMBusManagerCS8409::setupTDMPath or disableTDMPath calls AppleHDATDMBusManagerCS8409::configureTDMUR
        // AppleHDATDMBusManagerCS8409::configureTDMUR only place calls this
        // this is AppleHDATDMBusManagerCS8409::tdmInUse
        // which reads from 0x19 to 0x57 in a loop if the snd_hda_coef_item returns 0 till the read value
        // does not have the word sign bit set (ie 0x8000) or finish all 0x57

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 3544 ); //   coef read 3544
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 3548 ); //   coef read 3548
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 3552 ); //   coef read 3552
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 3556 ); //   coef read 3556
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008000, 3560 ); //   coef read 3560
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 3564 ); //   coef read 3564
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008000, 3568 ); //   coef read 3568
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 3572 ); //   coef read 3572
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 3576 ); //   coef read 3576
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 3580 ); //   coef read 3580
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 3584 ); //   coef read 3584
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 3588 ); //   coef read 3588
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 3592 ); //   coef read 3592
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 3596 ); //   coef read 3596
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 3600 ); //   coef read 3600
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 3604 ); //   coef read 3604
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 3608 ); //   coef read 3608
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 3612 ); //   coef read 3612
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 3616 ); //   coef read 3616
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 3620 ); //   coef read 3620
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 3624 ); //   coef read 3624
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 3628 ); //   coef read 3628
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 3632 ); //   coef read 3632
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 3636 ); //   coef read 3636
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 3640 ); //   coef read 3640
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 3644 ); //   coef read 3644
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 3648 ); //   coef read 3648
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 3652 ); //   coef read 3652
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 3656 ); //   coef read 3656
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 3660 ); //   coef read 3660
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 3664 ); //   coef read 3664
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 3668 ); //   coef read 3668
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 3672 ); //   coef read 3672
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 3676 ); //   coef read 3676
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 3680 ); //   coef read 3680
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 3684 ); //   coef read 3684
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 3688 ); //   coef read 3688
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 3692 ); //   coef read 3692
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 3696 ); //   coef read 3696
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 3700 ); //   coef read 3700
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 3704 ); //   coef read 3704
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 3708 ); //   coef read 3708
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 3712 ); //   coef read 3712
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 3716 ); //   coef read 3716
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 3720 ); //   coef read 3720
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 3724 ); //   coef read 3724
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 3728 ); //   coef read 3728
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 3732 ); //   coef read 3732
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 3736 ); //   coef read 3736
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 3740 ); //   coef read 3740
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 3744 ); //   coef read 3744
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 3748 ); //   coef read 3748
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 3752 ); //   coef read 3752
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 3756 ); //   coef read 3756
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 3760 ); //   coef read 3760
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 3764 ); //   coef read 3764
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 3768 ); //   coef read 3768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 3772 ); //   coef read 3772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 3776 ); //   coef read 3776
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 3780 ); //   coef read 3780
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 3784 ); //   coef read 3784
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 3788 ); //   coef read 3788
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 3792 ); //   coef read 3792

        // AppleHDATDMBusManagerCS8409::configureTDMUR
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 3797 ); //   coef write 3797

        // this is new - setting to 0
        // only see this in AppleHDAWidgetCS8409::performPowerRailRestore
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00000000);


        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00320000
//      snd_hda:     stream format 3 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 3806); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02570700
//      snd_hda:     37 []

}

static void volup_amps_disable2_6462(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3813 ); // i2cWrite  coef read 3813
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3817 ); // i2cWrite  coef write 3817
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 3821 ); // i2cWrite  coef write 3821
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 3825 ); // i2cWrite  coef write 3825
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3829 ); // i2cWrite  coef read 3829
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3833 ); // i2cWrite  coef read 3833
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3837 ); // i2cWrite  coef read 3837
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3841 ); // i2cWrite  coef write 3841
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3848 ); // i2cRead  coef read 3848
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3852 ); // i2cRead  coef write 3852
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 3856 ); // i2cRead  coef write 3856
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 3860 ); // i2cRead  coef write 3860
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3864 ); // i2cRead  coef read 3864
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3868 ); // i2cRead  coef read 3868
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 3872 ); // i2cRead  coef read 3872
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3876 ); // i2cRead  coef read 3876
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3880 ); // i2cRead  coef write 3880
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3887 ); // i2cRead  coef read 3887
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3891 ); // i2cRead  coef write 3891
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 3895 ); // i2cRead  coef write 3895
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 3899 ); // i2cRead  coef write 3899
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3903 ); // i2cRead  coef read 3903
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3907 ); // i2cRead  coef read 3907
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 3911 ); // i2cRead  coef read 3911
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3915 ); // i2cRead  coef read 3915
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3919 ); // i2cRead  coef write 3919
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3926 ); // i2cRead  coef read 3926
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3930 ); // i2cRead  coef write 3930
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 3934 ); // i2cRead  coef write 3934
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 3938 ); // i2cRead  coef write 3938
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3942 ); // i2cRead  coef read 3942
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3946 ); // i2cRead  coef read 3946
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 3950 ); // i2cRead  coef read 3950
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3954 ); // i2cRead  coef read 3954
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3958 ); // i2cRead  coef write 3958
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 3965 ); // i2cWrite  coef read 3965
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 3969 ); // i2cWrite  coef write 3969
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 3973 ); // i2cWrite  coef write 3973
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 3977 ); // i2cWrite  coef write 3977
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3981 ); // i2cWrite  coef read 3981
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 3985 ); // i2cWrite  coef read 3985
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 3989 ); // i2cWrite  coef read 3989
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 3993 ); // i2cWrite  coef write 3993
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4000 ); // i2cRead  coef read 4000
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4004 ); // i2cRead  coef write 4004
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 4008 ); // i2cRead  coef write 4008
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 4012 ); // i2cRead  coef write 4012
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4016 ); // i2cRead  coef read 4016
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4020 ); // i2cRead  coef read 4020
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 4024 ); // i2cRead  coef read 4024
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4028 ); // i2cRead  coef read 4028
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4032 ); // i2cRead  coef write 4032
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4039 ); // i2cRead  coef read 4039
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4043 ); // i2cRead  coef write 4043
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 4047 ); // i2cRead  coef write 4047
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 4051 ); // i2cRead  coef write 4051
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4055 ); // i2cRead  coef read 4055
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4059 ); // i2cRead  coef read 4059
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 4063 ); // i2cRead  coef read 4063
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4067 ); // i2cRead  coef read 4067
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4071 ); // i2cRead  coef write 4071
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4078 ); // i2cRead  coef read 4078
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4082 ); // i2cRead  coef write 4082
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 4086 ); // i2cRead  coef write 4086
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 4090 ); // i2cRead  coef write 4090
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4094 ); // i2cRead  coef read 4094
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4098 ); // i2cRead  coef read 4098
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 4102 ); // i2cRead  coef read 4102
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4106 ); // i2cRead  coef read 4106
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4110 ); // i2cRead  coef write 4110
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

}


static void volup_amps_disable2_7472(struct hda_codec *codec)
{
        int retval;

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4124 ); // i2cWrite  coef read 4124
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4128 ); // i2cWrite  coef write 4128
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 4132 ); // i2cWrite  coef write 4132
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 4136 ); // i2cWrite  coef write 4136
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4140 ); // i2cWrite  coef read 4140
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4144 ); // i2cWrite  coef read 4144
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4148 ); // i2cWrite  coef read 4148
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4152 ); // i2cWrite  coef write 4152
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4163 ); // i2cRead  coef read 4163
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4167 ); // i2cRead  coef write 4167
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 4171 ); // i2cRead  coef write 4171
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 4175 ); // i2cRead  coef write 4175
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4179 ); // i2cRead  coef read 4179
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4183 ); // i2cRead  coef read 4183
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 4187 ); // i2cRead  coef read 4187
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4191 ); // i2cRead  coef read 4191
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4195 ); // i2cRead  coef write 4195
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4206 ); // i2cRead  coef read 4206
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4210 ); // i2cRead  coef write 4210
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 4214 ); // i2cRead  coef write 4214
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 4218 ); // i2cRead  coef write 4218
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4222 ); // i2cRead  coef read 4222
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4226 ); // i2cRead  coef read 4226
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 4230 ); // i2cRead  coef read 4230
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4234 ); // i2cRead  coef read 4234
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4238 ); // i2cRead  coef write 4238
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4249 ); // i2cRead  coef read 4249
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4253 ); // i2cRead  coef write 4253
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 4257 ); // i2cRead  coef write 4257
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 4261 ); // i2cRead  coef write 4261
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4265 ); // i2cRead  coef read 4265
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4269 ); // i2cRead  coef read 4269
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 4273 ); // i2cRead  coef read 4273
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4277 ); // i2cRead  coef read 4277
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4281 ); // i2cRead  coef write 4281
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        //cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4292 ); // i2cWrite  coef read 4292
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4296 ); // i2cWrite  coef write 4296
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 4300 ); // i2cWrite  coef write 4300
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 4304 ); // i2cWrite  coef write 4304
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4308 ); // i2cWrite  coef read 4308
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4312 ); // i2cWrite  coef read 4312
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4316 ); // i2cWrite  coef read 4316
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4320 ); // i2cWrite  coef write 4320
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4331 ); // i2cRead  coef read 4331
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4335 ); // i2cRead  coef write 4335
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 4339 ); // i2cRead  coef write 4339
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 4343 ); // i2cRead  coef write 4343
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4347 ); // i2cRead  coef read 4347
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4351 ); // i2cRead  coef read 4351
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 4355 ); // i2cRead  coef read 4355
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4359 ); // i2cRead  coef read 4359
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4363 ); // i2cRead  coef write 4363
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4374 ); // i2cRead  coef read 4374
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4378 ); // i2cRead  coef write 4378
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 4382 ); // i2cRead  coef write 4382
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 4386 ); // i2cRead  coef write 4386
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4390 ); // i2cRead  coef read 4390
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4394 ); // i2cRead  coef read 4394
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 4398 ); // i2cRead  coef read 4398
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4402 ); // i2cRead  coef read 4402
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4406 ); // i2cRead  coef write 4406
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        //cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 4417 ); // i2cRead  coef read 4417
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 4421 ); // i2cRead  coef write 4421
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 4425 ); // i2cRead  coef write 4425
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 4429 ); // i2cRead  coef write 4429
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4433 ); // i2cRead  coef read 4433
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 4437 ); // i2cRead  coef read 4437
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 4441 ); // i2cRead  coef read 4441
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 4445 ); // i2cRead  coef read 4445
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 4449 ); // i2cRead  coef write 4449
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4456); // 0x022f0500
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 4457); // 0x023f0500

}

static void cs_8409_volup_data(struct hda_codec *codec)
{ 
        //int retval;


        printk("snd_hda_intel: command nid cs_8409_volup_data start");

        volup_start(codec);

        volup_enable_mic(codec);


        volup_setup_TDM_6462(codec);

        volup_setup_amps_6462(codec);

        volup_setup_TDM_7472(codec);

        volup_setup_amps_7472(codec);

        volup_sync_converters(codec);


        volup_sync_converters1(codec);

        volup_amps_disable_6462(codec);

        volup_putative_tdm_disable_6462(codec);

        volup_amps_disable_7472(codec);

        volup_putative_tdm_disable_7472(codec);

        volup_amps_disable2_6462(codec);

        volup_amps_disable2_7472(codec);


        printk("snd_hda_intel: command nid cs_8409_volup_data end");

}


static void play_start(struct hda_codec *codec)
{
        int retval;


        retval = snd_hda_codec_read_check(codec, 0x00, 0, AC_VERB_PARAMETERS, 0x00000000, 0x10138409, 1); // 0x000f0000

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D0);

}

static void play_setup_TDM_6462(struct hda_codec *codec)
{
        int retval;

        // this seems to be setup for node 0x02 chain - which seems to use node 0x24 and amps 0x64 and 0x62

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00224033
//      snd_hda:     stream format 2 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 16 ); //   coef read 16
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 20 ); //   coef write 20

//      snd_hda: # AppleHDATDMBusManagerCS8409::setSampleRate: 
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000200, 25 ); // coef write mask 25
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 31 ); // coef write mask 31
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x000008ff, 37 ); // coef write mask 37
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0200, 0xundef, 0x00000200, 25 ); // coef write mask 25
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 31 ); // coef write mask 31
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0xundef, 0x000008ff, 37 ); // coef write mask 37

//      snd_hda: # AppleHDATDMBusManagerCS8409::setupTDMPath: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 44 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 44
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x0800, 0x00000000, 48 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 48
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 52 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 52
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x0820, 0x00000000, 56 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 56

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 60 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 60
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0xb000, 0x00000000, 64 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 64
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0004, 0x0000, 0x000008ff, 68 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 68
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0004, 0x08ff, 0x00000000, 72 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 72
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 76 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 76

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0x00008000, 80 ); // coef write mask 80
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0x00000001, 86 ); // coef write mask 86
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0x00000001, 92 ); // coef write mask 92
        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0x00000280, 98 ); // coef write mask 98
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0003, 0x8000, 0xundef, 0x00008000, 80 ); // coef write mask 80
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0005, 0x0001, 0xundef, 0x00000001, 86 ); // coef write mask 86
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x5401, 0xundef, 0x00000001, 92 ); // coef write mask 92
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0002, 0x0280, 0xundef, 0x00000280, 98 ); // coef write mask 98

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000200, 104 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef read 104
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000000, 108 ); // AppleHDATDMBusManagerCS8409::setupTDMPath  coef write 108

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 112 ); //   coef read 112

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 117 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 117
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 121 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 121
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 125 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 125

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 128


        // enable output node 0x24

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 132); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02470740
//      snd_hda:     36 ['AC_PINCTL_OUT_EN']

}


static void play_setup_amps_6462(struct hda_codec *codec)
{
        //int retval;


        // HPFDCBlocker new as of June 2019

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x001c, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 136 ); // i2cWrite  coef read 136
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 140 ); // i2cWrite  coef write 140
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 144 ); // i2cWrite  coef write 144
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 148 ); // i2cWrite  coef write 148
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 152 ); // i2cWrite  coef read 152
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 156 ); // i2cWrite  coef read 156
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 160 ); // i2cWrite  coef read 160
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 164 ); // i2cWrite  coef write 164
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0010, 0x0008, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 171 ); // i2cWrite  coef read 171
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 175 ); // i2cWrite  coef write 175
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 179 ); // i2cWrite  coef write 179
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 183 ); // i2cWrite  coef write 183
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 187 ); // i2cWrite  coef read 187
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 191 ); // i2cWrite  coef read 191
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 195 ); // i2cWrite  coef read 195
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 199 ); // i2cWrite  coef write 199
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0014, 0x00e4, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 206 ); // i2cWrite  coef read 206
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 210 ); // i2cWrite  coef write 210
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 214 ); // i2cWrite  coef write 214
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 218 ); // i2cWrite  coef write 218
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 222 ); // i2cWrite  coef read 222
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 226 ); // i2cWrite  coef read 226
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 230 ); // i2cWrite  coef read 230
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 234 ); // i2cWrite  coef write 234
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1501 i2c data 0x0001   reg anal: PCMRXEnablesA
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0015, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 241 ); // i2cWrite  coef read 241
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 245 ); // i2cWrite  coef write 245
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 249 ); // i2cWrite  coef write 249
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1501, 0x00000000, 253 ); // i2cWrite  coef write 253
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 257 ); // i2cWrite  coef read 257
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 261 ); // i2cWrite  coef read 261
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 265 ); // i2cWrite  coef read 265
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 269 ); // i2cWrite  coef write 269
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0016, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 276 ); // i2cWrite  coef read 276
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 280 ); // i2cWrite  coef write 280
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 284 ); // i2cWrite  coef write 284
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 288 ); // i2cWrite  coef write 288
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 292 ); // i2cWrite  coef read 292
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 296 ); // i2cWrite  coef read 296
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 300 ); // i2cWrite  coef read 300
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 304 ); // i2cWrite  coef write 304
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1800 i2c data 0x0000   reg anal: MonoMixChannelSource
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0018, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 311 ); // i2cWrite  coef read 311
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 315 ); // i2cWrite  coef write 315
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 319 ); // i2cWrite  coef write 319
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1800, 0x00000000, 323 ); // i2cWrite  coef write 323
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 327 ); // i2cWrite  coef read 327
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 331 ); // i2cWrite  coef read 331
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 335 ); // i2cWrite  coef read 335
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 339 ); // i2cWrite  coef write 339
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0019, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 346 ); // i2cWrite  coef read 346
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 350 ); // i2cWrite  coef write 350
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 354 ); // i2cWrite  coef write 354
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 358 ); // i2cWrite  coef write 358
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 362 ); // i2cWrite  coef read 362
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 366 ); // i2cWrite  coef read 366
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 370 ); // i2cWrite  coef read 370
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 374 ); // i2cWrite  coef write 374
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x002d, 0x0030, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 381 ); // i2cWrite  coef read 381
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 385 ); // i2cWrite  coef write 385
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 389 ); // i2cWrite  coef write 389
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 393 ); // i2cWrite  coef write 393
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 397 ); // i2cWrite  coef read 397
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 401 ); // i2cWrite  coef read 401
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 405 ); // i2cWrite  coef read 405
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 409 ); // i2cWrite  coef write 409
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x002e, 0x0005, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 416 ); // i2cWrite  coef read 416
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 420 ); // i2cWrite  coef write 420
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 424 ); // i2cWrite  coef write 424
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 428 ); // i2cWrite  coef write 428
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 432 ); // i2cWrite  coef read 432
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 436 ); // i2cWrite  coef read 436
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 440 ); // i2cWrite  coef read 440
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 444 ); // i2cWrite  coef write 444
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x004a, 0x0021, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 451 ); // i2cWrite  coef read 451
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 455 ); // i2cWrite  coef write 455
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 459 ); // i2cWrite  coef write 459
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 463 ); // i2cWrite  coef write 463
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 467 ); // i2cWrite  coef read 467
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 471 ); // i2cWrite  coef read 471
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 475 ); // i2cWrite  coef read 475
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 479 ); // i2cWrite  coef write 479
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x004d, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 486 ); // i2cWrite  coef read 486
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 490 ); // i2cWrite  coef write 490
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 494 ); // i2cWrite  coef write 494
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 498 ); // i2cWrite  coef write 498
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 502 ); // i2cWrite  coef read 502
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 506 ); // i2cWrite  coef read 506
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 510 ); // i2cWrite  coef read 510
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 514 ); // i2cWrite  coef write 514
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0055, 0x0034, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 521 ); // i2cWrite  coef read 521
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 525 ); // i2cWrite  coef write 525
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 529 ); // i2cWrite  coef write 529
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 533 ); // i2cWrite  coef write 533
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 537 ); // i2cWrite  coef read 537
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 541 ); // i2cWrite  coef read 541
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 545 ); // i2cWrite  coef read 545
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 549 ); // i2cWrite  coef write 549
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cRead(codec, 0x64, 0x0011, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 556 ); // i2cRead  coef read 556
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 560 ); // i2cRead  coef write 560
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 564 ); // i2cRead  coef write 564
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 568 ); // i2cRead  coef write 568
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 572 ); // i2cRead  coef read 572
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 576 ); // i2cRead  coef read 576
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 580 ); // i2cRead  coef read 580
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 584 ); // i2cRead  coef read 584
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 588 ); // i2cRead  coef write 588
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0011, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 595 ); // i2cWrite  coef read 595
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 599 ); // i2cWrite  coef write 599
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 603 ); // i2cWrite  coef write 603
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 607 ); // i2cWrite  coef write 607
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 611 ); // i2cWrite  coef read 611
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 615 ); // i2cWrite  coef read 615
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 619 ); // i2cWrite  coef read 619
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 623 ); // i2cWrite  coef write 623
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0009, 0x003f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 630 ); // i2cWrite  coef read 630
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 634 ); // i2cWrite  coef write 634
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 638 ); // i2cWrite  coef write 638
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 642 ); // i2cWrite  coef write 642
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 646 ); // i2cWrite  coef read 646
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 650 ); // i2cWrite  coef read 650
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 654 ); // i2cWrite  coef read 654
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 658 ); // i2cWrite  coef write 658
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x000a, 0x007f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 665 ); // i2cWrite  coef read 665
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 669 ); // i2cWrite  coef write 669
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 673 ); // i2cWrite  coef write 673
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 677 ); // i2cWrite  coef write 677
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 681 ); // i2cWrite  coef read 681
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 685 ); // i2cWrite  coef read 685
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 689 ); // i2cWrite  coef read 689
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 693 ); // i2cWrite  coef write 693
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x000f, 0x000e, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 700 ); // i2cWrite  coef read 700
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 704 ); // i2cWrite  coef write 704
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 708 ); // i2cWrite  coef write 708
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 712 ); // i2cWrite  coef write 712
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 716 ); // i2cWrite  coef read 716
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 720 ); // i2cWrite  coef read 720
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 724 ); // i2cWrite  coef read 724
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 728 ); // i2cWrite  coef write 728
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 735 ); // i2cWrite  coef read 735
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 739 ); // i2cWrite  coef write 739
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 743 ); // i2cWrite  coef write 743
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 747 ); // i2cWrite  coef write 747
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 751 ); // i2cWrite  coef read 751
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 755 ); // i2cWrite  coef read 755
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 759 ); // i2cWrite  coef read 759
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 763 ); // i2cWrite  coef write 763
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x001c, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 770 ); // i2cWrite  coef read 770
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 774 ); // i2cWrite  coef write 774
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 778 ); // i2cWrite  coef write 778
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 782 ); // i2cWrite  coef write 782
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 786 ); // i2cWrite  coef read 786
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 790 ); // i2cWrite  coef read 790
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 794 ); // i2cWrite  coef read 794
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 798 ); // i2cWrite  coef write 798
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0010, 0x0008, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 805 ); // i2cWrite  coef read 805
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 809 ); // i2cWrite  coef write 809
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 813 ); // i2cWrite  coef write 813
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 817 ); // i2cWrite  coef write 817
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 821 ); // i2cWrite  coef read 821
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 825 ); // i2cWrite  coef read 825
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 829 ); // i2cWrite  coef read 829
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 833 ); // i2cWrite  coef write 833
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0014, 0x00e4, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 840 ); // i2cWrite  coef read 840
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 844 ); // i2cWrite  coef write 844
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 848 ); // i2cWrite  coef write 848
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 852 ); // i2cWrite  coef write 852
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 856 ); // i2cWrite  coef read 856
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 860 ); // i2cWrite  coef read 860
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 864 ); // i2cWrite  coef read 864
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 868 ); // i2cWrite  coef write 868
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1502 i2c data 0x0002   reg anal: PCMRXEnablesA
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0015, 0x0002, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 875 ); // i2cWrite  coef read 875
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 879 ); // i2cWrite  coef write 879
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 883 ); // i2cWrite  coef write 883
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1502, 0x00000000, 887 ); // i2cWrite  coef write 887
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 891 ); // i2cWrite  coef read 891
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 895 ); // i2cWrite  coef read 895
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 899 ); // i2cWrite  coef read 899
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 903 ); // i2cWrite  coef write 903
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0016, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 910 ); // i2cWrite  coef read 910
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 914 ); // i2cWrite  coef write 914
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 918 ); // i2cWrite  coef write 918
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 922 ); // i2cWrite  coef write 922
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 926 ); // i2cWrite  coef read 926
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 930 ); // i2cWrite  coef read 930
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 934 ); // i2cWrite  coef read 934
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 938 ); // i2cWrite  coef write 938
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1801 i2c data 0x0001   reg anal: MonoMixChannelSource
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0018, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 945 ); // i2cWrite  coef read 945
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 949 ); // i2cWrite  coef write 949
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 953 ); // i2cWrite  coef write 953
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1801, 0x00000000, 957 ); // i2cWrite  coef write 957
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 961 ); // i2cWrite  coef read 961
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 965 ); // i2cWrite  coef read 965
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 969 ); // i2cWrite  coef read 969
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 973 ); // i2cWrite  coef write 973
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0019, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 980 ); // i2cWrite  coef read 980
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 984 ); // i2cWrite  coef write 984
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 988 ); // i2cWrite  coef write 988
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 992 ); // i2cWrite  coef write 992
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 996 ); // i2cWrite  coef read 996
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1000 ); // i2cWrite  coef read 1000
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1004 ); // i2cWrite  coef read 1004
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1008 ); // i2cWrite  coef write 1008
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x002d, 0x0030, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1015 ); // i2cWrite  coef read 1015
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1019 ); // i2cWrite  coef write 1019
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1023 ); // i2cWrite  coef write 1023
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 1027 ); // i2cWrite  coef write 1027
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1031 ); // i2cWrite  coef read 1031
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1035 ); // i2cWrite  coef read 1035
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1039 ); // i2cWrite  coef read 1039
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1043 ); // i2cWrite  coef write 1043
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x002e, 0x0005, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1050 ); // i2cWrite  coef read 1050
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1054 ); // i2cWrite  coef write 1054
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1058 ); // i2cWrite  coef write 1058
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 1062 ); // i2cWrite  coef write 1062
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1066 ); // i2cWrite  coef read 1066
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1070 ); // i2cWrite  coef read 1070
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1074 ); // i2cWrite  coef read 1074
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1078 ); // i2cWrite  coef write 1078
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x004a, 0x0021, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1085 ); // i2cWrite  coef read 1085
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1089 ); // i2cWrite  coef write 1089
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1093 ); // i2cWrite  coef write 1093
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 1097 ); // i2cWrite  coef write 1097
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1101 ); // i2cWrite  coef read 1101
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1105 ); // i2cWrite  coef read 1105
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1109 ); // i2cWrite  coef read 1109
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1113 ); // i2cWrite  coef write 1113
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x004d, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1120 ); // i2cWrite  coef read 1120
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1124 ); // i2cWrite  coef write 1124
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1128 ); // i2cWrite  coef write 1128
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 1132 ); // i2cWrite  coef write 1132
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1136 ); // i2cWrite  coef read 1136
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1140 ); // i2cWrite  coef read 1140
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1144 ); // i2cWrite  coef read 1144
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1148 ); // i2cWrite  coef write 1148
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0055, 0x0034, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1155 ); // i2cWrite  coef read 1155
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1159 ); // i2cWrite  coef write 1159
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1163 ); // i2cWrite  coef write 1163
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 1167 ); // i2cWrite  coef write 1167
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1171 ); // i2cWrite  coef read 1171
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1175 ); // i2cWrite  coef read 1175
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1179 ); // i2cWrite  coef read 1179
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1183 ); // i2cWrite  coef write 1183
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cRead(codec, 0x62, 0x0011, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1190 ); // i2cRead  coef read 1190
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1194 ); // i2cRead  coef write 1194
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1198 ); // i2cRead  coef write 1198
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 1202 ); // i2cRead  coef write 1202
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1206 ); // i2cRead  coef read 1206
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1210 ); // i2cRead  coef read 1210
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 1214 ); // i2cRead  coef read 1214
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1218 ); // i2cRead  coef read 1218
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1222 ); // i2cRead  coef write 1222
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0011, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1229 ); // i2cWrite  coef read 1229
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1233 ); // i2cWrite  coef write 1233
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1237 ); // i2cWrite  coef write 1237
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 1241 ); // i2cWrite  coef write 1241
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1245 ); // i2cWrite  coef read 1245
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1249 ); // i2cWrite  coef read 1249
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1253 ); // i2cWrite  coef read 1253
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1257 ); // i2cWrite  coef write 1257
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0009, 0x003f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1264 ); // i2cWrite  coef read 1264
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1268 ); // i2cWrite  coef write 1268
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1272 ); // i2cWrite  coef write 1272
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 1276 ); // i2cWrite  coef write 1276
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1280 ); // i2cWrite  coef read 1280
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1284 ); // i2cWrite  coef read 1284
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1288 ); // i2cWrite  coef read 1288
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1292 ); // i2cWrite  coef write 1292
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x000a, 0x007f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1299 ); // i2cWrite  coef read 1299
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1303 ); // i2cWrite  coef write 1303
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1307 ); // i2cWrite  coef write 1307
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 1311 ); // i2cWrite  coef write 1311
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1315 ); // i2cWrite  coef read 1315
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1319 ); // i2cWrite  coef read 1319
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1323 ); // i2cWrite  coef read 1323
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1327 ); // i2cWrite  coef write 1327
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x000f, 0x000e, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1334 ); // i2cWrite  coef read 1334
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1338 ); // i2cWrite  coef write 1338
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1342 ); // i2cWrite  coef write 1342
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 1346 ); // i2cWrite  coef write 1346
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1350 ); // i2cWrite  coef read 1350
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1354 ); // i2cWrite  coef read 1354
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1358 ); // i2cWrite  coef read 1358
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1362 ); // i2cWrite  coef write 1362
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1369 ); // i2cWrite  coef read 1369
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1373 ); // i2cWrite  coef write 1373
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1377 ); // i2cWrite  coef write 1377
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 1381 ); // i2cWrite  coef write 1381
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1385 ); // i2cWrite  coef read 1385
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1389 ); // i2cWrite  coef read 1389
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1393 ); // i2cWrite  coef read 1393
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1397 ); // i2cWrite  coef write 1397
//      snd_hda i2cWrite end

}

static void play_setup_TDM_7472(struct hda_codec *codec)
{
        int retval;

        // this seems to be setup for node 0x03 chain - which seems to use node 0x25 and amps 0x74 and 0x72

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00004033); // 0x00324033
//      snd_hda:     stream format 3 [('CHAN', 4), ('RATE', 44100), ('BITS', 24), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 1407 ); //   coef read 1407
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x0840, 0x00000000, 1411 ); //   coef write 1411
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 1415 ); //   coef read 1415
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x0860, 0x00000000, 1419 ); //   coef write 1419

        // the following actually reads from 0x19 to 0x57 in a loop if the snd_hda_coef_item returns 0 till the read value
        // does not have the word sign bit set (ie 0x8000) or finish all 0x57

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 1423 ); //   coef read 1423

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 1428 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 1428
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 1432 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 1432
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 1436 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 1436

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 1439


        // enable output on node 0x25

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000000, 1443); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000040); // 0x02570740
//      snd_hda:     37 ['AC_PINCTL_OUT_EN']

}

static void play_setup_amps_7472(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x001c, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1447 ); // i2cWrite  coef read 1447
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1451 ); // i2cWrite  coef write 1451
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1455 ); // i2cWrite  coef write 1455
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 1459 ); // i2cWrite  coef write 1459
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1463 ); // i2cWrite  coef read 1463
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1467 ); // i2cWrite  coef read 1467
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1471 ); // i2cWrite  coef read 1471
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1475 ); // i2cWrite  coef write 1475
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0010, 0x0008, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1482 ); // i2cWrite  coef read 1482
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1486 ); // i2cWrite  coef write 1486
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1490 ); // i2cWrite  coef write 1490
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 1494 ); // i2cWrite  coef write 1494
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1498 ); // i2cWrite  coef read 1498
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1502 ); // i2cWrite  coef read 1502
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1506 ); // i2cWrite  coef read 1506
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1510 ); // i2cWrite  coef write 1510
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0014, 0x00e4, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1517 ); // i2cWrite  coef read 1517
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1521 ); // i2cWrite  coef write 1521
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1525 ); // i2cWrite  coef write 1525
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 1529 ); // i2cWrite  coef write 1529
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1533 ); // i2cWrite  coef read 1533
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1537 ); // i2cWrite  coef read 1537
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1541 ); // i2cWrite  coef read 1541
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1545 ); // i2cWrite  coef write 1545
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1504 i2c data 0x0004   reg anal: PCMRXEnablesA
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0015, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1552 ); // i2cWrite  coef read 1552
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1556 ); // i2cWrite  coef write 1556
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1560 ); // i2cWrite  coef write 1560
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1504, 0x00000000, 1564 ); // i2cWrite  coef write 1564
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1568 ); // i2cWrite  coef read 1568
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1572 ); // i2cWrite  coef read 1572
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1576 ); // i2cWrite  coef read 1576
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1580 ); // i2cWrite  coef write 1580
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0016, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1587 ); // i2cWrite  coef read 1587
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1591 ); // i2cWrite  coef write 1591
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1595 ); // i2cWrite  coef write 1595
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 1599 ); // i2cWrite  coef write 1599
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1603 ); // i2cWrite  coef read 1603
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1607 ); // i2cWrite  coef read 1607
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1611 ); // i2cWrite  coef read 1611
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1615 ); // i2cWrite  coef write 1615
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1802 i2c data 0x0002   reg anal: MonoMixChannelSource
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0018, 0x0002, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1622 ); // i2cWrite  coef read 1622
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1626 ); // i2cWrite  coef write 1626
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1630 ); // i2cWrite  coef write 1630
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1802, 0x00000000, 1634 ); // i2cWrite  coef write 1634
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1638 ); // i2cWrite  coef read 1638
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1642 ); // i2cWrite  coef read 1642
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1646 ); // i2cWrite  coef read 1646
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1650 ); // i2cWrite  coef write 1650
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0019, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1657 ); // i2cWrite  coef read 1657
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1661 ); // i2cWrite  coef write 1661
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1665 ); // i2cWrite  coef write 1665
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 1669 ); // i2cWrite  coef write 1669
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1673 ); // i2cWrite  coef read 1673
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1677 ); // i2cWrite  coef read 1677
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1681 ); // i2cWrite  coef read 1681
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1685 ); // i2cWrite  coef write 1685
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x002d, 0x0030, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1692 ); // i2cWrite  coef read 1692
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1696 ); // i2cWrite  coef write 1696
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1700 ); // i2cWrite  coef write 1700
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 1704 ); // i2cWrite  coef write 1704
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1708 ); // i2cWrite  coef read 1708
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1712 ); // i2cWrite  coef read 1712
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1716 ); // i2cWrite  coef read 1716
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1720 ); // i2cWrite  coef write 1720
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x002e, 0x0005, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1727 ); // i2cWrite  coef read 1727
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1731 ); // i2cWrite  coef write 1731
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1735 ); // i2cWrite  coef write 1735
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 1739 ); // i2cWrite  coef write 1739
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1743 ); // i2cWrite  coef read 1743
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1747 ); // i2cWrite  coef read 1747
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1751 ); // i2cWrite  coef read 1751
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1755 ); // i2cWrite  coef write 1755
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x004a, 0x0021, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1762 ); // i2cWrite  coef read 1762
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1766 ); // i2cWrite  coef write 1766
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1770 ); // i2cWrite  coef write 1770
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 1774 ); // i2cWrite  coef write 1774
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1778 ); // i2cWrite  coef read 1778
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1782 ); // i2cWrite  coef read 1782
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1786 ); // i2cWrite  coef read 1786
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1790 ); // i2cWrite  coef write 1790
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x004d, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1797 ); // i2cWrite  coef read 1797
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1801 ); // i2cWrite  coef write 1801
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1805 ); // i2cWrite  coef write 1805
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 1809 ); // i2cWrite  coef write 1809
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1813 ); // i2cWrite  coef read 1813
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1817 ); // i2cWrite  coef read 1817
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1821 ); // i2cWrite  coef read 1821
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1825 ); // i2cWrite  coef write 1825
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0055, 0x0034, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1832 ); // i2cWrite  coef read 1832
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1836 ); // i2cWrite  coef write 1836
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1840 ); // i2cWrite  coef write 1840
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 1844 ); // i2cWrite  coef write 1844
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1848 ); // i2cWrite  coef read 1848
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1852 ); // i2cWrite  coef read 1852
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1856 ); // i2cWrite  coef read 1856
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1860 ); // i2cWrite  coef write 1860
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cRead(codec, 0x74, 0x0011, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1867 ); // i2cRead  coef read 1867
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1871 ); // i2cRead  coef write 1871
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1875 ); // i2cRead  coef write 1875
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 1879 ); // i2cRead  coef write 1879
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1883 ); // i2cRead  coef read 1883
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1887 ); // i2cRead  coef read 1887
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 1891 ); // i2cRead  coef read 1891
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1895 ); // i2cRead  coef read 1895
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1899 ); // i2cRead  coef write 1899
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0011, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1906 ); // i2cWrite  coef read 1906
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1910 ); // i2cWrite  coef write 1910
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1914 ); // i2cWrite  coef write 1914
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 1918 ); // i2cWrite  coef write 1918
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1922 ); // i2cWrite  coef read 1922
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1926 ); // i2cWrite  coef read 1926
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1930 ); // i2cWrite  coef read 1930
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1934 ); // i2cWrite  coef write 1934
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0009, 0x003f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1941 ); // i2cWrite  coef read 1941
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1945 ); // i2cWrite  coef write 1945
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1949 ); // i2cWrite  coef write 1949
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 1953 ); // i2cWrite  coef write 1953
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1957 ); // i2cWrite  coef read 1957
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1961 ); // i2cWrite  coef read 1961
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1965 ); // i2cWrite  coef read 1965
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1969 ); // i2cWrite  coef write 1969
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x000a, 0x007f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1976 ); // i2cWrite  coef read 1976
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1980 ); // i2cWrite  coef write 1980
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1984 ); // i2cWrite  coef write 1984
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 1988 ); // i2cWrite  coef write 1988
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1992 ); // i2cWrite  coef read 1992
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1996 ); // i2cWrite  coef read 1996
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2000 ); // i2cWrite  coef read 2000
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2004 ); // i2cWrite  coef write 2004
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x000f, 0x000e, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2011 ); // i2cWrite  coef read 2011
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2015 ); // i2cWrite  coef write 2015
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2019 ); // i2cWrite  coef write 2019
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 2023 ); // i2cWrite  coef write 2023
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2027 ); // i2cWrite  coef read 2027
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2031 ); // i2cWrite  coef read 2031
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2035 ); // i2cWrite  coef read 2035
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2039 ); // i2cWrite  coef write 2039
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2046 ); // i2cWrite  coef read 2046
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2050 ); // i2cWrite  coef write 2050
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 2054 ); // i2cWrite  coef write 2054
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 2058 ); // i2cWrite  coef write 2058
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2062 ); // i2cWrite  coef read 2062
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2066 ); // i2cWrite  coef read 2066
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2070 ); // i2cWrite  coef read 2070
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2074 ); // i2cWrite  coef write 2074
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1c01 i2c data 0x0001   reg anal: DigitalFilter           : HPFDCBlocker
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x001c, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2081 ); // i2cWrite  coef read 2081
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2085 ); // i2cWrite  coef write 2085
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2089 ); // i2cWrite  coef write 2089
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1c01, 0x00000000, 2093 ); // i2cWrite  coef write 2093
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2097 ); // i2cWrite  coef read 2097
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2101 ); // i2cWrite  coef read 2101
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2105 ); // i2cWrite  coef read 2105
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2109 ); // i2cWrite  coef write 2109
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1008 i2c data 0x0008   reg anal: PCMClockSetup           : 256 Bclks
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0010, 0x0008, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2116 ); // i2cWrite  coef read 2116
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2120 ); // i2cWrite  coef write 2120
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2124 ); // i2cWrite  coef write 2124
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1008, 0x00000000, 2128 ); // i2cWrite  coef write 2128
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2132 ); // i2cWrite  coef read 2132
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2136 ); // i2cWrite  coef read 2136
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2140 ); // i2cWrite  coef read 2140
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2144 ); // i2cWrite  coef write 2144
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x14e4 i2c data 0x00e4   reg anal: PCMModeConfig           : 32 bits TDM mode 2
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0014, 0x00e4, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2151 ); // i2cWrite  coef read 2151
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2155 ); // i2cWrite  coef write 2155
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2159 ); // i2cWrite  coef write 2159
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x14e4, 0x00000000, 2163 ); // i2cWrite  coef write 2163
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2167 ); // i2cWrite  coef read 2167
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2171 ); // i2cWrite  coef read 2171
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2175 ); // i2cWrite  coef read 2175
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2179 ); // i2cWrite  coef write 2179
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1508 i2c data 0x0008   reg anal: PCMRXEnablesA
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0015, 0x0008, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2186 ); // i2cWrite  coef read 2186
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2190 ); // i2cWrite  coef write 2190
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2194 ); // i2cWrite  coef write 2194
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1508, 0x00000000, 2198 ); // i2cWrite  coef write 2198
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2202 ); // i2cWrite  coef read 2202
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2206 ); // i2cWrite  coef read 2206
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2210 ); // i2cWrite  coef read 2210
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2214 ); // i2cWrite  coef write 2214
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1600 i2c data 0x0000   reg anal: PCMRXEnablesB
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0016, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2221 ); // i2cWrite  coef read 2221
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2225 ); // i2cWrite  coef write 2225
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2229 ); // i2cWrite  coef write 2229
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1600, 0x00000000, 2233 ); // i2cWrite  coef write 2233
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2237 ); // i2cWrite  coef read 2237
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2241 ); // i2cWrite  coef read 2241
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2245 ); // i2cWrite  coef read 2245
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2249 ); // i2cWrite  coef write 2249
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1803 i2c data 0x0003   reg anal: MonoMixChannelSource
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0018, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2256 ); // i2cWrite  coef read 2256
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2260 ); // i2cWrite  coef write 2260
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2264 ); // i2cWrite  coef write 2264
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1803, 0x00000000, 2268 ); // i2cWrite  coef write 2268
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2272 ); // i2cWrite  coef read 2272
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2276 ); // i2cWrite  coef read 2276
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2280 ); // i2cWrite  coef read 2280
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2284 ); // i2cWrite  coef write 2284
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1900 i2c data 0x0000   reg anal: MonoMixChannelConfig
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0019, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2291 ); // i2cWrite  coef read 2291
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2295 ); // i2cWrite  coef write 2295
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2299 ); // i2cWrite  coef write 2299
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1900, 0x00000000, 2303 ); // i2cWrite  coef write 2303
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2307 ); // i2cWrite  coef read 2307
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2311 ); // i2cWrite  coef read 2311
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2315 ); // i2cWrite  coef read 2315
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2319 ); // i2cWrite  coef write 2319
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2d01 i2c data 0x0001   reg anal: DigitalVolCtrl
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x002d, 0x0030, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2326 ); // i2cWrite  coef read 2326
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2330 ); // i2cWrite  coef write 2330
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2334 ); // i2cWrite  coef write 2334
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2d6f, 0x00000000, 2338 ); // i2cWrite  coef write 2338
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2342 ); // i2cWrite  coef read 2342
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2346 ); // i2cWrite  coef read 2346
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2350 ); // i2cWrite  coef read 2350
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2354 ); // i2cWrite  coef write 2354
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x2e05 i2c data 0x0005   reg anal: PathGain
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x002e, 0x0005, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2361 ); // i2cWrite  coef read 2361
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2365 ); // i2cWrite  coef write 2365
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2369 ); // i2cWrite  coef write 2369
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x2e05, 0x00000000, 2373 ); // i2cWrite  coef write 2373
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2377 ); // i2cWrite  coef read 2377
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2381 ); // i2cWrite  coef read 2381
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2385 ); // i2cWrite  coef read 2385
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2389 ); // i2cWrite  coef write 2389
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4a21 i2c data 0x0021   reg anal: SpeakerEnable           : AmpEnabled
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x004a, 0x0021, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2396 ); // i2cWrite  coef read 2396
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2400 ); // i2cWrite  coef write 2400
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2404 ); // i2cWrite  coef write 2404
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4a21, 0x00000000, 2408 ); // i2cWrite  coef write 2408
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2412 ); // i2cWrite  coef read 2412
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2416 ); // i2cWrite  coef read 2416
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2420 ); // i2cWrite  coef read 2420
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2424 ); // i2cWrite  coef write 2424
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x4d07 i2c data 0x0007   reg anal: RestartBehavior
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x004d, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2431 ); // i2cWrite  coef read 2431
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2435 ); // i2cWrite  coef write 2435
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2439 ); // i2cWrite  coef write 2439
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x4d07, 0x00000000, 2443 ); // i2cWrite  coef write 2443
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2447 ); // i2cWrite  coef read 2447
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2451 ); // i2cWrite  coef read 2451
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2455 ); // i2cWrite  coef read 2455
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2459 ); // i2cWrite  coef write 2459
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5534 i2c data 0x0034   reg anal: LimiterAttackRelease
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0055, 0x0034, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2466 ); // i2cWrite  coef read 2466
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2470 ); // i2cWrite  coef write 2470
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2474 ); // i2cWrite  coef write 2474
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5534, 0x00000000, 2478 ); // i2cWrite  coef write 2478
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2482 ); // i2cWrite  coef read 2482
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2486 ); // i2cWrite  coef read 2486
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2490 ); // i2cWrite  coef read 2490
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2494 ); // i2cWrite  coef write 2494
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x1100 i2c data 0x1107   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cRead(codec, 0x72, 0x0011, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2501 ); // i2cRead  coef read 2501
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2505 ); // i2cRead  coef write 2505
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2509 ); // i2cRead  coef write 2509
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x1100, 0x00000000, 2513 ); // i2cRead  coef write 2513
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2517 ); // i2cRead  coef read 2517
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2521 ); // i2cRead  coef read 2521
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00001107, 2525 ); // i2cRead  coef read 2525
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2529 ); // i2cRead  coef read 2529
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2533 ); // i2cRead  coef write 2533
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x1107 i2c data 0x0007   reg anal: PCMSampleSetup          : 44.1kHz
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0011, 0x0007, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2540 ); // i2cWrite  coef read 2540
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2544 ); // i2cWrite  coef write 2544
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2548 ); // i2cWrite  coef write 2548
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x1107, 0x00000000, 2552 ); // i2cWrite  coef write 2552
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2556 ); // i2cWrite  coef read 2556
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2560 ); // i2cWrite  coef read 2560
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2564 ); // i2cWrite  coef read 2564
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2568 ); // i2cWrite  coef write 2568
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x093f i2c data 0x003f   reg anal: InterruptClears0
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0009, 0x003f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2575 ); // i2cWrite  coef read 2575
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2579 ); // i2cWrite  coef write 2579
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2583 ); // i2cWrite  coef write 2583
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x093f, 0x00000000, 2587 ); // i2cWrite  coef write 2587
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2591 ); // i2cWrite  coef read 2591
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2595 ); // i2cWrite  coef read 2595
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2599 ); // i2cWrite  coef read 2599
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2603 ); // i2cWrite  coef write 2603
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x0a7f i2c data 0x007f   reg anal: InterruptClears1
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x000a, 0x007f, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2610 ); // i2cWrite  coef read 2610
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2614 ); // i2cWrite  coef write 2614
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2618 ); // i2cWrite  coef write 2618
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0a7f, 0x00000000, 2622 ); // i2cWrite  coef write 2622
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2626 ); // i2cWrite  coef read 2626
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2630 ); // i2cWrite  coef read 2630
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2634 ); // i2cWrite  coef read 2634
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2638 ); // i2cWrite  coef write 2638
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x0f0e i2c data 0x000e   reg anal: IRQClear1
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x000f, 0x000e, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2645 ); // i2cWrite  coef read 2645
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2649 ); // i2cWrite  coef write 2649
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2653 ); // i2cWrite  coef write 2653
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x0f0e, 0x00000000, 2657 ); // i2cWrite  coef write 2657
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2661 ); // i2cWrite  coef read 2661
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2665 ); // i2cWrite  coef read 2665
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2669 ); // i2cWrite  coef read 2669
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2673 ); // i2cWrite  coef write 2673
//      snd_hda i2cWrite end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5001 i2c data 0x0001   reg anal: GlobalEnable            : Enable
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0001, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 2680 ); // i2cWrite  coef read 2680
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 2684 ); // i2cWrite  coef write 2684
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 2688 ); // i2cWrite  coef write 2688
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5001, 0x00000000, 2692 ); // i2cWrite  coef write 2692
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2696 ); // i2cWrite  coef read 2696
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 2700 ); // i2cWrite  coef read 2700
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 2704 ); // i2cWrite  coef read 2704
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 2708 ); // i2cWrite  coef write 2708
//      snd_hda i2cWrite end

}

static void play_sync_converters(struct hda_codec *codec)
{
        int retval;

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301

        // remove normal channel mapping

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 2714); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0x00000000, 2716 ); // coef write mask 2716
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0001, 0xundef, 0x00000000, 2716 ); // coef write mask 2716

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 2722); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0x00000001, 2724 ); // coef write mask 2724
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0003, 0xundef, 0x00000001, 2724 ); // coef write mask 2724


        // and reset back to normal channel mapping

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]


        retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2737); // 0x022f0500
        retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 2738); // 0x023f0500

}


static void cs_8409_play_data(struct hda_codec *codec)
{
        //int retval1;
        //int retval2;

        printk("snd_hda_intel: command nid cs_8409_play_data start");

        play_start(codec);

        play_setup_TDM_6462(codec);

        play_setup_amps_6462(codec);

        play_setup_TDM_7472(codec);

        play_setup_amps_7472(codec);

        play_sync_converters(codec);

        // dont think its power - only nodes 0x22 and 0x23 are power capable
        //retval1 = snd_hda_codec_read(codec, 0x02, 0, AC_VERB_GET_POWER_STATE, 0);
        //retval2 = snd_hda_codec_read(codec, 0x03, 0, AC_VERB_GET_POWER_STATE, 0);
        //printk("snd_hda_intel: command nid BAD nodes 0x02 0x03 power %d %d", retval1, retval2);

        printk("snd_hda_intel: command nid cs_8409_play_data end");

}


static void playstop_start(struct hda_codec *codec)
{

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // 0x04770301
}

static void playstop_sync_converters(struct hda_codec *codec)
{
        int retval;

        // remove normal channel mapping

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x02, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000010, 4); // 0x002f0600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0x00000003, 6 ); // coef write mask 6
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0002, 0xundef, 0x00000003, 6 ); // coef write mask 6

//      snd_hda: # AppleHDAFunctionGroupCS8409::syncConverters: 
        retval = snd_hda_codec_read_check(codec, 0x03, 0, AC_VERB_GET_CONV, 0x00000000, 0x00000012, 12); // 0x003f0600
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000002, 14 ); // coef write mask 14
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0017, 0x0000, 0xundef, 0x00000002, 14 ); // coef write mask 14

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0017, 0x0000, 0x00000000, 20 ); //   coef read 20
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0018, 0x0000, 0x00000000, 24 ); //   coef read 24

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0x00000220, 28 ); // coef write mask 28
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0001, 0x0220, 0xundef, 0x00000220, 28 ); // coef write mask 28

        // and reset back to normal channel mapping

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000010); // 0x00270610
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 1)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000012); // 0x00370612
//      snd_hda:     conv stream channel map 3 [('CHAN', 2), ('STREAMID', 1)]

}


static void playstop_disable_amps_6462(struct hda_codec *codec)
{
        //int retval;


        // HPFDCBlocker new as of June 2019

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 38 ); // i2cWrite  coef read 38
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 42 ); // i2cWrite  coef write 42
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 46 ); // i2cWrite  coef write 46
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 50 ); // i2cWrite  coef write 50
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 54 ); // i2cWrite  coef read 54
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 58 ); // i2cWrite  coef read 58
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 62 ); // i2cWrite  coef read 62
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 66 ); // i2cWrite  coef write 66
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 73 ); // i2cRead  coef read 73
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 77 ); // i2cRead  coef write 77
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 81 ); // i2cRead  coef write 81
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 85 ); // i2cRead  coef write 85
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 89 ); // i2cRead  coef read 89
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 93 ); // i2cRead  coef read 93
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 97 ); // i2cRead  coef read 97
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 101 ); // i2cRead  coef read 101
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 105 ); // i2cRead  coef write 105
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 112 ); // i2cRead  coef read 112
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 116 ); // i2cRead  coef write 116
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 120 ); // i2cRead  coef write 120
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 124 ); // i2cRead  coef write 124
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 128 ); // i2cRead  coef read 128
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 132 ); // i2cRead  coef read 132
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 136 ); // i2cRead  coef read 136
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 140 ); // i2cRead  coef read 140
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 144 ); // i2cRead  coef write 144
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 151 ); // i2cRead  coef read 151
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 155 ); // i2cRead  coef write 155
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 159 ); // i2cRead  coef write 159
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 163 ); // i2cRead  coef write 163
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 167 ); // i2cRead  coef read 167
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 171 ); // i2cRead  coef read 171
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 175 ); // i2cRead  coef read 175
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 179 ); // i2cRead  coef read 179
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 183 ); // i2cRead  coef write 183
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 190 ); // i2cWrite  coef read 190
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 194 ); // i2cWrite  coef write 194
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 198 ); // i2cWrite  coef write 198
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 202 ); // i2cWrite  coef write 202
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 206 ); // i2cWrite  coef read 206
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 210 ); // i2cWrite  coef read 210
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 214 ); // i2cWrite  coef read 214
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 218 ); // i2cWrite  coef write 218
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 225 ); // i2cRead  coef read 225
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 229 ); // i2cRead  coef write 229
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 233 ); // i2cRead  coef write 233
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 237 ); // i2cRead  coef write 237
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 241 ); // i2cRead  coef read 241
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 245 ); // i2cRead  coef read 245
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 249 ); // i2cRead  coef read 249
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 253 ); // i2cRead  coef read 253
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 257 ); // i2cRead  coef write 257
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 264 ); // i2cRead  coef read 264
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 268 ); // i2cRead  coef write 268
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 272 ); // i2cRead  coef write 272
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 276 ); // i2cRead  coef write 276
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 280 ); // i2cRead  coef read 280
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 284 ); // i2cRead  coef read 284
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 288 ); // i2cRead  coef read 288
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 292 ); // i2cRead  coef read 292
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 296 ); // i2cRead  coef write 296
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 303 ); // i2cRead  coef read 303
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 307 ); // i2cRead  coef write 307
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 311 ); // i2cRead  coef write 311
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 315 ); // i2cRead  coef write 315
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 319 ); // i2cRead  coef read 319
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 323 ); // i2cRead  coef read 323
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 327 ); // i2cRead  coef read 327
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 331 ); // i2cRead  coef read 331
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 335 ); // i2cRead  coef write 335
//      snd_hda i2cRead end

}


static void playstop_disable_TDM_6462(struct hda_codec *codec)
{
        int retval;

        // this seems to be setup for node 0x02 chain - which seems to use node 0x24 and amps 0x64 and 0x62

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00000800, 341 ); //   coef read 341
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0019, 0x8800, 0x00000000, 345 ); //   coef write 345
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00000820, 349 ); //   coef read 349
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001a, 0x8820, 0x00000000, 353 ); //   coef write 353

        //      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 357 ); //   coef read 357
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 361 ); //   coef read 361
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 365 ); //   coef read 365

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: 
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x006b, 0x001f, 0x00000000, 370 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 370
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x0000400f, 374 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef read 374
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x400f, 0x00000000, 378 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  coef write 378

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00b6 ); // AppleHDATDMBusManagerCS8409::configureTDMUR  write verb 381


        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00270600
//      snd_hda:     conv stream channel map 2 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x02, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00220000
//      snd_hda:     stream format 2 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x24, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 387); // 0x024f0700
        snd_hda_codec_write(codec, 0x24, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02470700
//      snd_hda:     36 []

}

static void playstop_disable_amps_7472(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 391 ); // i2cWrite  coef read 391
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 395 ); // i2cWrite  coef write 395
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 399 ); // i2cWrite  coef write 399
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 403 ); // i2cWrite  coef write 403
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 407 ); // i2cWrite  coef read 407
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 411 ); // i2cWrite  coef read 411
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 415 ); // i2cWrite  coef read 415
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 419 ); // i2cWrite  coef write 419
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 426 ); // i2cRead  coef read 426
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 430 ); // i2cRead  coef write 430
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 434 ); // i2cRead  coef write 434
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 438 ); // i2cRead  coef write 438
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 442 ); // i2cRead  coef read 442
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 446 ); // i2cRead  coef read 446
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 450 ); // i2cRead  coef read 450
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 454 ); // i2cRead  coef read 454
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 458 ); // i2cRead  coef write 458
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 465 ); // i2cRead  coef read 465
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 469 ); // i2cRead  coef write 469
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 473 ); // i2cRead  coef write 473
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 477 ); // i2cRead  coef write 477
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 481 ); // i2cRead  coef read 481
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 485 ); // i2cRead  coef read 485
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 489 ); // i2cRead  coef read 489
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 493 ); // i2cRead  coef read 493
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 497 ); // i2cRead  coef write 497
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 504 ); // i2cRead  coef read 504
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 508 ); // i2cRead  coef write 508
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 512 ); // i2cRead  coef write 512
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 516 ); // i2cRead  coef write 516
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 520 ); // i2cRead  coef read 520
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 524 ); // i2cRead  coef read 524
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 528 ); // i2cRead  coef read 528
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 532 ); // i2cRead  coef read 532
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 536 ); // i2cRead  coef write 536
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 543 ); // i2cWrite  coef read 543
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 547 ); // i2cWrite  coef write 547
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 551 ); // i2cWrite  coef write 551
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 555 ); // i2cWrite  coef write 555
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 559 ); // i2cWrite  coef read 559
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 563 ); // i2cWrite  coef read 563
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 567 ); // i2cWrite  coef read 567
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 571 ); // i2cWrite  coef write 571
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 578 ); // i2cRead  coef read 578
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 582 ); // i2cRead  coef write 582
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 586 ); // i2cRead  coef write 586
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 590 ); // i2cRead  coef write 590
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 594 ); // i2cRead  coef read 594
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 598 ); // i2cRead  coef read 598
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 602 ); // i2cRead  coef read 602
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 606 ); // i2cRead  coef read 606
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 610 ); // i2cRead  coef write 610
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 617 ); // i2cRead  coef read 617
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 621 ); // i2cRead  coef write 621
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 625 ); // i2cRead  coef write 625
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 629 ); // i2cRead  coef write 629
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 633 ); // i2cRead  coef read 633
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 637 ); // i2cRead  coef read 637
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 641 ); // i2cRead  coef read 641
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 645 ); // i2cRead  coef read 645
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 649 ); // i2cRead  coef write 649
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 656 ); // i2cRead  coef read 656
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 660 ); // i2cRead  coef write 660
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 664 ); // i2cRead  coef write 664
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 668 ); // i2cRead  coef write 668
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 672 ); // i2cRead  coef read 672
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 676 ); // i2cRead  coef read 676
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 680 ); // i2cRead  coef read 680
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 684 ); // i2cRead  coef read 684
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 688 ); // i2cRead  coef write 688
//      snd_hda i2cRead end

}

static void playstop_disable_TDM_7472(struct hda_codec *codec)
{
        int retval;

        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00000840, 694 ); //   coef read 694
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001b, 0x8840, 0x00000000, 698 ); //   coef write 698
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00000860, 702 ); //   coef read 702
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x001c, 0x8860, 0x00000000, 706 ); //   coef write 706

        snd_hda_coef_item(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0x00005401, 710 ); // coef write mask 710
//      snd_hda_coef_item_masked(codec, 2, CS8409_VENDOR_NID, 0x0082, 0x0001, 0xundef, 0x00005401, 710 ); // coef write mask 710

        // AppleHDATDMBusManagerCS8409::setupTDMPath or AppleHDATDMBusManagerCS8409::disableTDMPath
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0001, 0x0000, 0x00000220, 716 ); //   coef read 716
        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0001, 0x0200, 0x00000000, 720 ); //   coef write 720

        // AppleHDATDMBusManagerCS8409::setupTDMPath or disableTDMPath calls AppleHDATDMBusManagerCS8409::configureTDMUR
        // AppleHDATDMBusManagerCS8409::configureTDMUR only place calls this
        // this is AppleHDATDMBusManagerCS8409::tdmInUse
        // which reads from 0x19 to 0x57 in a loop if the snd_hda_coef_item returns 0 till the read value
        // does not have the word sign bit set (ie 0x8000) or finish all 0x57

//      snd_hda: # AppleHDATDMBusManagerCS8409::configureTDMUR: AppleHDATDMBusManagerCS8409::tdmInUse:
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0019, 0x0000, 0x00008800, 724 ); //   coef read 724
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001a, 0x0000, 0x00008820, 728 ); //   coef read 728
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001b, 0x0000, 0x00008840, 732 ); //   coef read 732
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001c, 0x0000, 0x00008860, 736 ); //   coef read 736
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001d, 0x0000, 0x00008000, 740 ); //   coef read 740
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001e, 0x0000, 0x00008000, 744 ); //   coef read 744
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x001f, 0x0000, 0x00008000, 748 ); //   coef read 748
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0020, 0x0000, 0x00008000, 752 ); //   coef read 752
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0021, 0x0000, 0x00008000, 756 ); //   coef read 756
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0022, 0x0000, 0x00008000, 760 ); //   coef read 760
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0023, 0x0000, 0x00008000, 764 ); //   coef read 764
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0024, 0x0000, 0x00008000, 768 ); //   coef read 768
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0025, 0x0000, 0x00008000, 772 ); //   coef read 772
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0026, 0x0000, 0x00008000, 776 ); //   coef read 776
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0027, 0x0000, 0x00008000, 780 ); //   coef read 780
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0028, 0x0000, 0x00008000, 784 ); //   coef read 784
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0029, 0x0000, 0x00008000, 788 ); //   coef read 788
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002a, 0x0000, 0x00008000, 792 ); //   coef read 792
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002b, 0x0000, 0x00008000, 796 ); //   coef read 796
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002c, 0x0000, 0x00008000, 800 ); //   coef read 800
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002d, 0x0000, 0x00008000, 804 ); //   coef read 804
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002e, 0x0000, 0x00008000, 808 ); //   coef read 808
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x002f, 0x0000, 0x00008000, 812 ); //   coef read 812
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0030, 0x0000, 0x00008000, 816 ); //   coef read 816
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0031, 0x0000, 0x00008000, 820 ); //   coef read 820
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0032, 0x0000, 0x00008000, 824 ); //   coef read 824
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0033, 0x0000, 0x00008000, 828 ); //   coef read 828
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0034, 0x0000, 0x00008000, 832 ); //   coef read 832
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0035, 0x0000, 0x00008000, 836 ); //   coef read 836
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0036, 0x0000, 0x00008000, 840 ); //   coef read 840
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0037, 0x0000, 0x00008000, 844 ); //   coef read 844
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0038, 0x0000, 0x00008000, 848 ); //   coef read 848
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0039, 0x0000, 0x00008000, 852 ); //   coef read 852
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003a, 0x0000, 0x00008000, 856 ); //   coef read 856
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003b, 0x0000, 0x00008000, 860 ); //   coef read 860
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003c, 0x0000, 0x00008000, 864 ); //   coef read 864
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003d, 0x0000, 0x00008000, 868 ); //   coef read 868
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003e, 0x0000, 0x00008000, 872 ); //   coef read 872
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x003f, 0x0000, 0x00008000, 876 ); //   coef read 876
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0040, 0x0000, 0x00008000, 880 ); //   coef read 880
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0041, 0x0000, 0x00008000, 884 ); //   coef read 884
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0042, 0x0000, 0x00008000, 888 ); //   coef read 888
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0043, 0x0000, 0x00008000, 892 ); //   coef read 892
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0044, 0x0000, 0x00008000, 896 ); //   coef read 896
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0045, 0x0000, 0x00008000, 900 ); //   coef read 900
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0046, 0x0000, 0x00008000, 904 ); //   coef read 904
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0047, 0x0000, 0x00008000, 908 ); //   coef read 908
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0048, 0x0000, 0x00008000, 912 ); //   coef read 912
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0049, 0x0000, 0x00008000, 916 ); //   coef read 916
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004a, 0x0000, 0x00008000, 920 ); //   coef read 920
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004b, 0x0000, 0x00008000, 924 ); //   coef read 924
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004c, 0x0000, 0x00008000, 928 ); //   coef read 928
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004d, 0x0000, 0x00008000, 932 ); //   coef read 932
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004e, 0x0000, 0x00008000, 936 ); //   coef read 936
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x004f, 0x0000, 0x00008000, 940 ); //   coef read 940
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0050, 0x0000, 0x00008000, 944 ); //   coef read 944
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0051, 0x0000, 0x00008000, 948 ); //   coef read 948
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0052, 0x0000, 0x00008000, 952 ); //   coef read 952
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0053, 0x0000, 0x00008000, 956 ); //   coef read 956
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0054, 0x0000, 0x00008000, 960 ); //   coef read 960
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0055, 0x0000, 0x00008000, 964 ); //   coef read 964
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0056, 0x0000, 0x00008000, 968 ); //   coef read 968
        snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0057, 0x0000, 0x00008000, 972 ); //   coef read 972

        snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0071, 0x0000, 0x00000000, 977 ); //   coef write 977

        snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, 0x7f0, 0x00000000);


        // set to defaults and disable output

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_CHANNEL_STREAMID, 0x00000000); // 0x00370600
//      snd_hda:     conv stream channel map 3 [('CHAN', 0), ('STREAMID', 0)]

        snd_hda_codec_write(codec, 0x03, 0, AC_VERB_SET_STREAM_FORMAT, 0x00000000); // 0x00320000
//      snd_hda:     stream format 3 [('CHAN', 1), ('RATE', 48000), ('BITS', 8), ('RATE_MUL', 1), ('RATE_DIV', 1)]

        retval = snd_hda_codec_read_check(codec, 0x25, 0, AC_VERB_GET_PIN_WIDGET_CONTROL, 0x00000000, 0x00000040, 986); // 0x025f0700
        snd_hda_codec_write(codec, 0x25, 0, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x00000000); // 0x02570700
//      snd_hda:     37 []

}


static void playstop_disable2_amps_6462(struct hda_codec *codec)
{
        //int retval;

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x64 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x64, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 993 ); // i2cWrite  coef read 993
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 997 ); // i2cWrite  coef write 997
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 1001 ); // i2cWrite  coef write 1001
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 1005 ); // i2cWrite  coef write 1005
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1009 ); // i2cWrite  coef read 1009
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1013 ); // i2cWrite  coef read 1013
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1017 ); // i2cWrite  coef read 1017
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1021 ); // i2cWrite  coef write 1021
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x64, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1028 ); // i2cRead  coef read 1028
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1032 ); // i2cRead  coef write 1032
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 1036 ); // i2cRead  coef write 1036
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 1040 ); // i2cRead  coef write 1040
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1044 ); // i2cRead  coef read 1044
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1048 ); // i2cRead  coef read 1048
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 1052 ); // i2cRead  coef read 1052
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1056 ); // i2cRead  coef read 1056
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1060 ); // i2cRead  coef write 1060
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x64, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1067 ); // i2cRead  coef read 1067
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1071 ); // i2cRead  coef write 1071
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 1075 ); // i2cRead  coef write 1075
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 1079 ); // i2cRead  coef write 1079
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1083 ); // i2cRead  coef read 1083
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1087 ); // i2cRead  coef read 1087
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 1091 ); // i2cRead  coef read 1091
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1095 ); // i2cRead  coef read 1095
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1099 ); // i2cRead  coef write 1099
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x64 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x64, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1106 ); // i2cRead  coef read 1106
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1110 ); // i2cRead  coef write 1110
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0064, 0x00000000, 1114 ); // i2cRead  coef write 1114
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 1118 ); // i2cRead  coef write 1118
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1122 ); // i2cRead  coef read 1122
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1126 ); // i2cRead  coef read 1126
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 1130 ); // i2cRead  coef read 1130
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1134 ); // i2cRead  coef read 1134
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1138 ); // i2cRead  coef write 1138
//      snd_hda i2cRead end

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x62 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x62, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1145 ); // i2cWrite  coef read 1145
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1149 ); // i2cWrite  coef write 1149
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1153 ); // i2cWrite  coef write 1153
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 1157 ); // i2cWrite  coef write 1157
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1161 ); // i2cWrite  coef read 1161
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1165 ); // i2cWrite  coef read 1165
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1169 ); // i2cWrite  coef read 1169
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1173 ); // i2cWrite  coef write 1173
//      snd_hda i2cWrite end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x62, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1180 ); // i2cRead  coef read 1180
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1184 ); // i2cRead  coef write 1184
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1188 ); // i2cRead  coef write 1188
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 1192 ); // i2cRead  coef write 1192
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1196 ); // i2cRead  coef read 1196
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1200 ); // i2cRead  coef read 1200
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 1204 ); // i2cRead  coef read 1204
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1208 ); // i2cRead  coef read 1208
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1212 ); // i2cRead  coef write 1212
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x62, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1219 ); // i2cRead  coef read 1219
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1223 ); // i2cRead  coef write 1223
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1227 ); // i2cRead  coef write 1227
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 1231 ); // i2cRead  coef write 1231
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1235 ); // i2cRead  coef read 1235
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1239 ); // i2cRead  coef read 1239
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 1243 ); // i2cRead  coef read 1243
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1247 ); // i2cRead  coef read 1247
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1251 ); // i2cRead  coef write 1251
//      snd_hda i2cRead end

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x62 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x62, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1258 ); // i2cRead  coef read 1258
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1262 ); // i2cRead  coef write 1262
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0062, 0x00000000, 1266 ); // i2cRead  coef write 1266
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 1270 ); // i2cRead  coef write 1270
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1274 ); // i2cRead  coef read 1274
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1278 ); // i2cRead  coef read 1278
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 1282 ); // i2cRead  coef read 1282
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1286 ); // i2cRead  coef read 1286
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1290 ); // i2cRead  coef write 1290
//      snd_hda i2cRead end

        // why these in the middle??
        // is this just a delayed output??
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503

}

static void playstop_disable2_amps_7472(struct hda_codec *codec)
{
        //int retval;

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x74 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x74, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1304 ); // i2cWrite  coef read 1304
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1308 ); // i2cWrite  coef write 1308
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1312 ); // i2cWrite  coef write 1312
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 1316 ); // i2cWrite  coef write 1316
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1320 ); // i2cWrite  coef read 1320
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1324 ); // i2cWrite  coef read 1324
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1328 ); // i2cWrite  coef read 1328
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1332 ); // i2cWrite  coef write 1332
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x74, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1343 ); // i2cRead  coef read 1343
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1347 ); // i2cRead  coef write 1347
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1351 ); // i2cRead  coef write 1351
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 1355 ); // i2cRead  coef write 1355
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1359 ); // i2cRead  coef read 1359
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1363 ); // i2cRead  coef read 1363
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 1367 ); // i2cRead  coef read 1367
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1371 ); // i2cRead  coef read 1371
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1375 ); // i2cRead  coef write 1375
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x74, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1386 ); // i2cRead  coef read 1386
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1390 ); // i2cRead  coef write 1390
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1394 ); // i2cRead  coef write 1394
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 1398 ); // i2cRead  coef write 1398
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1402 ); // i2cRead  coef read 1402
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1406 ); // i2cRead  coef read 1406
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 1410 ); // i2cRead  coef read 1410
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1414 ); // i2cRead  coef read 1414
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1418 ); // i2cRead  coef write 1418
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x74 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x74, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1429 ); // i2cRead  coef read 1429
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1433 ); // i2cRead  coef write 1433
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0074, 0x00000000, 1437 ); // i2cRead  coef write 1437
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 1441 ); // i2cRead  coef write 1441
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1445 ); // i2cRead  coef read 1445
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1449 ); // i2cRead  coef read 1449
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 1453 ); // i2cRead  coef read 1453
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1457 ); // i2cRead  coef read 1457
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1461 ); // i2cRead  coef write 1461
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cWrite: 
//      snd_hda i2cWrite      i2c address 0x72 i2c            reg 0x5000 i2c data 0x0000   reg anal: GlobalEnable            : Disable
        cs_8409_vendor_i2cWrite(codec, 0x72, 0x0050, 0x0000, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cWrite 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1472 ); // i2cWrite  coef read 1472
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1476 ); // i2cWrite  coef write 1476
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1480 ); // i2cWrite  coef write 1480
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005d, 0x5000, 0x00000000, 1484 ); // i2cWrite  coef write 1484
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1488 ); // i2cWrite  coef read 1488
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1492 ); // i2cWrite  coef read 1492
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1496 ); // i2cWrite  coef read 1496
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1500 ); // i2cWrite  coef write 1500
//      snd_hda i2cWrite end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0300 i2c data 0x0300   reg anal: InterruptState0
        cs_8409_vendor_i2cRead(codec, 0x72, 0x0003, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1511 ); // i2cRead  coef read 1511
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1515 ); // i2cRead  coef write 1515
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1519 ); // i2cRead  coef write 1519
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0300, 0x00000000, 1523 ); // i2cRead  coef write 1523
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1527 ); // i2cRead  coef read 1527
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1531 ); // i2cRead  coef read 1531
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000300, 1535 ); // i2cRead  coef read 1535
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1539 ); // i2cRead  coef read 1539
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1543 ); // i2cRead  coef write 1543
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0400 i2c data 0x0400   reg anal: InterruptState1
        cs_8409_vendor_i2cRead(codec, 0x72, 0x0004, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1554 ); // i2cRead  coef read 1554
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1558 ); // i2cRead  coef write 1558
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1562 ); // i2cRead  coef write 1562
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0400, 0x00000000, 1566 ); // i2cRead  coef write 1566
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1570 ); // i2cRead  coef read 1570
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1574 ); // i2cRead  coef read 1574
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000400, 1578 ); // i2cRead  coef read 1578
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1582 ); // i2cRead  coef read 1582
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1586 ); // i2cRead  coef write 1586
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000000); // 0x00170500

//      snd_hda: # i2cRead: 
//      snd_hda i2cRead       i2c address 0x72 i2c            reg 0x0c00 i2c data 0x0c00   reg anal: State1
        cs_8409_vendor_i2cRead(codec, 0x72, 0x000c, 0); // snd_hda
        //snd_hda_codec_write(codec, CS8409_VENDOR_NID, 0, AC_VERB_SET_PROC_STATE, 0x00000001); // i2cRead 0x04770301
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009000, 1597 ); // i2cRead  coef read 1597
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9008, 0x00000000, 1601 ); // i2cRead  coef write 1601
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0059, 0x0072, 0x00000000, 1605 ); // i2cRead  coef write 1605
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x005e, 0x0c00, 0x00000000, 1609 ); // i2cRead  coef write 1609
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1613 ); // i2cRead  coef read 1613
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005c, 0x0000, 0x00000038, 1617 ); // i2cRead  coef read 1617
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x005e, 0x0000, 0x00000c00, 1621 ); // i2cRead  coef read 1621
        //snd_hda_coef_item(codec, 0, CS8409_VENDOR_NID, 0x0000, 0x0000, 0x00009008, 1625 ); // i2cRead  coef read 1625
        //snd_hda_coef_item(codec, 1, CS8409_VENDOR_NID, 0x0000, 0x9000, 0x00000000, 1629 ); // i2cRead  coef write 1629
//      snd_hda i2cRead end

        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 1636); // 0x022f0500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 1637); // 0x023f0500
}


static void cs_8409_playstop_data(struct hda_codec *codec)
{
        //int retval;

        printk("snd_hda_intel: command nid cs_8409_playstop_data start");



        playstop_start(codec);

        playstop_sync_converters(codec);

        playstop_disable_amps_6462(codec);

        playstop_disable_TDM_6462(codec);

        playstop_disable_amps_7472(codec);

        playstop_disable_TDM_7472(codec);

        playstop_disable2_amps_6462(codec);

        playstop_disable2_amps_7472(codec);


        //snd_hda_codec_write(codec, codec->core.afg, 0, AC_VERB_SET_POWER_STATE, 0x00000003); // 0x00170503
        hda_set_node_power_state(codec, codec->core.afg, AC_PWRST_D3);

        //retval = snd_hda_codec_read_check(codec, 0x22, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 1636); // 0x022f0500
        //retval = snd_hda_codec_read_check(codec, 0x23, 0, AC_VERB_GET_POWER_STATE, 0x00000000, 0x00000033, 1637); // 0x023f0500
        //hda_set_node_power_state(codec, 0x22, AC_PWRST_D3);
        //hda_set_node_power_state(codec, 0x23, AC_PWRST_D3);


        printk("snd_hda_intel: command nid cs_8409_playstop_data end");

}

